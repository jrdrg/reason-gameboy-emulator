// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Mmu$GameboyEmulator = require("./Mmu.bs.js");

var UnhandledInstruction = Caml_exceptions.create("Cpu-GameboyEmulator.UnhandledInstruction");

function make() {
  return /* record */[
          /* clock */0,
          /* registers : record */[
            /* a */0,
            /* b */0,
            /* c */0,
            /* d */0,
            /* e */0,
            /* h */0,
            /* l */0,
            /* f */0,
            /* sp */0,
            /* pc */0,
            /* mCycles */0
          ]
        ];
}

function programCount(cpu) {
  return cpu[/* registers */1][/* pc */9];
}

function rAf(param) {
  var match = param[/* registers */1];
  return match[/* f */7] + (match[/* a */0] << 8) | 0;
}

function rBc(param) {
  var match = param[/* registers */1];
  return match[/* c */2] + (match[/* b */1] << 8) | 0;
}

function rDe(param) {
  var match = param[/* registers */1];
  return match[/* e */4] + (match[/* d */3] << 8) | 0;
}

function rHl(param) {
  var match = param[/* registers */1];
  return match[/* l */6] + (match[/* h */5] << 8) | 0;
}

function setPc(t, v) {
  return /* record */[
          /* a */t[/* a */0],
          /* b */t[/* b */1],
          /* c */t[/* c */2],
          /* d */t[/* d */3],
          /* e */t[/* e */4],
          /* h */t[/* h */5],
          /* l */t[/* l */6],
          /* f */t[/* f */7],
          /* sp */t[/* sp */8],
          /* pc */v,
          /* mCycles */t[/* mCycles */10]
        ];
}

function incSp(t) {
  return /* record */[
          /* a */t[/* a */0],
          /* b */t[/* b */1],
          /* c */t[/* c */2],
          /* d */t[/* d */3],
          /* e */t[/* e */4],
          /* h */t[/* h */5],
          /* l */t[/* l */6],
          /* f */t[/* f */7],
          /* sp */t[/* sp */8] + 1 | 0,
          /* pc */t[/* pc */9],
          /* mCycles */t[/* mCycles */10]
        ];
}

function decSp(t) {
  return /* record */[
          /* a */t[/* a */0],
          /* b */t[/* b */1],
          /* c */t[/* c */2],
          /* d */t[/* d */3],
          /* e */t[/* e */4],
          /* h */t[/* h */5],
          /* l */t[/* l */6],
          /* f */t[/* f */7],
          /* sp */t[/* sp */8] - 1 | 0,
          /* pc */t[/* pc */9],
          /* mCycles */t[/* mCycles */10]
        ];
}

function machineCycles(cycles, registers) {
  return /* record */[
          /* a */registers[/* a */0],
          /* b */registers[/* b */1],
          /* c */registers[/* c */2],
          /* d */registers[/* d */3],
          /* e */registers[/* e */4],
          /* h */registers[/* h */5],
          /* l */registers[/* l */6],
          /* f */registers[/* f */7],
          /* sp */registers[/* sp */8],
          /* pc */registers[/* pc */9],
          /* mCycles */cycles
        ];
}

function nop(cpu, mmu) {
  return /* tuple */[
          /* record */[
            /* clock */cpu[/* clock */0],
            /* registers */machineCycles(1, cpu[/* registers */1])
          ],
          mmu
        ];
}

function ld_bc_nn(cpu, mmu) {
  var pc = cpu[/* registers */1][/* pc */9];
  var c = Mmu$GameboyEmulator.read8(pc, mmu);
  var b = Mmu$GameboyEmulator.read8(pc + 1 | 0, mmu);
  var init = cpu[/* registers */1];
  return /* tuple */[
          /* record */[
            /* clock */cpu[/* clock */0],
            /* registers : record */[
              /* a */init[/* a */0],
              /* b */b,
              /* c */c,
              /* d */init[/* d */3],
              /* e */init[/* e */4],
              /* h */init[/* h */5],
              /* l */init[/* l */6],
              /* f */init[/* f */7],
              /* sp */init[/* sp */8],
              /* pc */pc + 2 | 0,
              /* mCycles */3
            ]
          ],
          mmu
        ];
}

function ld_bc_a(cpu, mmu) {
  var init = cpu[/* registers */1];
  return /* tuple */[
          /* record */[
            /* clock */cpu[/* clock */0],
            /* registers : record */[
              /* a */init[/* a */0],
              /* b */init[/* b */1],
              /* c */init[/* c */2],
              /* d */init[/* d */3],
              /* e */init[/* e */4],
              /* h */init[/* h */5],
              /* l */init[/* l */6],
              /* f */init[/* f */7],
              /* sp */init[/* sp */8],
              /* pc */init[/* pc */9],
              /* mCycles */2
            ]
          ],
          mmu
        ];
}

var Ops = /* module */[
  /* nop */nop,
  /* ld_bc_nn */ld_bc_nn,
  /* ld_bc_a */ld_bc_a
];

function exec(instruction) {
  if (instruction !== 0) {
    if (instruction !== 1) {
      throw [
            UnhandledInstruction,
            Curry._1(Printf.sprintf(/* Format */[
                      /* String_literal */Block.__(11, [
                          "Unhandled instruction, ",
                          /* Int */Block.__(4, [
                              /* Int_Cx */7,
                              /* Lit_padding */Block.__(0, [
                                  /* Right */1,
                                  2
                                ]),
                              /* No_precision */0,
                              /* End_of_format */0
                            ])
                        ]),
                      "Unhandled instruction, %#2x"
                    ]), instruction)
          ];
    } else {
      return ld_bc_nn;
    }
  } else {
    return nop;
  }
}

exports.UnhandledInstruction = UnhandledInstruction;
exports.make = make;
exports.programCount = programCount;
exports.rAf = rAf;
exports.rBc = rBc;
exports.rDe = rDe;
exports.rHl = rHl;
exports.setPc = setPc;
exports.incSp = incSp;
exports.decSp = decSp;
exports.machineCycles = machineCycles;
exports.Ops = Ops;
exports.exec = exec;
/* No side effect */
