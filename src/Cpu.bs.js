// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Mmu$GameboyEmulator = require("./Mmu.bs.js");

function flagOffset(flag) {
  switch (flag) {
    case 0 : 
        return 7;
    case 1 : 
        return 6;
    case 2 : 
        return 5;
    case 3 : 
        return 4;
    
  }
}

function setFlag(flag, value, flags) {
  var bit = (1 << flagOffset(flag));
  if (value !== 0) {
    return flags | bit;
  } else {
    return flags & Pervasives.lnot(bit);
  }
}

var Flags = /* module */[
  /* z */7,
  /* n */6,
  /* h */5,
  /* c */4,
  /* flagOffset */flagOffset,
  /* setFlag */setFlag
];

var UnhandledInstruction = Caml_exceptions.create("Cpu-GameboyEmulator.UnhandledInstruction");

function make() {
  return /* record */[
          /* clock */0,
          /* registers : record */[
            /* a */0,
            /* b */0,
            /* c */0,
            /* d */0,
            /* e */0,
            /* h */0,
            /* l */0,
            /* f */0,
            /* sp */0,
            /* pc */0,
            /* mCycles */0
          ]
        ];
}

function b2i(bool) {
  if (bool) {
    return 1;
  } else {
    return 0;
  }
}

function programCount(cpu) {
  return cpu[/* registers */1][/* pc */9];
}

function readRegister16(register, param) {
  var match = param[/* registers */1];
  var match$1;
  switch (register) {
    case 0 : 
        match$1 = /* tuple */[
          match[/* a */0],
          match[/* f */7]
        ];
        break;
    case 1 : 
        match$1 = /* tuple */[
          match[/* b */1],
          match[/* c */2]
        ];
        break;
    case 2 : 
        match$1 = /* tuple */[
          match[/* d */3],
          match[/* e */4]
        ];
        break;
    case 3 : 
        match$1 = /* tuple */[
          match[/* h */5],
          match[/* l */6]
        ];
        break;
    
  }
  return match$1[1] + (match$1[0] << 8) | 0;
}

function rAf(param) {
  return readRegister16(/* AF */0, param);
}

function rBc(param) {
  return readRegister16(/* BC */1, param);
}

function rDe(param) {
  return readRegister16(/* DE */2, param);
}

function rHl(param) {
  return readRegister16(/* HL */3, param);
}

function incrementPc(cycles, cpu) {
  var init = cpu[/* registers */1];
  return /* record */[
          /* clock */cpu[/* clock */0],
          /* registers : record */[
            /* a */init[/* a */0],
            /* b */init[/* b */1],
            /* c */init[/* c */2],
            /* d */init[/* d */3],
            /* e */init[/* e */4],
            /* h */init[/* h */5],
            /* l */init[/* l */6],
            /* f */init[/* f */7],
            /* sp */init[/* sp */8],
            /* pc */cpu[/* registers */1][/* pc */9] + cycles | 0,
            /* mCycles */init[/* mCycles */10]
          ]
        ];
}

function incrementSp(t) {
  return /* record */[
          /* a */t[/* a */0],
          /* b */t[/* b */1],
          /* c */t[/* c */2],
          /* d */t[/* d */3],
          /* e */t[/* e */4],
          /* h */t[/* h */5],
          /* l */t[/* l */6],
          /* f */t[/* f */7],
          /* sp */t[/* sp */8] + 1 | 0,
          /* pc */t[/* pc */9],
          /* mCycles */t[/* mCycles */10]
        ];
}

function decrementSp(t) {
  return /* record */[
          /* a */t[/* a */0],
          /* b */t[/* b */1],
          /* c */t[/* c */2],
          /* d */t[/* d */3],
          /* e */t[/* e */4],
          /* h */t[/* h */5],
          /* l */t[/* l */6],
          /* f */t[/* f */7],
          /* sp */t[/* sp */8] - 1 | 0,
          /* pc */t[/* pc */9],
          /* mCycles */t[/* mCycles */10]
        ];
}

function setFlag$1(flag, value, initialValue, cpu) {
  var init = cpu[/* registers */1];
  return /* record */[
          /* clock */cpu[/* clock */0],
          /* registers : record */[
            /* a */init[/* a */0],
            /* b */init[/* b */1],
            /* c */init[/* c */2],
            /* d */init[/* d */3],
            /* e */init[/* e */4],
            /* h */init[/* h */5],
            /* l */init[/* l */6],
            /* f */setFlag(flag, value, Belt_Option.getWithDefault(initialValue, cpu[/* registers */1][/* f */7])),
            /* sp */init[/* sp */8],
            /* pc */init[/* pc */9],
            /* mCycles */init[/* mCycles */10]
          ]
        ];
}

function getFlag(flag, cpu) {
  var bit = (1 << flagOffset(flag));
  return cpu[/* registers */1][/* f */7] & bit;
}

function setRegisters(a, b, c, d, e, h, l, cpu) {
  var init = cpu[/* registers */1];
  return /* record */[
          /* clock */cpu[/* clock */0],
          /* registers : record */[
            /* a */Belt_Option.getWithDefault(a, cpu[/* registers */1][/* a */0]),
            /* b */Belt_Option.getWithDefault(b, cpu[/* registers */1][/* b */1]),
            /* c */Belt_Option.getWithDefault(c, cpu[/* registers */1][/* c */2]),
            /* d */Belt_Option.getWithDefault(d, cpu[/* registers */1][/* d */3]),
            /* e */Belt_Option.getWithDefault(e, cpu[/* registers */1][/* e */4]),
            /* h */Belt_Option.getWithDefault(h, cpu[/* registers */1][/* h */5]),
            /* l */Belt_Option.getWithDefault(l, cpu[/* registers */1][/* l */6]),
            /* f */init[/* f */7],
            /* sp */init[/* sp */8],
            /* pc */init[/* pc */9],
            /* mCycles */init[/* mCycles */10]
          ]
        ];
}

function machineCycles(cycles, cpu) {
  var init = cpu[/* registers */1];
  return /* record */[
          /* clock */cpu[/* clock */0],
          /* registers : record */[
            /* a */init[/* a */0],
            /* b */init[/* b */1],
            /* c */init[/* c */2],
            /* d */init[/* d */3],
            /* e */init[/* e */4],
            /* h */init[/* h */5],
            /* l */init[/* l */6],
            /* f */init[/* f */7],
            /* sp */init[/* sp */8],
            /* pc */init[/* pc */9],
            /* mCycles */cycles
          ]
        ];
}

function nop(cpu, mmu) {
  return /* tuple */[
          machineCycles(1, cpu),
          mmu
        ];
}

function ld_bc_nn(cpu, mmu) {
  var pc = cpu[/* registers */1][/* pc */9];
  var match = Mmu$GameboyEmulator.read8(pc, mmu);
  var match$1 = Mmu$GameboyEmulator.read8(pc + 1 | 0, match[1]);
  var arg = match$1[0];
  var arg$1 = match[0];
  return /* tuple */[
          incrementPc(2, machineCycles(3, (function (param) {
                          return (function (param$1, param$2, param$3, param$4, param$5) {
                              return setRegisters(param, arg, arg$1, param$1, param$2, param$3, param$4, param$5);
                            });
                        })(undefined)(undefined, undefined, undefined, undefined, cpu))),
          match$1[1]
        ];
}

function ld_m_bc_a(cpu, mmu) {
  var match = cpu[/* registers */1];
  var mmuWrite = Mmu$GameboyEmulator.write8(rBc(cpu), match[/* a */0], mmu);
  var init = cpu[/* registers */1];
  return /* tuple */[
          /* record */[
            /* clock */cpu[/* clock */0],
            /* registers : record */[
              /* a */init[/* a */0],
              /* b */init[/* b */1],
              /* c */init[/* c */2],
              /* d */init[/* d */3],
              /* e */init[/* e */4],
              /* h */init[/* h */5],
              /* l */init[/* l */6],
              /* f */init[/* f */7],
              /* sp */init[/* sp */8],
              /* pc */init[/* pc */9],
              /* mCycles */2
            ]
          ],
          mmuWrite
        ];
}

function inc_bc(cpu, mmu) {
  var c = cpu[/* registers */1][/* c */2] + 1 & 255;
  var b = c === 0 ? cpu[/* registers */1][/* b */1] + 1 | 0 : cpu[/* registers */1][/* b */1];
  var arg = b;
  var arg$1 = c;
  return /* tuple */[
          machineCycles(3, (function (param) {
                      return (function (param$1, param$2, param$3, param$4, param$5) {
                          return setRegisters(param, arg, arg$1, param$1, param$2, param$3, param$4, param$5);
                        });
                    })(undefined)(undefined, undefined, undefined, undefined, cpu)),
          mmu
        ];
}

function inc_b(cpu, mmu) {
  var b = cpu[/* registers */1][/* b */1] + 1 & 255;
  var f = cpu[/* registers */1][/* f */7] & 16;
  var arg = b;
  return /* tuple */[
          setFlag$1(/* Z */0, b === 0 ? 1 : 0, f, (function (param) {
                      return (function (param$1, param$2, param$3, param$4, param$5, param$6) {
                          return setRegisters(param, arg, param$1, param$2, param$3, param$4, param$5, param$6);
                        });
                    })(undefined)(undefined, undefined, undefined, undefined, undefined, cpu)),
          mmu
        ];
}

function dec_b(cpu, mmu) {
  var b = cpu[/* registers */1][/* b */1] - 1 & 255;
  var f = cpu[/* registers */1][/* f */7] & 16;
  var arg = b;
  return /* tuple */[
          (function (eta) {
                var param = undefined;
                var param$1 = eta;
                return setFlag$1(/* N */1, 1, param, param$1);
              })(setFlag$1(/* Z */0, b === 0 ? 1 : 0, f, (function (param) {
                          return (function (param$1, param$2, param$3, param$4, param$5, param$6) {
                              return setRegisters(param, arg, param$1, param$2, param$3, param$4, param$5, param$6);
                            });
                        })(undefined)(undefined, undefined, undefined, undefined, undefined, cpu))),
          mmu
        ];
}

var Ops = /* module */[
  /* nop */nop,
  /* ld_bc_nn */ld_bc_nn,
  /* ld_m_bc_a */ld_m_bc_a,
  /* inc_bc */inc_bc,
  /* inc_b */inc_b,
  /* dec_b */dec_b
];

function exec(instruction) {
  if (instruction > 5 || instruction < 0) {
    throw [
          UnhandledInstruction,
          Curry._1(Printf.sprintf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "Unhandled instruction, ",
                        /* Int */Block.__(4, [
                            /* Int_Cx */7,
                            /* Lit_padding */Block.__(0, [
                                /* Right */1,
                                2
                              ]),
                            /* No_precision */0,
                            /* End_of_format */0
                          ])
                      ]),
                    "Unhandled instruction, %#2x"
                  ]), instruction)
        ];
  } else {
    switch (instruction) {
      case 0 : 
          return nop;
      case 1 : 
          return ld_bc_nn;
      case 2 : 
          return ld_m_bc_a;
      case 3 : 
          return inc_bc;
      case 4 : 
          return inc_b;
      case 5 : 
          return dec_b;
      
    }
  }
}

exports.Flags = Flags;
exports.UnhandledInstruction = UnhandledInstruction;
exports.make = make;
exports.b2i = b2i;
exports.programCount = programCount;
exports.readRegister16 = readRegister16;
exports.rAf = rAf;
exports.rBc = rBc;
exports.rDe = rDe;
exports.rHl = rHl;
exports.incrementPc = incrementPc;
exports.incrementSp = incrementSp;
exports.decrementSp = decrementSp;
exports.setFlag = setFlag$1;
exports.getFlag = getFlag;
exports.setRegisters = setRegisters;
exports.machineCycles = machineCycles;
exports.Ops = Ops;
exports.exec = exec;
/* No side effect */
