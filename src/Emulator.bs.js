// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var CamlinternalOO = require("bs-platform/lib/js/camlinternalOO.js");
var Mmu$GameboyEmulator = require("./Mmu.bs.js");

function make() {
  return /* record */[
          /* clock */0,
          /* registers : record */[
            /* a */0,
            /* b */0,
            /* c */0,
            /* d */0,
            /* e */0,
            /* h */0,
            /* l */0,
            /* f */0,
            /* sp */0,
            /* pc */0
          ]
        ];
}

var Cpu = /* module */[/* make */make];

function make$1(canvas) {
  console.log(canvas);
  return /* record */[
          /* canvas */canvas,
          /* vram */Caml_array.caml_make_vect(8192, 0),
          /* oam */Caml_array.caml_make_vect(160, 0)
        ];
}

var class_tables = [
  0,
  0,
  0
];

function reset() {
  if (!class_tables[0]) {
    var $$class = CamlinternalOO.create_table(0);
    var env = CamlinternalOO.new_variable($$class, "");
    var env_init = function (env$1) {
      var self = CamlinternalOO.create_object_opt(0, $$class);
      self[env] = env$1;
      return self;
    };
    CamlinternalOO.init_class($$class);
    class_tables[0] = env_init;
  }
  return Curry._1(class_tables[0], 0);
}

var Gpu = /* module */[
  /* make */make$1,
  /* reset */reset
];

function load(bytes, canvas) {
  console.log("Loaded, ROM length: ", bytes.length);
  var mmu = Mmu$GameboyEmulator.load(bytes);
  var b = Mmu$GameboyEmulator.read8(mmu, 1);
  console.log("Byte:", b);
  return /* record */[
          /* gpu */make$1(canvas),
          /* cpu */make(/* () */0),
          /* mmu */mmu,
          /* rom */bytes
        ];
}

function reset$1(state) {
  return /* record */[
          /* gpu */state[/* gpu */0],
          /* cpu */state[/* cpu */1],
          /* mmu */Mmu$GameboyEmulator.reset(state[/* mmu */2]),
          /* rom */state[/* rom */3]
        ];
}

function frame(s) {
  return s;
}

exports.Cpu = Cpu;
exports.Gpu = Gpu;
exports.load = load;
exports.reset = reset$1;
exports.frame = frame;
/* No side effect */
