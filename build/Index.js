/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/Users/john/projects/reason/reason-gameboy-emulator/build/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./lib/js/src/Index.bs.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./lib/js/src/Cpu.bs.js":
/*!******************************!*\
  !*** ./lib/js/src/Cpu.bs.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE\n\n\nvar Block = __webpack_require__(/*! bs-platform/lib/js/block.js */ \"./node_modules/bs-platform/lib/js/block.js\");\nvar Curry = __webpack_require__(/*! bs-platform/lib/js/curry.js */ \"./node_modules/bs-platform/lib/js/curry.js\");\nvar Printf = __webpack_require__(/*! bs-platform/lib/js/printf.js */ \"./node_modules/bs-platform/lib/js/printf.js\");\nvar Pervasives = __webpack_require__(/*! bs-platform/lib/js/pervasives.js */ \"./node_modules/bs-platform/lib/js/pervasives.js\");\nvar Belt_Option = __webpack_require__(/*! bs-platform/lib/js/belt_Option.js */ \"./node_modules/bs-platform/lib/js/belt_Option.js\");\nvar Caml_option = __webpack_require__(/*! bs-platform/lib/js/caml_option.js */ \"./node_modules/bs-platform/lib/js/caml_option.js\");\nvar Caml_exceptions = __webpack_require__(/*! bs-platform/lib/js/caml_exceptions.js */ \"./node_modules/bs-platform/lib/js/caml_exceptions.js\");\nvar Mmu$GameboyEmulator = __webpack_require__(/*! ./Mmu.bs.js */ \"./lib/js/src/Mmu.bs.js\");\n\nvar AssertionException = Caml_exceptions.create(\"Cpu-GameboyEmulator.AssertionException\");\n\nfunction flagOffset(flag) {\n  switch (flag) {\n    case 0 : \n        return 7;\n    case 1 : \n        return 6;\n    case 2 : \n        return 5;\n    case 3 : \n        return 4;\n    \n  }\n}\n\nfunction setFlag(flag, value, flags) {\n  var bit = (1 << flagOffset(flag));\n  if (value !== 0) {\n    return flags | bit;\n  } else {\n    return flags & Pervasives.lnot(bit);\n  }\n}\n\nvar Flags = /* module */[\n  /* z */7,\n  /* n */6,\n  /* h */5,\n  /* c */4,\n  /* flagOffset */flagOffset,\n  /* setFlag */setFlag\n];\n\nvar UnhandledInstruction = Caml_exceptions.create(\"Cpu-GameboyEmulator.UnhandledInstruction\");\n\nfunction make(param) {\n  return /* record */[\n          /* clock */0,\n          /* registers : record */[\n            /* a */0,\n            /* b */0,\n            /* c */0,\n            /* d */0,\n            /* e */0,\n            /* h */0,\n            /* l */0,\n            /* f */0,\n            /* sp */0,\n            /* pc */0,\n            /* mCycles */0\n          ]\n        ];\n}\n\nfunction b2i(bool) {\n  if (bool) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\nfunction programCount(cpu) {\n  return cpu[/* registers */1][/* pc */9];\n}\n\nfunction readRegister16(register, param) {\n  var match = param[/* registers */1];\n  var a = match[/* a */0];\n  var b = match[/* b */1];\n  var c = match[/* c */2];\n  var d = match[/* d */3];\n  var e = match[/* e */4];\n  var h = match[/* h */5];\n  var l = match[/* l */6];\n  var f = match[/* f */7];\n  var match$1;\n  switch (register) {\n    case 0 : \n        match$1 = /* tuple */[\n          a,\n          f\n        ];\n        break;\n    case 1 : \n        match$1 = /* tuple */[\n          b,\n          c\n        ];\n        break;\n    case 2 : \n        match$1 = /* tuple */[\n          d,\n          e\n        ];\n        break;\n    case 3 : \n        match$1 = /* tuple */[\n          h,\n          l\n        ];\n        break;\n    \n  }\n  return match$1[1] + (match$1[0] << 8) | 0;\n}\n\nfunction rAf(param) {\n  return readRegister16(/* AF */0, param);\n}\n\nfunction rBc(param) {\n  return readRegister16(/* BC */1, param);\n}\n\nfunction rDe(param) {\n  return readRegister16(/* DE */2, param);\n}\n\nfunction rHl(param) {\n  return readRegister16(/* HL */3, param);\n}\n\nfunction incrementPc(cycles, cpu) {\n  cpu[/* registers */1][/* pc */9] = cpu[/* registers */1][/* pc */9] + cycles | 0;\n  return cpu;\n}\n\nfunction incrementSp(cpu) {\n  cpu[/* registers */1][/* sp */8] = cpu[/* registers */1][/* sp */8] + 1 & 65535;\n  return cpu;\n}\n\nfunction decrementSp(cpu) {\n  cpu[/* registers */1][/* sp */8] = cpu[/* registers */1][/* sp */8] - 1 & 65535;\n  return cpu;\n}\n\nfunction getFlag(flag, cpu) {\n  var bit = (1 << flagOffset(flag));\n  return cpu[/* registers */1][/* f */7] & bit;\n}\n\nfunction setFlag$1(flag, value, initialValue, cpu) {\n  cpu[/* registers */1][/* f */7] = setFlag(flag, value, Belt_Option.getWithDefault(initialValue, cpu[/* registers */1][/* f */7]));\n  return cpu;\n}\n\nfunction checkRegister(register) {\n  if (register > 255) {\n    throw [\n          AssertionException,\n          String(register)\n        ];\n  } else {\n    return 0;\n  }\n}\n\nfunction setRegisters(a, b, c, d, e, h, l, cpu) {\n  var registers = cpu[/* registers */1];\n  registers[/* a */0] = Belt_Option.getWithDefault(a, registers[/* a */0]);\n  registers[/* b */1] = Belt_Option.getWithDefault(b, registers[/* b */1]);\n  registers[/* c */2] = Belt_Option.getWithDefault(c, registers[/* c */2]);\n  registers[/* d */3] = Belt_Option.getWithDefault(d, registers[/* d */3]);\n  registers[/* e */4] = Belt_Option.getWithDefault(e, registers[/* e */4]);\n  registers[/* h */5] = Belt_Option.getWithDefault(h, registers[/* h */5]);\n  registers[/* l */6] = Belt_Option.getWithDefault(l, registers[/* l */6]);\n  checkRegister(registers[/* a */0]);\n  checkRegister(registers[/* b */1]);\n  checkRegister(registers[/* c */2]);\n  checkRegister(registers[/* d */3]);\n  checkRegister(registers[/* e */4]);\n  checkRegister(registers[/* h */5]);\n  checkRegister(registers[/* l */6]);\n  return cpu;\n}\n\nfunction machineCycles(cycles, cpu) {\n  cpu[/* registers */1][/* mCycles */10] = cycles;\n  return cpu;\n}\n\nfunction cycles(cycles$1, cpu) {\n  return machineCycles(cycles$1 / 4 | 0, cpu);\n}\n\nfunction newState(cpu, mmu, gpu, old) {\n  return /* record */[\n          /* cpu */Belt_Option.getWithDefault(cpu, old[/* cpu */0]),\n          /* mmu */Belt_Option.getWithDefault(mmu, old[/* mmu */1]),\n          /* gpu */Belt_Option.getWithDefault(gpu, old[/* gpu */2])\n        ];\n}\n\nfunction nop(s) {\n  var partial_arg = machineCycles(1, s[/* cpu */0]);\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction ld_bc_nn(s) {\n  var gpu = s[/* gpu */2];\n  var cpu = s[/* cpu */0];\n  var pc = cpu[/* registers */1][/* pc */9];\n  var match = Mmu$GameboyEmulator.read8(pc, /* record */[\n        /* gpu */gpu,\n        /* mmu */s[/* mmu */1]\n      ]);\n  var match$1 = Mmu$GameboyEmulator.read8(pc + 1 | 0, /* record */[\n        /* gpu */gpu,\n        /* mmu */match[1]\n      ]);\n  var partial_arg = Caml_option.some(match$1[1]);\n  var arg = match$1[0];\n  var arg$1 = match[0];\n  var partial_arg$1 = incrementPc(2, machineCycles(3, (function (param) {\n                  return (function (param$1, param$2, param$3, param$4, param$5) {\n                      return setRegisters(param, arg, arg$1, param$1, param$2, param$3, param$4, param$5);\n                    });\n                })(undefined)(undefined, undefined, undefined, undefined, cpu)));\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = eta;\n              return newState(partial_arg$1, partial_arg, param, param$1);\n            })(s);\n}\n\nfunction ld_m_bc_a(s) {\n  var cpu = s[/* cpu */0];\n  var match = cpu[/* registers */1];\n  var a = match[/* a */0];\n  var match$1 = Mmu$GameboyEmulator.write8(rBc(cpu), a, /* record */[\n        /* gpu */s[/* gpu */2],\n        /* mmu */s[/* mmu */1]\n      ]);\n  return newState(machineCycles(2, cpu), Caml_option.some(match$1[0]), match$1[1], s);\n}\n\nfunction inc_bc(s) {\n  var cpu = s[/* cpu */0];\n  var c = cpu[/* registers */1][/* c */2] + 1 & 255;\n  var b = c === 0 ? cpu[/* registers */1][/* b */1] + 1 & 255 : cpu[/* registers */1][/* b */1];\n  var arg = b;\n  var arg$1 = c;\n  var partial_arg = machineCycles(2, (function (param) {\n              return (function (param$1, param$2, param$3, param$4, param$5) {\n                  return setRegisters(param, arg, arg$1, param$1, param$2, param$3, param$4, param$5);\n                });\n            })(undefined)(undefined, undefined, undefined, undefined, cpu));\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction inc_de(s) {\n  var cpu = s[/* cpu */0];\n  var e = cpu[/* registers */1][/* e */4] + 1 & 255;\n  var d = e === 0 ? cpu[/* registers */1][/* d */3] + 1 & 255 : cpu[/* registers */1][/* d */3];\n  var arg = d;\n  var arg$1 = e;\n  var partial_arg = machineCycles(2, (function (param, param$1, param$2) {\n              return (function (param$3, param$4, param$5) {\n                  return setRegisters(param, param$1, param$2, arg, arg$1, param$3, param$4, param$5);\n                });\n            })(undefined, undefined, undefined)(undefined, undefined, cpu));\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction inc_hl(s) {\n  var cpu = s[/* cpu */0];\n  var l = cpu[/* registers */1][/* l */6] + 1 & 255;\n  var h = l === 0 ? cpu[/* registers */1][/* h */5] + 1 & 255 : cpu[/* registers */1][/* h */5];\n  var arg = h;\n  var arg$1 = l;\n  var partial_arg = machineCycles(2, (function (param, param$1, param$2, param$3, param$4) {\n              return (function (param$5) {\n                  return setRegisters(param, param$1, param$2, param$3, param$4, arg, arg$1, param$5);\n                });\n            })(undefined, undefined, undefined, undefined, undefined)(cpu));\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction inc_sp(s) {\n  var partial_arg = machineCycles(2, incrementSp(s[/* cpu */0]));\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction inc(register, cpu) {\n  var r = register + 1 & 255;\n  var f = cpu[/* registers */1][/* f */7] & 16;\n  return /* tuple */[\n          r,\n          machineCycles(1, (function (eta) {\n                    var param = undefined;\n                    var param$1 = eta;\n                    return setFlag$1(/* N */1, 0, param, param$1);\n                  })(setFlag$1(/* Z */0, r === 0 ? 1 : 0, f, cpu)))\n        ];\n}\n\nfunction inc_a(s) {\n  var cpu = s[/* cpu */0];\n  var match = inc(cpu[/* registers */1][/* a */0], cpu);\n  var partial_arg = match[0];\n  var partial_arg$1 = (function (eta) {\n        var param = undefined;\n        var param$1 = undefined;\n        var param$2 = undefined;\n        var param$3 = undefined;\n        var param$4 = undefined;\n        var param$5 = undefined;\n        var param$6 = eta;\n        return setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6);\n      })(match[1]);\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg$1, param, param$1, param$2);\n            })(s);\n}\n\nfunction inc_b(s) {\n  var cpu = s[/* cpu */0];\n  var match = inc(cpu[/* registers */1][/* b */1], cpu);\n  var arg = match[0];\n  var partial_arg = (function (param) {\n          return (function (param$1, param$2, param$3, param$4, param$5, param$6) {\n              return setRegisters(param, arg, param$1, param$2, param$3, param$4, param$5, param$6);\n            });\n        })(undefined)(undefined, undefined, undefined, undefined, undefined, match[1]);\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction inc_c(s) {\n  var cpu = s[/* cpu */0];\n  var match = inc(cpu[/* registers */1][/* c */2], cpu);\n  var arg = match[0];\n  var partial_arg = (function (param, param$1) {\n          return (function (param$2, param$3, param$4, param$5, param$6) {\n              return setRegisters(param, param$1, arg, param$2, param$3, param$4, param$5, param$6);\n            });\n        })(undefined, undefined)(undefined, undefined, undefined, undefined, match[1]);\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction inc_d(s) {\n  var cpu = s[/* cpu */0];\n  var match = inc(cpu[/* registers */1][/* d */3], cpu);\n  var arg = match[0];\n  var partial_arg = (function (param, param$1, param$2) {\n          return (function (param$3, param$4, param$5, param$6) {\n              return setRegisters(param, param$1, param$2, arg, param$3, param$4, param$5, param$6);\n            });\n        })(undefined, undefined, undefined)(undefined, undefined, undefined, match[1]);\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction inc_e(s) {\n  var cpu = s[/* cpu */0];\n  var match = inc(cpu[/* registers */1][/* e */4], cpu);\n  var arg = match[0];\n  var partial_arg = (function (param, param$1, param$2, param$3) {\n          return (function (param$4, param$5, param$6) {\n              return setRegisters(param, param$1, param$2, param$3, arg, param$4, param$5, param$6);\n            });\n        })(undefined, undefined, undefined, undefined)(undefined, undefined, match[1]);\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction inc_h(s) {\n  var cpu = s[/* cpu */0];\n  var match = inc(cpu[/* registers */1][/* h */5], cpu);\n  var arg = match[0];\n  var partial_arg = (function (param, param$1, param$2, param$3, param$4) {\n          return (function (param$5, param$6) {\n              return setRegisters(param, param$1, param$2, param$3, param$4, arg, param$5, param$6);\n            });\n        })(undefined, undefined, undefined, undefined, undefined)(undefined, match[1]);\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction inc_l(s) {\n  var cpu = s[/* cpu */0];\n  var match = inc(cpu[/* registers */1][/* l */6], cpu);\n  var arg = match[0];\n  var partial_arg = (function (param, param$1, param$2, param$3, param$4, param$5) {\n          return (function (param$6) {\n              return setRegisters(param, param$1, param$2, param$3, param$4, param$5, arg, param$6);\n            });\n        })(undefined, undefined, undefined, undefined, undefined, undefined)(match[1]);\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction dec(register, $staropt$star, cpu) {\n  var cycles = $staropt$star !== undefined ? $staropt$star : 1;\n  var r = register - 1 & 255;\n  var f = cpu[/* registers */1][/* f */7] & 16;\n  return /* tuple */[\n          r,\n          machineCycles(cycles, (function (eta) {\n                    var param = undefined;\n                    var param$1 = eta;\n                    return setFlag$1(/* N */1, 1, param, param$1);\n                  })(setFlag$1(/* Z */0, r === 0 ? 1 : 0, f, cpu)))\n        ];\n}\n\nfunction dec_a(s) {\n  var cpu = s[/* cpu */0];\n  var match = dec(cpu[/* registers */1][/* a */0], undefined, cpu);\n  var partial_arg = match[0];\n  var partial_arg$1 = (function (eta) {\n        var param = undefined;\n        var param$1 = undefined;\n        var param$2 = undefined;\n        var param$3 = undefined;\n        var param$4 = undefined;\n        var param$5 = undefined;\n        var param$6 = eta;\n        return setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6);\n      })(match[1]);\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg$1, param, param$1, param$2);\n            })(s);\n}\n\nfunction dec_b(s) {\n  var cpu = s[/* cpu */0];\n  var match = dec(cpu[/* registers */1][/* b */1], undefined, cpu);\n  var arg = match[0];\n  var partial_arg = (function (param) {\n          return (function (param$1, param$2, param$3, param$4, param$5, param$6) {\n              return setRegisters(param, arg, param$1, param$2, param$3, param$4, param$5, param$6);\n            });\n        })(undefined)(undefined, undefined, undefined, undefined, undefined, match[1]);\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction dec_c(s) {\n  var cpu = s[/* cpu */0];\n  var match = dec(cpu[/* registers */1][/* c */2], undefined, cpu);\n  var arg = match[0];\n  var partial_arg = (function (param, param$1) {\n          return (function (param$2, param$3, param$4, param$5, param$6) {\n              return setRegisters(param, param$1, arg, param$2, param$3, param$4, param$5, param$6);\n            });\n        })(undefined, undefined)(undefined, undefined, undefined, undefined, match[1]);\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction dec_d(s) {\n  var cpu = s[/* cpu */0];\n  var match = dec(cpu[/* registers */1][/* d */3], undefined, cpu);\n  var arg = match[0];\n  var partial_arg = (function (param, param$1, param$2) {\n          return (function (param$3, param$4, param$5, param$6) {\n              return setRegisters(param, param$1, param$2, arg, param$3, param$4, param$5, param$6);\n            });\n        })(undefined, undefined, undefined)(undefined, undefined, undefined, match[1]);\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction dec_e(s) {\n  var cpu = s[/* cpu */0];\n  var match = dec(cpu[/* registers */1][/* e */4], undefined, cpu);\n  var arg = match[0];\n  var partial_arg = (function (param, param$1, param$2, param$3) {\n          return (function (param$4, param$5, param$6) {\n              return setRegisters(param, param$1, param$2, param$3, arg, param$4, param$5, param$6);\n            });\n        })(undefined, undefined, undefined, undefined)(undefined, undefined, match[1]);\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction dec_h(s) {\n  var cpu = s[/* cpu */0];\n  var match = dec(cpu[/* registers */1][/* h */5], undefined, cpu);\n  var arg = match[0];\n  var partial_arg = (function (param, param$1, param$2, param$3, param$4) {\n          return (function (param$5, param$6) {\n              return setRegisters(param, param$1, param$2, param$3, param$4, arg, param$5, param$6);\n            });\n        })(undefined, undefined, undefined, undefined, undefined)(undefined, match[1]);\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction dec_l(s) {\n  var cpu = s[/* cpu */0];\n  var match = dec(cpu[/* registers */1][/* l */6], undefined, cpu);\n  var arg = match[0];\n  var partial_arg = (function (param, param$1, param$2, param$3, param$4, param$5) {\n          return (function (param$6) {\n              return setRegisters(param, param$1, param$2, param$3, param$4, param$5, arg, param$6);\n            });\n        })(undefined, undefined, undefined, undefined, undefined, undefined)(match[1]);\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction dec_m_hl(s) {\n  var gpu = s[/* gpu */2];\n  var mmu = s[/* mmu */1];\n  var cpu = s[/* cpu */0];\n  var addr = rHl(cpu);\n  var match = Mmu$GameboyEmulator.read8(addr, /* record */[\n        /* gpu */gpu,\n        /* mmu */mmu\n      ]);\n  var match$1 = dec(match[0], 3, cpu);\n  var match$2 = Mmu$GameboyEmulator.write8(addr, match$1[0], /* record */[\n        /* gpu */gpu,\n        /* mmu */mmu\n      ]);\n  return newState(match$1[1], Caml_option.some(match$2[0]), match$2[1], s);\n}\n\nfunction ld_b_n(s) {\n  var cpu = s[/* cpu */0];\n  var pc = cpu[/* registers */1][/* pc */9];\n  var match = Mmu$GameboyEmulator.read8(pc, /* record */[\n        /* gpu */s[/* gpu */2],\n        /* mmu */s[/* mmu */1]\n      ]);\n  var partial_arg = Caml_option.some(match[1]);\n  var arg = match[0];\n  var partial_arg$1 = incrementPc(1, machineCycles(2, (function (param) {\n                  return (function (param$1, param$2, param$3, param$4, param$5, param$6) {\n                      return setRegisters(param, arg, param$1, param$2, param$3, param$4, param$5, param$6);\n                    });\n                })(undefined)(undefined, undefined, undefined, undefined, undefined, cpu)));\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = eta;\n              return newState(partial_arg$1, partial_arg, param, param$1);\n            })(s);\n}\n\nfunction ld_m_nn_sp(s) {\n  var gpu = s[/* gpu */2];\n  var cpu = s[/* cpu */0];\n  var pc = cpu[/* registers */1][/* pc */9];\n  var match = Mmu$GameboyEmulator.read16(pc, /* record */[\n        /* gpu */gpu,\n        /* mmu */s[/* mmu */1]\n      ]);\n  var match$1 = Mmu$GameboyEmulator.write16(match[0], cpu[/* registers */1][/* sp */8], /* record */[\n        /* gpu */gpu,\n        /* mmu */match[1]\n      ]);\n  return newState(incrementPc(2, cycles(20, cpu)), Caml_option.some(match$1[0]), match$1[1], s);\n}\n\nfunction add_hl_bc(s) {\n  var cpu = s[/* cpu */0];\n  var hl = rHl(cpu) + rBc(cpu) | 0;\n  var h = (hl >>> 8) & 255;\n  var l = hl & 255;\n  var carry = hl > 65535;\n  var partial_arg = carry ? 1 : 0;\n  var arg = h;\n  var arg$1 = l;\n  var partial_arg$1 = machineCycles(2, (function (eta) {\n            var param = undefined;\n            var param$1 = eta;\n            return setFlag$1(/* C */3, partial_arg, param, param$1);\n          })((function (param, param$1, param$2, param$3, param$4) {\n                  return (function (param$5) {\n                      return setRegisters(param, param$1, param$2, param$3, param$4, arg, arg$1, param$5);\n                    });\n                })(undefined, undefined, undefined, undefined, undefined)(cpu)));\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg$1, param, param$1, param$2);\n            })(s);\n}\n\nfunction ld_a_m_bc(s) {\n  var cpu = s[/* cpu */0];\n  var match = Mmu$GameboyEmulator.read8(rBc(cpu), /* record */[\n        /* gpu */s[/* gpu */2],\n        /* mmu */s[/* mmu */1]\n      ]);\n  var partial_arg = Caml_option.some(match[1]);\n  var partial_arg$1 = match[0];\n  var partial_arg$2 = machineCycles(2, (function (eta) {\n            var param = undefined;\n            var param$1 = undefined;\n            var param$2 = undefined;\n            var param$3 = undefined;\n            var param$4 = undefined;\n            var param$5 = undefined;\n            var param$6 = eta;\n            return setRegisters(partial_arg$1, param, param$1, param$2, param$3, param$4, param$5, param$6);\n          })(cpu));\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = eta;\n              return newState(partial_arg$2, partial_arg, param, param$1);\n            })(s);\n}\n\nfunction dec_bc(s) {\n  var cpu = s[/* cpu */0];\n  var c = cpu[/* registers */1][/* c */2] - 1 & 255;\n  var b = c === 255 ? cpu[/* registers */1][/* b */1] - 1 & 255 : cpu[/* registers */1][/* b */1];\n  var arg = b;\n  var arg$1 = c;\n  var partial_arg = machineCycles(2, (function (param) {\n              return (function (param$1, param$2, param$3, param$4, param$5) {\n                  return setRegisters(param, arg, arg$1, param$1, param$2, param$3, param$4, param$5);\n                });\n            })(undefined)(undefined, undefined, undefined, undefined, cpu));\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction dec_de(s) {\n  var cpu = s[/* cpu */0];\n  var e = cpu[/* registers */1][/* e */4] - 1 & 255;\n  var d = e === 255 ? cpu[/* registers */1][/* d */3] - 1 & 255 : cpu[/* registers */1][/* d */3];\n  var arg = d;\n  var arg$1 = e;\n  var partial_arg = machineCycles(2, (function (param, param$1, param$2) {\n              return (function (param$3, param$4, param$5) {\n                  return setRegisters(param, param$1, param$2, arg, arg$1, param$3, param$4, param$5);\n                });\n            })(undefined, undefined, undefined)(undefined, undefined, cpu));\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction dec_hl(s) {\n  var cpu = s[/* cpu */0];\n  var l = cpu[/* registers */1][/* l */6] - 1 & 255;\n  var h = l === 255 ? cpu[/* registers */1][/* h */5] - 1 & 255 : cpu[/* registers */1][/* h */5];\n  var arg = h;\n  var arg$1 = l;\n  var partial_arg = machineCycles(2, (function (param, param$1, param$2, param$3, param$4) {\n              return (function (param$5) {\n                  return setRegisters(param, param$1, param$2, param$3, param$4, arg, arg$1, param$5);\n                });\n            })(undefined, undefined, undefined, undefined, undefined)(cpu));\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction dec_sp(s) {\n  var partial_arg = machineCycles(2, decrementSp(s[/* cpu */0]));\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction rlca(s) {\n  var cpu = s[/* cpu */0];\n  var match = cpu[/* registers */1];\n  var a = match[/* a */0];\n  var match$1 = (a & 128) > 0;\n  var highBit = match$1 ? 1 : 0;\n  var a$prime = (a << 1) + highBit & 255;\n  var partial_arg = a$prime;\n  var partial_arg$1 = (function (eta) {\n        var param = undefined;\n        var param$1 = eta;\n        return setFlag$1(/* C */3, highBit, param, param$1);\n      })((function (eta) {\n            var param = undefined;\n            var param$1 = undefined;\n            var param$2 = undefined;\n            var param$3 = undefined;\n            var param$4 = undefined;\n            var param$5 = undefined;\n            var param$6 = eta;\n            return setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6);\n          })(machineCycles(1, cpu)));\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg$1, param, param$1, param$2);\n            })(s);\n}\n\nfunction rrca(s) {\n  var partial_arg = machineCycles(1, s[/* cpu */0]);\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction rla(s) {\n  var partial_arg = machineCycles(1, s[/* cpu */0]);\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction rra(s) {\n  var partial_arg = machineCycles(1, s[/* cpu */0]);\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction or_(register, $staropt$star, cpu) {\n  var cycles = $staropt$star !== undefined ? $staropt$star : 1;\n  var r = (cpu[/* registers */1][/* a */0] | register) & 255;\n  return /* tuple */[\n          r,\n          machineCycles(cycles, setFlag$1(/* Z */0, r === 0 ? 1 : 0, 0, cpu))\n        ];\n}\n\nfunction or_a(s) {\n  var cpu = s[/* cpu */0];\n  var match = or_(cpu[/* registers */1][/* a */0], undefined, cpu);\n  var partial_arg = match[0];\n  var partial_arg$1 = (function (eta) {\n        var param = undefined;\n        var param$1 = undefined;\n        var param$2 = undefined;\n        var param$3 = undefined;\n        var param$4 = undefined;\n        var param$5 = undefined;\n        var param$6 = eta;\n        return setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6);\n      })(match[1]);\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg$1, param, param$1, param$2);\n            })(s);\n}\n\nfunction or_b(s) {\n  var cpu = s[/* cpu */0];\n  var match = or_(cpu[/* registers */1][/* b */1], undefined, cpu);\n  var arg = match[0];\n  var partial_arg = (function (param) {\n          return (function (param$1, param$2, param$3, param$4, param$5, param$6) {\n              return setRegisters(param, arg, param$1, param$2, param$3, param$4, param$5, param$6);\n            });\n        })(undefined)(undefined, undefined, undefined, undefined, undefined, match[1]);\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction or_c(s) {\n  var cpu = s[/* cpu */0];\n  var match = or_(cpu[/* registers */1][/* c */2], undefined, cpu);\n  var arg = match[0];\n  var partial_arg = (function (param, param$1) {\n          return (function (param$2, param$3, param$4, param$5, param$6) {\n              return setRegisters(param, param$1, arg, param$2, param$3, param$4, param$5, param$6);\n            });\n        })(undefined, undefined)(undefined, undefined, undefined, undefined, match[1]);\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction or_d(s) {\n  var cpu = s[/* cpu */0];\n  var match = or_(cpu[/* registers */1][/* d */3], undefined, cpu);\n  var arg = match[0];\n  var partial_arg = (function (param, param$1, param$2) {\n          return (function (param$3, param$4, param$5, param$6) {\n              return setRegisters(param, param$1, param$2, arg, param$3, param$4, param$5, param$6);\n            });\n        })(undefined, undefined, undefined)(undefined, undefined, undefined, match[1]);\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction or_e(s) {\n  var cpu = s[/* cpu */0];\n  var match = or_(cpu[/* registers */1][/* e */4], undefined, cpu);\n  var arg = match[0];\n  var partial_arg = (function (param, param$1, param$2, param$3) {\n          return (function (param$4, param$5, param$6) {\n              return setRegisters(param, param$1, param$2, param$3, arg, param$4, param$5, param$6);\n            });\n        })(undefined, undefined, undefined, undefined)(undefined, undefined, match[1]);\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction or_h(s) {\n  var cpu = s[/* cpu */0];\n  var match = or_(cpu[/* registers */1][/* h */5], undefined, cpu);\n  var arg = match[0];\n  var partial_arg = (function (param, param$1, param$2, param$3, param$4) {\n          return (function (param$5, param$6) {\n              return setRegisters(param, param$1, param$2, param$3, param$4, arg, param$5, param$6);\n            });\n        })(undefined, undefined, undefined, undefined, undefined)(undefined, match[1]);\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction or_l(s) {\n  var cpu = s[/* cpu */0];\n  var match = or_(cpu[/* registers */1][/* l */6], undefined, cpu);\n  var arg = match[0];\n  var partial_arg = (function (param, param$1, param$2, param$3, param$4, param$5) {\n          return (function (param$6) {\n              return setRegisters(param, param$1, param$2, param$3, param$4, param$5, arg, param$6);\n            });\n        })(undefined, undefined, undefined, undefined, undefined, undefined)(match[1]);\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nfunction or_m_hl(s) {\n  var cpu = s[/* cpu */0];\n  var match = Mmu$GameboyEmulator.read8(rHl(cpu), /* record */[\n        /* gpu */s[/* gpu */2],\n        /* mmu */s[/* mmu */1]\n      ]);\n  var match$1 = or_(match[0], 2, cpu);\n  var arg = match$1[0];\n  var partial_arg = (function (param, param$1, param$2, param$3, param$4, param$5) {\n          return (function (param$6) {\n              return setRegisters(param, param$1, param$2, param$3, param$4, param$5, arg, param$6);\n            });\n        })(undefined, undefined, undefined, undefined, undefined, undefined)(match$1[1]);\n  return (function (eta) {\n              var param = undefined;\n              var param$1 = undefined;\n              var param$2 = eta;\n              return newState(partial_arg, param, param$1, param$2);\n            })(s);\n}\n\nvar Ops = /* module */[\n  /* newState */newState,\n  /* nop */nop,\n  /* ld_bc_nn */ld_bc_nn,\n  /* ld_m_bc_a */ld_m_bc_a,\n  /* inc_bc */inc_bc,\n  /* inc_de */inc_de,\n  /* inc_hl */inc_hl,\n  /* inc_sp */inc_sp,\n  /* inc */inc,\n  /* inc_a */inc_a,\n  /* inc_b */inc_b,\n  /* inc_c */inc_c,\n  /* inc_d */inc_d,\n  /* inc_e */inc_e,\n  /* inc_h */inc_h,\n  /* inc_l */inc_l,\n  /* dec */dec,\n  /* dec_a */dec_a,\n  /* dec_b */dec_b,\n  /* dec_c */dec_c,\n  /* dec_d */dec_d,\n  /* dec_e */dec_e,\n  /* dec_h */dec_h,\n  /* dec_l */dec_l,\n  /* dec_m_hl */dec_m_hl,\n  /* ld_b_n */ld_b_n,\n  /* ld_m_nn_sp */ld_m_nn_sp,\n  /* add_hl_bc */add_hl_bc,\n  /* ld_a_m_bc */ld_a_m_bc,\n  /* dec_bc */dec_bc,\n  /* dec_de */dec_de,\n  /* dec_hl */dec_hl,\n  /* dec_sp */dec_sp,\n  /* rlca */rlca,\n  /* rrca */rrca,\n  /* rla */rla,\n  /* rra */rra,\n  /* or_ */or_,\n  /* or_a */or_a,\n  /* or_b */or_b,\n  /* or_c */or_c,\n  /* or_d */or_d,\n  /* or_e */or_e,\n  /* or_h */or_h,\n  /* or_l */or_l,\n  /* or_m_hl */or_m_hl\n];\n\nfunction exec(instruction) {\n  var switcher = instruction - 62 | 0;\n  if (switcher > 193 || switcher < 0) {\n    var switcher$1 = switcher + 62 | 0;\n    if (switcher$1 > 255 || switcher$1 < 0) {\n      throw [\n            UnhandledInstruction,\n            Curry._1(Printf.sprintf(/* Format */[\n                      /* String_literal */Block.__(11, [\n                          \"Unhandled instruction, \",\n                          /* Int */Block.__(4, [\n                              /* Int_Cx */7,\n                              /* Lit_padding */Block.__(0, [\n                                  /* Right */1,\n                                  2\n                                ]),\n                              /* No_precision */0,\n                              /* End_of_format */0\n                            ])\n                        ]),\n                      \"Unhandled instruction, %#2x\"\n                    ]), instruction)\n          ];\n    } else {\n      switch (switcher$1) {\n        case 1 : \n            return ld_bc_nn;\n        case 2 : \n            return ld_m_bc_a;\n        case 3 : \n            return inc_bc;\n        case 4 : \n            return inc_b;\n        case 5 : \n            return dec_b;\n        case 6 : \n            return ld_b_n;\n        case 7 : \n            return rlca;\n        case 8 : \n            return ld_m_nn_sp;\n        case 9 : \n            return add_hl_bc;\n        case 10 : \n            return ld_a_m_bc;\n        case 11 : \n            return dec_bc;\n        case 12 : \n            return inc_c;\n        case 13 : \n            return dec_c;\n        case 15 : \n            return rrca;\n        case 19 : \n            return inc_de;\n        case 20 : \n            return inc_d;\n        case 21 : \n            return dec_d;\n        case 23 : \n            return rla;\n        case 27 : \n            return dec_de;\n        case 28 : \n            return inc_e;\n        case 29 : \n            return dec_e;\n        case 31 : \n            return rra;\n        case 35 : \n            return inc_hl;\n        case 36 : \n            return inc_h;\n        case 37 : \n            return dec_h;\n        case 43 : \n            return dec_hl;\n        case 44 : \n            return inc_l;\n        case 45 : \n            return dec_l;\n        case 51 : \n            return inc_sp;\n        case 53 : \n            return dec_m_hl;\n        case 0 : \n        case 14 : \n        case 16 : \n        case 17 : \n        case 18 : \n        case 22 : \n        case 24 : \n        case 25 : \n        case 26 : \n        case 30 : \n        case 32 : \n        case 33 : \n        case 34 : \n        case 38 : \n        case 39 : \n        case 40 : \n        case 41 : \n        case 42 : \n        case 46 : \n        case 47 : \n        case 48 : \n        case 49 : \n        case 50 : \n        case 52 : \n        case 54 : \n        case 55 : \n        case 56 : \n        case 57 : \n        case 58 : \n            return nop;\n        case 59 : \n            return dec_sp;\n        case 60 : \n            return inc_a;\n        case 61 : \n            return dec_a;\n        \n      }\n    }\n  } else {\n    switch (switcher) {\n      case 114 : \n          return or_b;\n      case 115 : \n          return or_c;\n      case 116 : \n          return or_d;\n      case 117 : \n          return or_e;\n      case 118 : \n          return or_h;\n      case 119 : \n          return or_l;\n      case 120 : \n          return nop;\n      case 121 : \n          return or_a;\n      default:\n        return nop;\n    }\n  }\n}\n\nexports.AssertionException = AssertionException;\nexports.Flags = Flags;\nexports.UnhandledInstruction = UnhandledInstruction;\nexports.make = make;\nexports.b2i = b2i;\nexports.programCount = programCount;\nexports.readRegister16 = readRegister16;\nexports.rAf = rAf;\nexports.rBc = rBc;\nexports.rDe = rDe;\nexports.rHl = rHl;\nexports.incrementPc = incrementPc;\nexports.incrementSp = incrementSp;\nexports.decrementSp = decrementSp;\nexports.getFlag = getFlag;\nexports.setFlag = setFlag$1;\nexports.checkRegister = checkRegister;\nexports.setRegisters = setRegisters;\nexports.machineCycles = machineCycles;\nexports.cycles = cycles;\nexports.Ops = Ops;\nexports.exec = exec;\n/* Mmu-GameboyEmulator Not a pure module */\n\n\n//# sourceURL=webpack:///./lib/js/src/Cpu.bs.js?");

/***/ }),

/***/ "./lib/js/src/Emulator.bs.js":
/*!***********************************!*\
  !*** ./lib/js/src/Emulator.bs.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE\n\n\nvar Cpu$GameboyEmulator = __webpack_require__(/*! ./Cpu.bs.js */ \"./lib/js/src/Cpu.bs.js\");\nvar Gpu$GameboyEmulator = __webpack_require__(/*! ./Gpu.bs.js */ \"./lib/js/src/Gpu.bs.js\");\nvar Mmu$GameboyEmulator = __webpack_require__(/*! ./Mmu.bs.js */ \"./lib/js/src/Mmu.bs.js\");\nvar Renderer$GameboyEmulator = __webpack_require__(/*! ./Renderer.bs.js */ \"./lib/js/src/Renderer.bs.js\");\n\nfunction load(bytes) {\n  console.log(\"Loaded, ROM length: \", bytes.length);\n  var mmu = Mmu$GameboyEmulator.load(bytes);\n  return /* record */[\n          /* frameCount */0,\n          /* fps */0,\n          /* gpu */Gpu$GameboyEmulator.make(/* () */0),\n          /* cpu */Cpu$GameboyEmulator.make(/* () */0),\n          /* mmu */mmu,\n          /* renderer */Renderer$GameboyEmulator.make(/* () */0)\n        ];\n}\n\nfunction reset(state) {\n  return /* record */[\n          /* frameCount */state[/* frameCount */0] + 1 | 0,\n          /* fps */0,\n          /* gpu */Gpu$GameboyEmulator.make(/* () */0),\n          /* cpu */state[/* cpu */3],\n          /* mmu */Mmu$GameboyEmulator.reset(state[/* mmu */4]),\n          /* renderer */state[/* renderer */5]\n        ];\n}\n\nfunction execInstructionsForFrame(s, _currCycles, maxCycles) {\n  while(true) {\n    var currCycles = _currCycles;\n    var programCount = Cpu$GameboyEmulator.programCount(s[/* cpu */3]);\n    var match = Mmu$GameboyEmulator.read8(programCount, /* record */[\n          /* gpu */s[/* gpu */2],\n          /* mmu */s[/* mmu */4]\n        ]);\n    var match$1 = Cpu$GameboyEmulator.exec(match[0])(/* record */[\n          /* cpu */s[/* cpu */3],\n          /* mmu */match[1],\n          /* gpu */s[/* gpu */2]\n        ]);\n    var cpu = match$1[/* cpu */0];\n    var gpu = Gpu$GameboyEmulator.step(cpu[/* registers */1][/* mCycles */10], s[/* renderer */5], s[/* gpu */2]);\n    s[/* gpu */2] = gpu;\n    s[/* mmu */4] = match$1[/* mmu */1];\n    s[/* cpu */3] = cpu;\n    s[/* cpu */3][/* clock */0] = s[/* cpu */3][/* clock */0] + cpu[/* registers */1][/* mCycles */10] | 0;\n    s[/* cpu */3][/* registers */1][/* pc */9] = Cpu$GameboyEmulator.programCount(cpu) + 1 & 65535;\n    if (currCycles >= maxCycles) {\n      return s;\n    } else {\n      _currCycles = currCycles + 1 | 0;\n      continue ;\n    }\n  };\n}\n\nfunction frame(s) {\n  var frameClock = s[/* cpu */3][/* clock */0] + 17556 | 0;\n  return execInstructionsForFrame(s, s[/* cpu */3][/* clock */0], frameClock);\n}\n\nexports.load = load;\nexports.reset = reset;\nexports.execInstructionsForFrame = execInstructionsForFrame;\nexports.frame = frame;\n/* Cpu-GameboyEmulator Not a pure module */\n\n\n//# sourceURL=webpack:///./lib/js/src/Emulator.bs.js?");

/***/ }),

/***/ "./lib/js/src/Gpu.bs.js":
/*!******************************!*\
  !*** ./lib/js/src/Gpu.bs.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE\n\n\nvar $$Array = __webpack_require__(/*! bs-platform/lib/js/array.js */ \"./node_modules/bs-platform/lib/js/array.js\");\nvar Js_option = __webpack_require__(/*! bs-platform/lib/js/js_option.js */ \"./node_modules/bs-platform/lib/js/js_option.js\");\nvar Belt_Array = __webpack_require__(/*! bs-platform/lib/js/belt_Array.js */ \"./node_modules/bs-platform/lib/js/belt_Array.js\");\nvar Belt_Range = __webpack_require__(/*! bs-platform/lib/js/belt_Range.js */ \"./node_modules/bs-platform/lib/js/belt_Range.js\");\nvar Caml_array = __webpack_require__(/*! bs-platform/lib/js/caml_array.js */ \"./node_modules/bs-platform/lib/js/caml_array.js\");\nvar Caml_int32 = __webpack_require__(/*! bs-platform/lib/js/caml_int32.js */ \"./node_modules/bs-platform/lib/js/caml_int32.js\");\nvar Belt_Option = __webpack_require__(/*! bs-platform/lib/js/belt_Option.js */ \"./node_modules/bs-platform/lib/js/belt_Option.js\");\nvar Renderer$GameboyEmulator = __webpack_require__(/*! ./Renderer.bs.js */ \"./lib/js/src/Renderer.bs.js\");\n\nfunction initTileset(param) {\n  return $$Array.init(512, (function (param) {\n                return $$Array.init(8, (function (param) {\n                              return Caml_array.caml_make_vect(8, 0);\n                            }));\n              }));\n}\n\nfunction make(param) {\n  return /* record */[\n          /* bgmap */0,\n          /* bgtile */0,\n          /* clock */0,\n          /* line */0,\n          /* mode : OamRead */2,\n          /* oam */Caml_array.caml_make_vect(160, 0),\n          /* tileset */initTileset(/* () */0),\n          /* vram */Caml_array.caml_make_vect(8192, 0)\n        ];\n}\n\nfunction reset(param) {\n  return /* record */[\n          /* bgmap */0,\n          /* bgtile */0,\n          /* clock */0,\n          /* line */0,\n          /* mode : OamRead */2,\n          /* oam */Caml_array.caml_make_vect(160, 0),\n          /* tileset */initTileset(/* () */0),\n          /* vram */Caml_array.caml_make_vect(8192, 0)\n        ];\n}\n\nfunction updateTile(addr, gpu) {\n  var addr$1 = addr & 8190;\n  var tile = (addr$1 >>> 4) & 511;\n  var y = (addr$1 >>> 1) & 7;\n  Belt_Range.forEach(0, 7, (function (x) {\n          var sx = (1 << (7 - x | 0));\n          var match = (Caml_array.caml_array_get(gpu[/* vram */7], addr$1) & sx) > 0;\n          var b1 = match ? 1 : 0;\n          var match$1 = (Caml_array.caml_array_get(gpu[/* vram */7], addr$1 + 1 | 0) & sx) > 0;\n          var b2 = match$1 ? 2 : 0;\n          Caml_array.caml_array_set(Caml_array.caml_array_get(Caml_array.caml_array_get(gpu[/* tileset */6], tile), y), x, b1 + b2 | 0);\n          return /* () */0;\n        }));\n  return /* () */0;\n}\n\nfunction getTile(index, gpu) {\n  var tile = Belt_Option.getWithDefault(Belt_Array.get(gpu[/* vram */7], index), 0);\n  var match = gpu[/* bgtile */1] === 1 && tile < 128;\n  if (match) {\n    return tile + 256 | 0;\n  } else {\n    return tile;\n  }\n}\n\nfunction step(mCycles, renderer, gpu) {\n  var modeclock = gpu[/* clock */2] + mCycles | 0;\n  var gpu_000 = /* bgmap */gpu[/* bgmap */0];\n  var gpu_001 = /* bgtile */gpu[/* bgtile */1];\n  var gpu_003 = /* line */gpu[/* line */3];\n  var gpu_004 = /* mode */gpu[/* mode */4];\n  var gpu_005 = /* oam */gpu[/* oam */5];\n  var gpu_006 = /* tileset */gpu[/* tileset */6];\n  var gpu_007 = /* vram */gpu[/* vram */7];\n  var gpu$1 = /* record */[\n    gpu_000,\n    gpu_001,\n    /* clock */modeclock,\n    gpu_003,\n    gpu_004,\n    gpu_005,\n    gpu_006,\n    gpu_007\n  ];\n  var match = gpu_004;\n  switch (match) {\n    case 0 : \n        if (modeclock >= 51) {\n          var line = gpu_003 + 1 | 0;\n          if (line === 143) {\n            Renderer$GameboyEmulator.renderToScreen(renderer);\n            return /* record */[\n                    gpu_000,\n                    gpu_001,\n                    /* clock */0,\n                    /* line */line,\n                    /* mode : Vblank */1,\n                    gpu_005,\n                    gpu_006,\n                    gpu_007\n                  ];\n          } else {\n            return /* record */[\n                    gpu_000,\n                    gpu_001,\n                    /* clock */0,\n                    /* line */line,\n                    /* mode : OamRead */2,\n                    gpu_005,\n                    gpu_006,\n                    gpu_007\n                  ];\n          }\n        } else {\n          return gpu$1;\n        }\n    case 1 : \n        if (modeclock >= 114) {\n          var line$1 = gpu_003 + 1 | 0;\n          if (line$1 > 153) {\n            return /* record */[\n                    gpu_000,\n                    gpu_001,\n                    /* clock */0,\n                    /* line */0,\n                    /* mode : OamRead */2,\n                    gpu_005,\n                    gpu_006,\n                    gpu_007\n                  ];\n          } else {\n            return /* record */[\n                    gpu_000,\n                    gpu_001,\n                    /* clock */0,\n                    /* line */line$1,\n                    gpu_004,\n                    gpu_005,\n                    gpu_006,\n                    gpu_007\n                  ];\n          }\n        } else {\n          return gpu$1;\n        }\n    case 2 : \n        if (modeclock >= 20) {\n          return /* record */[\n                  gpu_000,\n                  gpu_001,\n                  /* clock */0,\n                  gpu_003,\n                  /* mode : VramRead */3,\n                  gpu_005,\n                  gpu_006,\n                  gpu_007\n                ];\n        } else {\n          return gpu$1;\n        }\n    case 3 : \n        if (modeclock >= 43) {\n          var renderer$1 = renderer;\n          var gpu$2 = /* record */[\n            gpu_000,\n            gpu_001,\n            /* clock */0,\n            gpu_003,\n            /* mode : Hblank */0,\n            gpu_005,\n            gpu_006,\n            gpu_007\n          ];\n          var palette = /* array */[\n            250,\n            192,\n            96,\n            0\n          ];\n          var match$1 = gpu$2[/* bgmap */0] === 1;\n          var mapoffs = match$1 ? 7168 : 6144;\n          var mapoffs$1 = mapoffs + ((gpu$2[/* line */3] + 0 | 0) >>> 3) | 0;\n          var lineoffs = 0;\n          var y = gpu$2[/* line */3] + 0 & 7;\n          var x = 0;\n          var tile = getTile(mapoffs$1 + lineoffs | 0, gpu$2);\n          var canvasoffs = (Caml_int32.imul(gpu$2[/* line */3], 160) << 2);\n          var setPixels = function (_scrX, _tile, _xc, _cOff, _lOff) {\n            while(true) {\n              var lOff = _lOff;\n              var cOff = _cOff;\n              var xc = _xc;\n              var tile = _tile;\n              var scrX = _scrX;\n              if (scrX !== 160) {\n                Js_option.map((function(cOff){\n                    return function (color) {\n                      Renderer$GameboyEmulator.setPixel(renderer$1, cOff + 0 | 0, color);\n                      Renderer$GameboyEmulator.setPixel(renderer$1, cOff + 1 | 0, color);\n                      Renderer$GameboyEmulator.setPixel(renderer$1, cOff + 2 | 0, color);\n                      return Renderer$GameboyEmulator.setPixel(renderer$1, cOff + 3 | 0, 255);\n                    }\n                    }(cOff)), Js_option.andThen((function (pixel) {\n                            return Belt_Array.get(palette, pixel);\n                          }), Js_option.andThen((function(xc){\n                            return function (tileY) {\n                              return Belt_Array.get(tileY, xc);\n                            }\n                            }(xc)), Js_option.andThen((function (tile$prime) {\n                                    return Belt_Array.get(tile$prime, y);\n                                  }), Belt_Array.get(gpu$2[/* tileset */6], tile)))));\n                var xc$prime = xc + 1 | 0;\n                var match;\n                if (xc$prime === 8) {\n                  var lOff$prime = lOff + 1 & 31;\n                  var tile$prime = getTile(mapoffs$1 + lOff$prime | 0, gpu$2);\n                  match = /* tuple */[\n                    0,\n                    lOff$prime,\n                    tile$prime\n                  ];\n                } else {\n                  match = /* tuple */[\n                    xc$prime,\n                    lOff,\n                    tile\n                  ];\n                }\n                _lOff = match[1];\n                _cOff = cOff + 4 | 0;\n                _xc = match[0];\n                _tile = match[2];\n                _scrX = scrX + 1 | 0;\n                continue ;\n              } else {\n                return /* () */0;\n              }\n            };\n          };\n          setPixels(0, tile, x, canvasoffs, lineoffs);\n          return gpu$2;\n        } else {\n          return gpu$1;\n        }\n    \n  }\n}\n\nfunction read8(_gpu) {\n  return 0;\n}\n\nfunction write8(gpu) {\n  return gpu;\n}\n\nexports.make = make;\nexports.reset = reset;\nexports.updateTile = updateTile;\nexports.step = step;\nexports.read8 = read8;\nexports.write8 = write8;\n/* Renderer-GameboyEmulator Not a pure module */\n\n\n//# sourceURL=webpack:///./lib/js/src/Gpu.bs.js?");

/***/ }),

/***/ "./lib/js/src/Index.bs.js":
/*!********************************!*\
  !*** ./lib/js/src/Index.bs.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE\n\n\nvar Utils$GameboyEmulator = __webpack_require__(/*! ./Utils.bs.js */ \"./lib/js/src/Utils.bs.js\");\nvar Emulator$GameboyEmulator = __webpack_require__(/*! ./Emulator.bs.js */ \"./lib/js/src/Emulator.bs.js\");\n\nvar fpsNum = document.querySelector(\"#fps-num\");\n\nfunction loop(prevFrame, state) {\n  var newState = Emulator$GameboyEmulator.frame(state);\n  var time = Date.now();\n  var time_ = time * (1.0 - 0.97) + prevFrame * 0.97;\n  var diff = time_ - prevFrame;\n  var fps = 1000 / diff;\n  requestAnimationFrame((function (param) {\n          return loop(time_, newState);\n        }));\n  fpsNum.textContent = String(Math.round(fps) | 0);\n  return /* () */0;\n}\n\nUtils$GameboyEmulator.Xhr[/* openUri */1](/* GET */3546230, \"../roms/cpu_instrs/cpu_instrs.gb\", new XMLHttpRequest()).then((function (bytes) {\n          console.log(bytes);\n          return Promise.resolve(bytes);\n        })).then((function (bytes) {\n        return Promise.resolve(loop(Date.now(), Emulator$GameboyEmulator.load(bytes)));\n      }));\n\nvar weightRatio = 0.97;\n\nexports.fpsNum = fpsNum;\nexports.weightRatio = weightRatio;\nexports.loop = loop;\n/* fpsNum Not a pure module */\n\n\n//# sourceURL=webpack:///./lib/js/src/Index.bs.js?");

/***/ }),

/***/ "./lib/js/src/Mmu.bs.js":
/*!******************************!*\
  !*** ./lib/js/src/Mmu.bs.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE\n\n\nvar $$Array = __webpack_require__(/*! bs-platform/lib/js/array.js */ \"./node_modules/bs-platform/lib/js/array.js\");\nvar Block = __webpack_require__(/*! bs-platform/lib/js/block.js */ \"./node_modules/bs-platform/lib/js/block.js\");\nvar Curry = __webpack_require__(/*! bs-platform/lib/js/curry.js */ \"./node_modules/bs-platform/lib/js/curry.js\");\nvar Printf = __webpack_require__(/*! bs-platform/lib/js/printf.js */ \"./node_modules/bs-platform/lib/js/printf.js\");\nvar Caml_array = __webpack_require__(/*! bs-platform/lib/js/caml_array.js */ \"./node_modules/bs-platform/lib/js/caml_array.js\");\nvar Caml_format = __webpack_require__(/*! bs-platform/lib/js/caml_format.js */ \"./node_modules/bs-platform/lib/js/caml_format.js\");\nvar Caml_exceptions = __webpack_require__(/*! bs-platform/lib/js/caml_exceptions.js */ \"./node_modules/bs-platform/lib/js/caml_exceptions.js\");\nvar Gpu$GameboyEmulator = __webpack_require__(/*! ./Gpu.bs.js */ \"./lib/js/src/Gpu.bs.js\");\n\nvar AssertionException = Caml_exceptions.create(\"Mmu-GameboyEmulator.AssertionException\");\n\nvar bios = $$Array.map(Caml_format.caml_int_of_string, $$Array.map((function (prim) {\n            return prim.trim();\n          }), \"\\n    0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,\\n    0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,\\n    0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,\\n    0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,\\n    0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,\\n    0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,\\n    0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,\\n    0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,\\n    0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xF2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,\\n    0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,\\n    0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,\\n    0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,\\n    0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,\\n    0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3c, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x4C,\\n    0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20,\\n    0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50\\n  \".split(\",\")));\n\nfunction reset(mmu) {\n  return /* record */[\n          /* finishedBios */false,\n          /* cartType */mmu[/* cartType */1],\n          /* rom */mmu[/* rom */2],\n          /* externalRam */Caml_array.caml_make_vect(8192, 0),\n          /* workRam */Caml_array.caml_make_vect(8192, 0),\n          /* zeroPageRam */Caml_array.caml_make_vect(128, 0)\n        ];\n}\n\nfunction load(bytes) {\n  return reset(/* record */[\n              /* finishedBios */false,\n              /* cartType */Caml_array.caml_array_get(bytes, 327),\n              /* rom */bytes,\n              /* externalRam : array */[],\n              /* workRam : array */[],\n              /* zeroPageRam : array */[]\n            ]);\n}\n\nfunction read8(addr, param) {\n  var mmu = param[/* mmu */1];\n  var gpu = param[/* gpu */0];\n  var match = addr & 61440;\n  var exit = 0;\n  if (match >= 28673) {\n    if (match >= 45057) {\n      if (match >= 53249) {\n        if (match !== 57344) {\n          if (match !== 61440) {\n            return /* tuple */[\n                    0,\n                    mmu\n                  ];\n          } else {\n            var match$1 = addr & 3840;\n            if (match$1 !== 3584) {\n              if (match$1 !== 3840) {\n                return /* tuple */[\n                        Caml_array.caml_array_get(mmu[/* workRam */4], addr & 8191),\n                        mmu\n                      ];\n              } else if (addr >= 65408) {\n                return /* tuple */[\n                        Caml_array.caml_array_get(mmu[/* zeroPageRam */5], addr & 127),\n                        mmu\n                      ];\n              } else {\n                var match$2 = addr & 240;\n                if (match$2 >= 81) {\n                  if (match$2 !== 96 && match$2 !== 112) {\n                    return /* tuple */[\n                            0,\n                            mmu\n                          ];\n                  } else {\n                    return /* tuple */[\n                            Gpu$GameboyEmulator.read8(gpu),\n                            mmu\n                          ];\n                  }\n                } else if (match$2 !== 64 && match$2 < 80) {\n                  return /* tuple */[\n                          0,\n                          mmu\n                        ];\n                } else {\n                  return /* tuple */[\n                          Gpu$GameboyEmulator.read8(gpu),\n                          mmu\n                        ];\n                }\n              }\n            } else {\n              return /* tuple */[\n                      0,\n                      mmu\n                    ];\n            }\n          }\n        } else {\n          exit = 4;\n        }\n      } else if (match !== 49152 && match < 53248) {\n        return /* tuple */[\n                0,\n                mmu\n              ];\n      } else {\n        exit = 4;\n      }\n    } else if (match >= 36865 || match !== 32768 && match < 36864) {\n      return /* tuple */[\n              0,\n              mmu\n            ];\n    } else {\n      exit = 3;\n    }\n  } else if (match >= 12289) {\n    if (match >= 20481) {\n      if (match !== 24576 && match < 28672) {\n        return /* tuple */[\n                0,\n                mmu\n              ];\n      } else {\n        exit = 2;\n      }\n    } else if (match !== 16384 && match < 20480) {\n      return /* tuple */[\n              0,\n              mmu\n            ];\n    } else {\n      exit = 2;\n    }\n  } else if (match >= 4097) {\n    if (match !== 8192 && match < 12288) {\n      return /* tuple */[\n              0,\n              mmu\n            ];\n    } else {\n      exit = 1;\n    }\n  } else if (match !== 0) {\n    if (match >= 4096) {\n      exit = 1;\n    } else {\n      return /* tuple */[\n              0,\n              mmu\n            ];\n    }\n  } else {\n    var match$3 = mmu[/* finishedBios */0];\n    var match$4 = addr <= 255;\n    var match$5 = addr === 256;\n    if (match$3) {\n      return /* tuple */[\n              Caml_array.caml_array_get(mmu[/* rom */2], addr),\n              mmu\n            ];\n    } else if (match$4) {\n      return /* tuple */[\n              Caml_array.caml_array_get(bios, addr),\n              mmu\n            ];\n    } else if (match$5) {\n      console.log(\"Loaded BIOS\");\n      return /* tuple */[\n              Caml_array.caml_array_get(mmu[/* rom */2], addr),\n              /* record */[\n                /* finishedBios */true,\n                /* cartType */mmu[/* cartType */1],\n                /* rom */mmu[/* rom */2],\n                /* externalRam */mmu[/* externalRam */3],\n                /* workRam */mmu[/* workRam */4],\n                /* zeroPageRam */mmu[/* zeroPageRam */5]\n              ]\n            ];\n    } else {\n      return /* tuple */[\n              Caml_array.caml_array_get(mmu[/* rom */2], addr),\n              mmu\n            ];\n    }\n  }\n  switch (exit) {\n    case 1 : \n    case 2 : \n        return /* tuple */[\n                Caml_array.caml_array_get(mmu[/* rom */2], addr),\n                mmu\n              ];\n    case 3 : \n        return /* tuple */[\n                Caml_array.caml_array_get(gpu[/* vram */7], addr & 8191),\n                mmu\n              ];\n    case 4 : \n        return /* tuple */[\n                Caml_array.caml_array_get(mmu[/* workRam */4], addr & 8191),\n                mmu\n              ];\n    \n  }\n}\n\nfunction read16(addr, state) {\n  var match = read8(addr, state);\n  var match$1 = read8(addr + 1 | 0, /* record */[\n        /* gpu */state[/* gpu */0],\n        /* mmu */match[1]\n      ]);\n  var c = (match$1[0] << 8);\n  return /* tuple */[\n          match[0] + c | 0,\n          match$1[1]\n        ];\n}\n\nfunction write8(addr, v, param) {\n  var mmu = param[/* mmu */1];\n  var gpu = param[/* gpu */0];\n  if (v > 255) {\n    throw [\n          AssertionException,\n          Curry._2(Printf.sprintf(/* Format */[\n                    /* String_literal */Block.__(11, [\n                        \"Write8: \",\n                        /* Int */Block.__(4, [\n                            /* Int_x */6,\n                            /* No_padding */0,\n                            /* No_precision */0,\n                            /* Char_literal */Block.__(12, [\n                                /* \" \" */32,\n                                /* Int */Block.__(4, [\n                                    /* Int_x */6,\n                                    /* No_padding */0,\n                                    /* No_precision */0,\n                                    /* End_of_format */0\n                                  ])\n                              ])\n                          ])\n                      ]),\n                    \"Write8: %x %x\"\n                  ]), addr, v)\n        ];\n  }\n  var match = addr & 61440;\n  var exit = 0;\n  if (match >= 28673 && !(match !== 32768 && match !== 36864)) {\n    exit = 1;\n  } else {\n    return /* tuple */[\n            mmu,\n            gpu\n          ];\n  }\n  if (exit === 1) {\n    Caml_array.caml_array_set(gpu[/* vram */7], addr & 8191, v);\n    Gpu$GameboyEmulator.updateTile(addr, gpu);\n    return /* tuple */[\n            mmu,\n            gpu\n          ];\n  }\n  \n}\n\nfunction write16(addr, v, s) {\n  if (v > 65535) {\n    throw [\n          AssertionException,\n          Curry._2(Printf.sprintf(/* Format */[\n                    /* String_literal */Block.__(11, [\n                        \"Write16: \",\n                        /* Int */Block.__(4, [\n                            /* Int_x */6,\n                            /* No_padding */0,\n                            /* No_precision */0,\n                            /* Char_literal */Block.__(12, [\n                                /* \" \" */32,\n                                /* Int */Block.__(4, [\n                                    /* Int_x */6,\n                                    /* No_padding */0,\n                                    /* No_precision */0,\n                                    /* End_of_format */0\n                                  ])\n                              ])\n                          ])\n                      ]),\n                    \"Write16: %x %x\"\n                  ]), addr, v)\n        ];\n  }\n  var match = write8(addr, v & 255, s);\n  var match$1 = write8(addr + 1 | 0, (v >>> 8), /* record */[\n        /* gpu */match[1],\n        /* mmu */match[0]\n      ]);\n  return /* tuple */[\n          match$1[0],\n          match$1[1]\n        ];\n}\n\nexports.reset = reset;\nexports.load = load;\nexports.read8 = read8;\nexports.read16 = read16;\nexports.write8 = write8;\nexports.write16 = write16;\n/* bios Not a pure module */\n\n\n//# sourceURL=webpack:///./lib/js/src/Mmu.bs.js?");

/***/ }),

/***/ "./lib/js/src/Renderer.bs.js":
/*!***********************************!*\
  !*** ./lib/js/src/Renderer.bs.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE\n\n\nvar $$Array = __webpack_require__(/*! bs-platform/lib/js/array.js */ \"./node_modules/bs-platform/lib/js/array.js\");\nvar Block = __webpack_require__(/*! bs-platform/lib/js/block.js */ \"./node_modules/bs-platform/lib/js/block.js\");\nvar Curry = __webpack_require__(/*! bs-platform/lib/js/curry.js */ \"./node_modules/bs-platform/lib/js/curry.js\");\nvar Printf = __webpack_require__(/*! bs-platform/lib/js/printf.js */ \"./node_modules/bs-platform/lib/js/printf.js\");\nvar Caml_array = __webpack_require__(/*! bs-platform/lib/js/caml_array.js */ \"./node_modules/bs-platform/lib/js/caml_array.js\");\nvar Utils$GameboyEmulator = __webpack_require__(/*! ./Utils.bs.js */ \"./lib/js/src/Utils.bs.js\");\n\nfunction make(param) {\n  var canvas = Curry._1(Utils$GameboyEmulator.Canvas[/* getContextFromId */0], \"screen\");\n  var screen = canvas.createImageData(160, 144);\n  var screenData = screen.data;\n  $$Array.iteri((function (idx, _i) {\n          return Caml_array.caml_array_set(screenData, idx, 196);\n        }), screenData);\n  canvas.putImageData(screen, 0, 0);\n  console.log(Curry._1(Printf.sprintf(/* Format */[\n                /* String_literal */Block.__(11, [\n                    \"Initialized screen data: \",\n                    /* Int */Block.__(4, [\n                        /* Int_d */0,\n                        /* No_padding */0,\n                        /* No_precision */0,\n                        /* End_of_format */0\n                      ])\n                  ]),\n                \"Initialized screen data: %d\"\n              ]), screenData.length));\n  return /* record */[\n          /* canvas */canvas,\n          /* screen */screen\n        ];\n}\n\nfunction renderToScreen(renderer) {\n  renderer[/* canvas */0].putImageData(renderer[/* screen */1], 0, 0);\n  return /* () */0;\n}\n\nfunction setPixel(renderer, pixel, color) {\n  var screenData = renderer[/* screen */1].data;\n  return Caml_array.caml_array_set(screenData, pixel, color);\n}\n\nexports.make = make;\nexports.renderToScreen = renderToScreen;\nexports.setPixel = setPixel;\n/* Utils-GameboyEmulator Not a pure module */\n\n\n//# sourceURL=webpack:///./lib/js/src/Renderer.bs.js?");

/***/ }),

/***/ "./lib/js/src/Utils.bs.js":
/*!********************************!*\
  !*** ./lib/js/src/Utils.bs.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE\n\n\nvar Curry = __webpack_require__(/*! bs-platform/lib/js/curry.js */ \"./node_modules/bs-platform/lib/js/curry.js\");\n\nvar toArray = (function(response) { return new Uint8Array(response); });\n\nfunction openUri(method__, uri, xhr) {\n  return new Promise((function (resolve, param) {\n                xhr.onload = (function (param) {\n                    return resolve(Curry._1(toArray, xhr.response));\n                  });\n                xhr.responseType = \"arraybuffer\";\n                xhr.open((function () {\n                          switch (method__) {\n                            case 3546230 : \n                                return \"GET\";\n                            case 891112544 : \n                                return \"POST\";\n                            \n                          }\n                        })(), uri, true);\n                xhr.send();\n                return /* () */0;\n              }));\n}\n\nvar Xhr = /* module */[\n  /* toArray */toArray,\n  /* openUri */openUri\n];\n\nvar getContextFromId = (\n      function(id) {\n        const canvas = document.getElementById(id)\n        return canvas.getContext(\"2d\");\n      }\n  );\n\nvar Canvas = /* module */[/* getContextFromId */getContextFromId];\n\nvar Window = /* module */[];\n\nvar Document = /* module */[];\n\nexports.Xhr = Xhr;\nexports.Canvas = Canvas;\nexports.Window = Window;\nexports.Document = Document;\n/* toArray Not a pure module */\n\n\n//# sourceURL=webpack:///./lib/js/src/Utils.bs.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/array.js":
/*!**************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/array.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Curry = __webpack_require__(/*! ./curry.js */ \"./node_modules/bs-platform/lib/js/curry.js\");\nvar Caml_array = __webpack_require__(/*! ./caml_array.js */ \"./node_modules/bs-platform/lib/js/caml_array.js\");\nvar Caml_exceptions = __webpack_require__(/*! ./caml_exceptions.js */ \"./node_modules/bs-platform/lib/js/caml_exceptions.js\");\nvar Caml_js_exceptions = __webpack_require__(/*! ./caml_js_exceptions.js */ \"./node_modules/bs-platform/lib/js/caml_js_exceptions.js\");\nvar Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions.js */ \"./node_modules/bs-platform/lib/js/caml_builtin_exceptions.js\");\n\nfunction init(l, f) {\n  if (l === 0) {\n    return /* array */[];\n  } else if (l < 0) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Array.init\"\n        ];\n  } else {\n    var res = Caml_array.caml_make_vect(l, Curry._1(f, 0));\n    for(var i = 1 ,i_finish = l - 1 | 0; i <= i_finish; ++i){\n      res[i] = Curry._1(f, i);\n    }\n    return res;\n  }\n}\n\nfunction make_matrix(sx, sy, init) {\n  var res = Caml_array.caml_make_vect(sx, /* array */[]);\n  for(var x = 0 ,x_finish = sx - 1 | 0; x <= x_finish; ++x){\n    res[x] = Caml_array.caml_make_vect(sy, init);\n  }\n  return res;\n}\n\nfunction copy(a) {\n  var l = a.length;\n  if (l === 0) {\n    return /* array */[];\n  } else {\n    return Caml_array.caml_array_sub(a, 0, l);\n  }\n}\n\nfunction append(a1, a2) {\n  var l1 = a1.length;\n  if (l1 === 0) {\n    return copy(a2);\n  } else if (a2.length === 0) {\n    return Caml_array.caml_array_sub(a1, 0, l1);\n  } else {\n    return a1.concat(a2);\n  }\n}\n\nfunction sub(a, ofs, len) {\n  if (len < 0 || ofs > (a.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Array.sub\"\n        ];\n  } else {\n    return Caml_array.caml_array_sub(a, ofs, len);\n  }\n}\n\nfunction fill(a, ofs, len, v) {\n  if (ofs < 0 || len < 0 || ofs > (a.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Array.fill\"\n        ];\n  } else {\n    for(var i = ofs ,i_finish = (ofs + len | 0) - 1 | 0; i <= i_finish; ++i){\n      a[i] = v;\n    }\n    return /* () */0;\n  }\n}\n\nfunction blit(a1, ofs1, a2, ofs2, len) {\n  if (len < 0 || ofs1 < 0 || ofs1 > (a1.length - len | 0) || ofs2 < 0 || ofs2 > (a2.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Array.blit\"\n        ];\n  } else {\n    return Caml_array.caml_array_blit(a1, ofs1, a2, ofs2, len);\n  }\n}\n\nfunction iter(f, a) {\n  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){\n    Curry._1(f, a[i]);\n  }\n  return /* () */0;\n}\n\nfunction map(f, a) {\n  var l = a.length;\n  if (l === 0) {\n    return /* array */[];\n  } else {\n    var r = Caml_array.caml_make_vect(l, Curry._1(f, a[0]));\n    for(var i = 1 ,i_finish = l - 1 | 0; i <= i_finish; ++i){\n      r[i] = Curry._1(f, a[i]);\n    }\n    return r;\n  }\n}\n\nfunction iteri(f, a) {\n  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){\n    Curry._2(f, i, a[i]);\n  }\n  return /* () */0;\n}\n\nfunction mapi(f, a) {\n  var l = a.length;\n  if (l === 0) {\n    return /* array */[];\n  } else {\n    var r = Caml_array.caml_make_vect(l, Curry._2(f, 0, a[0]));\n    for(var i = 1 ,i_finish = l - 1 | 0; i <= i_finish; ++i){\n      r[i] = Curry._2(f, i, a[i]);\n    }\n    return r;\n  }\n}\n\nfunction to_list(a) {\n  var _i = a.length - 1 | 0;\n  var _res = /* [] */0;\n  while(true) {\n    var res = _res;\n    var i = _i;\n    if (i < 0) {\n      return res;\n    } else {\n      _res = /* :: */[\n        a[i],\n        res\n      ];\n      _i = i - 1 | 0;\n      continue ;\n    }\n  };\n}\n\nfunction list_length(_accu, _param) {\n  while(true) {\n    var param = _param;\n    var accu = _accu;\n    if (param) {\n      _param = param[1];\n      _accu = accu + 1 | 0;\n      continue ;\n    } else {\n      return accu;\n    }\n  };\n}\n\nfunction of_list(l) {\n  if (l) {\n    var a = Caml_array.caml_make_vect(list_length(0, l), l[0]);\n    var _i = 1;\n    var _param = l[1];\n    while(true) {\n      var param = _param;\n      var i = _i;\n      if (param) {\n        a[i] = param[0];\n        _param = param[1];\n        _i = i + 1 | 0;\n        continue ;\n      } else {\n        return a;\n      }\n    };\n  } else {\n    return /* array */[];\n  }\n}\n\nfunction fold_left(f, x, a) {\n  var r = x;\n  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){\n    r = Curry._2(f, r, a[i]);\n  }\n  return r;\n}\n\nfunction fold_right(f, a, x) {\n  var r = x;\n  for(var i = a.length - 1 | 0; i >= 0; --i){\n    r = Curry._2(f, a[i], r);\n  }\n  return r;\n}\n\nvar Bottom = Caml_exceptions.create(\"Array.Bottom\");\n\nfunction sort(cmp, a) {\n  var maxson = function (l, i) {\n    var i31 = ((i + i | 0) + i | 0) + 1 | 0;\n    var x = i31;\n    if ((i31 + 2 | 0) < l) {\n      if (Curry._2(cmp, Caml_array.caml_array_get(a, i31), Caml_array.caml_array_get(a, i31 + 1 | 0)) < 0) {\n        x = i31 + 1 | 0;\n      }\n      if (Curry._2(cmp, Caml_array.caml_array_get(a, x), Caml_array.caml_array_get(a, i31 + 2 | 0)) < 0) {\n        x = i31 + 2 | 0;\n      }\n      return x;\n    } else if ((i31 + 1 | 0) < l && Curry._2(cmp, Caml_array.caml_array_get(a, i31), Caml_array.caml_array_get(a, i31 + 1 | 0)) < 0) {\n      return i31 + 1 | 0;\n    } else if (i31 < l) {\n      return i31;\n    } else {\n      throw [\n            Bottom,\n            i\n          ];\n    }\n  };\n  var trickle = function (l, i, e) {\n    try {\n      var l$1 = l;\n      var _i = i;\n      var e$1 = e;\n      while(true) {\n        var i$1 = _i;\n        var j = maxson(l$1, i$1);\n        if (Curry._2(cmp, Caml_array.caml_array_get(a, j), e$1) > 0) {\n          Caml_array.caml_array_set(a, i$1, Caml_array.caml_array_get(a, j));\n          _i = j;\n          continue ;\n        } else {\n          return Caml_array.caml_array_set(a, i$1, e$1);\n        }\n      };\n    }\n    catch (raw_exn){\n      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n      if (exn[0] === Bottom) {\n        return Caml_array.caml_array_set(a, exn[1], e);\n      } else {\n        throw exn;\n      }\n    }\n  };\n  var bubble = function (l, i) {\n    try {\n      var l$1 = l;\n      var _i = i;\n      while(true) {\n        var i$1 = _i;\n        var j = maxson(l$1, i$1);\n        Caml_array.caml_array_set(a, i$1, Caml_array.caml_array_get(a, j));\n        _i = j;\n        continue ;\n      };\n    }\n    catch (raw_exn){\n      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n      if (exn[0] === Bottom) {\n        return exn[1];\n      } else {\n        throw exn;\n      }\n    }\n  };\n  var trickleup = function (_i, e) {\n    while(true) {\n      var i = _i;\n      var father = (i - 1 | 0) / 3 | 0;\n      if (i === father) {\n        throw [\n              Caml_builtin_exceptions.assert_failure,\n              /* tuple */[\n                \"array.ml\",\n                173,\n                4\n              ]\n            ];\n      }\n      if (Curry._2(cmp, Caml_array.caml_array_get(a, father), e) < 0) {\n        Caml_array.caml_array_set(a, i, Caml_array.caml_array_get(a, father));\n        if (father > 0) {\n          _i = father;\n          continue ;\n        } else {\n          return Caml_array.caml_array_set(a, 0, e);\n        }\n      } else {\n        return Caml_array.caml_array_set(a, i, e);\n      }\n    };\n  };\n  var l = a.length;\n  for(var i = ((l + 1 | 0) / 3 | 0) - 1 | 0; i >= 0; --i){\n    trickle(l, i, Caml_array.caml_array_get(a, i));\n  }\n  for(var i$1 = l - 1 | 0; i$1 >= 2; --i$1){\n    var e = Caml_array.caml_array_get(a, i$1);\n    Caml_array.caml_array_set(a, i$1, Caml_array.caml_array_get(a, 0));\n    trickleup(bubble(i$1, 0), e);\n  }\n  if (l > 1) {\n    var e$1 = Caml_array.caml_array_get(a, 1);\n    Caml_array.caml_array_set(a, 1, Caml_array.caml_array_get(a, 0));\n    return Caml_array.caml_array_set(a, 0, e$1);\n  } else {\n    return 0;\n  }\n}\n\nfunction stable_sort(cmp, a) {\n  var merge = function (src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs) {\n    var src1r = src1ofs + src1len | 0;\n    var src2r = src2ofs + src2len | 0;\n    var _i1 = src1ofs;\n    var _s1 = Caml_array.caml_array_get(a, src1ofs);\n    var _i2 = src2ofs;\n    var _s2 = Caml_array.caml_array_get(src2, src2ofs);\n    var _d = dstofs;\n    while(true) {\n      var d = _d;\n      var s2 = _s2;\n      var i2 = _i2;\n      var s1 = _s1;\n      var i1 = _i1;\n      if (Curry._2(cmp, s1, s2) <= 0) {\n        Caml_array.caml_array_set(dst, d, s1);\n        var i1$1 = i1 + 1 | 0;\n        if (i1$1 < src1r) {\n          _d = d + 1 | 0;\n          _s1 = Caml_array.caml_array_get(a, i1$1);\n          _i1 = i1$1;\n          continue ;\n        } else {\n          return blit(src2, i2, dst, d + 1 | 0, src2r - i2 | 0);\n        }\n      } else {\n        Caml_array.caml_array_set(dst, d, s2);\n        var i2$1 = i2 + 1 | 0;\n        if (i2$1 < src2r) {\n          _d = d + 1 | 0;\n          _s2 = Caml_array.caml_array_get(src2, i2$1);\n          _i2 = i2$1;\n          continue ;\n        } else {\n          return blit(a, i1, dst, d + 1 | 0, src1r - i1 | 0);\n        }\n      }\n    };\n  };\n  var isortto = function (srcofs, dst, dstofs, len) {\n    for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n      var e = Caml_array.caml_array_get(a, srcofs + i | 0);\n      var j = (dstofs + i | 0) - 1 | 0;\n      while(j >= dstofs && Curry._2(cmp, Caml_array.caml_array_get(dst, j), e) > 0) {\n        Caml_array.caml_array_set(dst, j + 1 | 0, Caml_array.caml_array_get(dst, j));\n        j = j - 1 | 0;\n      };\n      Caml_array.caml_array_set(dst, j + 1 | 0, e);\n    }\n    return /* () */0;\n  };\n  var sortto = function (srcofs, dst, dstofs, len) {\n    if (len <= 5) {\n      return isortto(srcofs, dst, dstofs, len);\n    } else {\n      var l1 = len / 2 | 0;\n      var l2 = len - l1 | 0;\n      sortto(srcofs + l1 | 0, dst, dstofs + l1 | 0, l2);\n      sortto(srcofs, a, srcofs + l2 | 0, l1);\n      return merge(srcofs + l2 | 0, l1, dst, dstofs + l1 | 0, l2, dst, dstofs);\n    }\n  };\n  var l = a.length;\n  if (l <= 5) {\n    return isortto(0, a, 0, l);\n  } else {\n    var l1 = l / 2 | 0;\n    var l2 = l - l1 | 0;\n    var t = Caml_array.caml_make_vect(l2, Caml_array.caml_array_get(a, 0));\n    sortto(l1, t, 0, l2);\n    sortto(0, a, l2, l1);\n    return merge(l2, l1, t, 0, l2, a, 0);\n  }\n}\n\nvar create_matrix = make_matrix;\n\nvar concat = Caml_array.caml_array_concat;\n\nvar fast_sort = stable_sort;\n\nexports.init = init;\nexports.make_matrix = make_matrix;\nexports.create_matrix = create_matrix;\nexports.append = append;\nexports.concat = concat;\nexports.sub = sub;\nexports.copy = copy;\nexports.fill = fill;\nexports.blit = blit;\nexports.to_list = to_list;\nexports.of_list = of_list;\nexports.iter = iter;\nexports.map = map;\nexports.iteri = iteri;\nexports.mapi = mapi;\nexports.fold_left = fold_left;\nexports.fold_right = fold_right;\nexports.sort = sort;\nexports.stable_sort = stable_sort;\nexports.fast_sort = fast_sort;\n/* No side effect */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/array.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/belt_Array.js":
/*!*******************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/belt_Array.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Curry = __webpack_require__(/*! ./curry.js */ \"./node_modules/bs-platform/lib/js/curry.js\");\nvar Js_math = __webpack_require__(/*! ./js_math.js */ \"./node_modules/bs-platform/lib/js/js_math.js\");\nvar Caml_option = __webpack_require__(/*! ./caml_option.js */ \"./node_modules/bs-platform/lib/js/caml_option.js\");\nvar Caml_primitive = __webpack_require__(/*! ./caml_primitive.js */ \"./node_modules/bs-platform/lib/js/caml_primitive.js\");\n\nfunction get(arr, i) {\n  if (i >= 0 && i < arr.length) {\n    return Caml_option.some(arr[i]);\n  }\n  \n}\n\nfunction getExn(arr, i) {\n  if (!(i >= 0 && i < arr.length)) {\n    throw new Error(\"File \\\"belt_Array.ml\\\", line 25, characters 6-12\");\n  }\n  return arr[i];\n}\n\nfunction set(arr, i, v) {\n  if (i >= 0 && i < arr.length) {\n    arr[i] = v;\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction setExn(arr, i, v) {\n  if (!(i >= 0 && i < arr.length)) {\n    throw new Error(\"File \\\"belt_Array.ml\\\", line 31, characters 4-10\");\n  }\n  arr[i] = v;\n  return /* () */0;\n}\n\nfunction swapUnsafe(xs, i, j) {\n  var tmp = xs[i];\n  xs[i] = xs[j];\n  xs[j] = tmp;\n  return /* () */0;\n}\n\nfunction shuffleInPlace(xs) {\n  var len = xs.length;\n  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n    swapUnsafe(xs, i, Js_math.random_int(i, len));\n  }\n  return /* () */0;\n}\n\nfunction shuffle(xs) {\n  var result = xs.slice(0);\n  shuffleInPlace(result);\n  return result;\n}\n\nfunction reverseInPlace(xs) {\n  var len = xs.length;\n  var xs$1 = xs;\n  var ofs = 0;\n  var len$1 = len;\n  for(var i = 0 ,i_finish = (len$1 / 2 | 0) - 1 | 0; i <= i_finish; ++i){\n    swapUnsafe(xs$1, ofs + i | 0, ((ofs + len$1 | 0) - i | 0) - 1 | 0);\n  }\n  return /* () */0;\n}\n\nfunction reverse(xs) {\n  var len = xs.length;\n  var result = new Array(len);\n  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n    result[i] = xs[(len - 1 | 0) - i | 0];\n  }\n  return result;\n}\n\nfunction make(l, f) {\n  if (l <= 0) {\n    return /* array */[];\n  } else {\n    var res = new Array(l);\n    for(var i = 0 ,i_finish = l - 1 | 0; i <= i_finish; ++i){\n      res[i] = f;\n    }\n    return res;\n  }\n}\n\nfunction makeByU(l, f) {\n  if (l <= 0) {\n    return /* array */[];\n  } else {\n    var res = new Array(l);\n    for(var i = 0 ,i_finish = l - 1 | 0; i <= i_finish; ++i){\n      res[i] = f(i);\n    }\n    return res;\n  }\n}\n\nfunction makeBy(l, f) {\n  return makeByU(l, Curry.__1(f));\n}\n\nfunction makeByAndShuffleU(l, f) {\n  var u = makeByU(l, f);\n  shuffleInPlace(u);\n  return u;\n}\n\nfunction makeByAndShuffle(l, f) {\n  return makeByAndShuffleU(l, Curry.__1(f));\n}\n\nfunction range(start, finish) {\n  var cut = finish - start | 0;\n  if (cut < 0) {\n    return /* array */[];\n  } else {\n    var arr = new Array(cut + 1 | 0);\n    for(var i = 0; i <= cut; ++i){\n      arr[i] = start + i | 0;\n    }\n    return arr;\n  }\n}\n\nfunction rangeBy(start, finish, step) {\n  var cut = finish - start | 0;\n  if (cut < 0 || step <= 0) {\n    return /* array */[];\n  } else {\n    var nb = (cut / step | 0) + 1 | 0;\n    var arr = new Array(nb);\n    var cur = start;\n    for(var i = 0 ,i_finish = nb - 1 | 0; i <= i_finish; ++i){\n      arr[i] = cur;\n      cur = cur + step | 0;\n    }\n    return arr;\n  }\n}\n\nfunction zip(xs, ys) {\n  var lenx = xs.length;\n  var leny = ys.length;\n  var len = lenx < leny ? lenx : leny;\n  var s = new Array(len);\n  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n    s[i] = /* tuple */[\n      xs[i],\n      ys[i]\n    ];\n  }\n  return s;\n}\n\nfunction zipByU(xs, ys, f) {\n  var lenx = xs.length;\n  var leny = ys.length;\n  var len = lenx < leny ? lenx : leny;\n  var s = new Array(len);\n  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n    s[i] = f(xs[i], ys[i]);\n  }\n  return s;\n}\n\nfunction zipBy(xs, ys, f) {\n  return zipByU(xs, ys, Curry.__2(f));\n}\n\nfunction concat(a1, a2) {\n  var l1 = a1.length;\n  var l2 = a2.length;\n  var a1a2 = new Array(l1 + l2 | 0);\n  for(var i = 0 ,i_finish = l1 - 1 | 0; i <= i_finish; ++i){\n    a1a2[i] = a1[i];\n  }\n  for(var i$1 = 0 ,i_finish$1 = l2 - 1 | 0; i$1 <= i_finish$1; ++i$1){\n    a1a2[l1 + i$1 | 0] = a2[i$1];\n  }\n  return a1a2;\n}\n\nfunction concatMany(arrs) {\n  var lenArrs = arrs.length;\n  var totalLen = 0;\n  for(var i = 0 ,i_finish = lenArrs - 1 | 0; i <= i_finish; ++i){\n    totalLen = totalLen + arrs[i].length | 0;\n  }\n  var result = new Array(totalLen);\n  totalLen = 0;\n  for(var j = 0 ,j_finish = lenArrs - 1 | 0; j <= j_finish; ++j){\n    var cur = arrs[j];\n    for(var k = 0 ,k_finish = cur.length - 1 | 0; k <= k_finish; ++k){\n      result[totalLen] = cur[k];\n      totalLen = totalLen + 1 | 0;\n    }\n  }\n  return result;\n}\n\nfunction slice(a, offset, len) {\n  if (len <= 0) {\n    return /* array */[];\n  } else {\n    var lena = a.length;\n    var ofs = offset < 0 ? Caml_primitive.caml_int_max(lena + offset | 0, 0) : offset;\n    var hasLen = lena - ofs | 0;\n    var copyLength = hasLen < len ? hasLen : len;\n    if (copyLength <= 0) {\n      return /* array */[];\n    } else {\n      var result = new Array(copyLength);\n      for(var i = 0 ,i_finish = copyLength - 1 | 0; i <= i_finish; ++i){\n        result[i] = a[ofs + i | 0];\n      }\n      return result;\n    }\n  }\n}\n\nfunction sliceToEnd(a, offset) {\n  var lena = a.length;\n  var ofs = offset < 0 ? Caml_primitive.caml_int_max(lena + offset | 0, 0) : offset;\n  var len = lena - ofs | 0;\n  var result = new Array(len);\n  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n    result[i] = a[ofs + i | 0];\n  }\n  return result;\n}\n\nfunction fill(a, offset, len, v) {\n  if (len > 0) {\n    var lena = a.length;\n    var ofs = offset < 0 ? Caml_primitive.caml_int_max(lena + offset | 0, 0) : offset;\n    var hasLen = lena - ofs | 0;\n    var fillLength = hasLen < len ? hasLen : len;\n    if (fillLength > 0) {\n      for(var i = ofs ,i_finish = (ofs + fillLength | 0) - 1 | 0; i <= i_finish; ++i){\n        a[i] = v;\n      }\n      return /* () */0;\n    } else {\n      return 0;\n    }\n  } else {\n    return 0;\n  }\n}\n\nfunction blitUnsafe(a1, srcofs1, a2, srcofs2, blitLength) {\n  if (srcofs2 <= srcofs1) {\n    for(var j = 0 ,j_finish = blitLength - 1 | 0; j <= j_finish; ++j){\n      a2[j + srcofs2 | 0] = a1[j + srcofs1 | 0];\n    }\n    return /* () */0;\n  } else {\n    for(var j$1 = blitLength - 1 | 0; j$1 >= 0; --j$1){\n      a2[j$1 + srcofs2 | 0] = a1[j$1 + srcofs1 | 0];\n    }\n    return /* () */0;\n  }\n}\n\nfunction blit(a1, ofs1, a2, ofs2, len) {\n  var lena1 = a1.length;\n  var lena2 = a2.length;\n  var srcofs1 = ofs1 < 0 ? Caml_primitive.caml_int_max(lena1 + ofs1 | 0, 0) : ofs1;\n  var srcofs2 = ofs2 < 0 ? Caml_primitive.caml_int_max(lena2 + ofs2 | 0, 0) : ofs2;\n  var blitLength = Caml_primitive.caml_int_min(len, Caml_primitive.caml_int_min(lena1 - srcofs1 | 0, lena2 - srcofs2 | 0));\n  if (srcofs2 <= srcofs1) {\n    for(var j = 0 ,j_finish = blitLength - 1 | 0; j <= j_finish; ++j){\n      a2[j + srcofs2 | 0] = a1[j + srcofs1 | 0];\n    }\n    return /* () */0;\n  } else {\n    for(var j$1 = blitLength - 1 | 0; j$1 >= 0; --j$1){\n      a2[j$1 + srcofs2 | 0] = a1[j$1 + srcofs1 | 0];\n    }\n    return /* () */0;\n  }\n}\n\nfunction forEachU(a, f) {\n  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){\n    f(a[i]);\n  }\n  return /* () */0;\n}\n\nfunction forEach(a, f) {\n  return forEachU(a, Curry.__1(f));\n}\n\nfunction mapU(a, f) {\n  var l = a.length;\n  var r = new Array(l);\n  for(var i = 0 ,i_finish = l - 1 | 0; i <= i_finish; ++i){\n    r[i] = f(a[i]);\n  }\n  return r;\n}\n\nfunction map(a, f) {\n  return mapU(a, Curry.__1(f));\n}\n\nfunction keepU(a, f) {\n  var l = a.length;\n  var r = new Array(l);\n  var j = 0;\n  for(var i = 0 ,i_finish = l - 1 | 0; i <= i_finish; ++i){\n    var v = a[i];\n    if (f(v)) {\n      r[j] = v;\n      j = j + 1 | 0;\n    }\n    \n  }\n  r.length = j;\n  return r;\n}\n\nfunction keep(a, f) {\n  return keepU(a, Curry.__1(f));\n}\n\nfunction keepWithIndexU(a, f) {\n  var l = a.length;\n  var r = new Array(l);\n  var j = 0;\n  for(var i = 0 ,i_finish = l - 1 | 0; i <= i_finish; ++i){\n    var v = a[i];\n    if (f(v, i)) {\n      r[j] = v;\n      j = j + 1 | 0;\n    }\n    \n  }\n  r.length = j;\n  return r;\n}\n\nfunction keepWithIndex(a, f) {\n  return keepWithIndexU(a, Curry.__2(f));\n}\n\nfunction keepMapU(a, f) {\n  var l = a.length;\n  var r = new Array(l);\n  var j = 0;\n  for(var i = 0 ,i_finish = l - 1 | 0; i <= i_finish; ++i){\n    var v = a[i];\n    var match = f(v);\n    if (match !== undefined) {\n      r[j] = Caml_option.valFromOption(match);\n      j = j + 1 | 0;\n    }\n    \n  }\n  r.length = j;\n  return r;\n}\n\nfunction keepMap(a, f) {\n  return keepMapU(a, Curry.__1(f));\n}\n\nfunction forEachWithIndexU(a, f) {\n  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){\n    f(i, a[i]);\n  }\n  return /* () */0;\n}\n\nfunction forEachWithIndex(a, f) {\n  return forEachWithIndexU(a, Curry.__2(f));\n}\n\nfunction mapWithIndexU(a, f) {\n  var l = a.length;\n  var r = new Array(l);\n  for(var i = 0 ,i_finish = l - 1 | 0; i <= i_finish; ++i){\n    r[i] = f(i, a[i]);\n  }\n  return r;\n}\n\nfunction mapWithIndex(a, f) {\n  return mapWithIndexU(a, Curry.__2(f));\n}\n\nfunction reduceU(a, x, f) {\n  var r = x;\n  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){\n    r = f(r, a[i]);\n  }\n  return r;\n}\n\nfunction reduce(a, x, f) {\n  return reduceU(a, x, Curry.__2(f));\n}\n\nfunction reduceReverseU(a, x, f) {\n  var r = x;\n  for(var i = a.length - 1 | 0; i >= 0; --i){\n    r = f(r, a[i]);\n  }\n  return r;\n}\n\nfunction reduceReverse(a, x, f) {\n  return reduceReverseU(a, x, Curry.__2(f));\n}\n\nfunction reduceReverse2U(a, b, x, f) {\n  var r = x;\n  var len = Caml_primitive.caml_int_min(a.length, b.length);\n  for(var i = len - 1 | 0; i >= 0; --i){\n    r = f(r, a[i], b[i]);\n  }\n  return r;\n}\n\nfunction reduceReverse2(a, b, x, f) {\n  return reduceReverse2U(a, b, x, Curry.__3(f));\n}\n\nfunction reduceWithIndexU(a, x, f) {\n  var r = x;\n  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){\n    r = f(r, a[i], i);\n  }\n  return r;\n}\n\nfunction reduceWithIndex(a, x, f) {\n  return reduceWithIndexU(a, x, Curry.__3(f));\n}\n\nfunction everyU(arr, b) {\n  var len = arr.length;\n  var arr$1 = arr;\n  var _i = 0;\n  var b$1 = b;\n  var len$1 = len;\n  while(true) {\n    var i = _i;\n    if (i === len$1) {\n      return true;\n    } else if (b$1(arr$1[i])) {\n      _i = i + 1 | 0;\n      continue ;\n    } else {\n      return false;\n    }\n  };\n}\n\nfunction every(arr, f) {\n  return everyU(arr, Curry.__1(f));\n}\n\nfunction someU(arr, b) {\n  var len = arr.length;\n  var arr$1 = arr;\n  var _i = 0;\n  var b$1 = b;\n  var len$1 = len;\n  while(true) {\n    var i = _i;\n    if (i === len$1) {\n      return false;\n    } else if (b$1(arr$1[i])) {\n      return true;\n    } else {\n      _i = i + 1 | 0;\n      continue ;\n    }\n  };\n}\n\nfunction some(arr, f) {\n  return someU(arr, Curry.__1(f));\n}\n\nfunction everyAux2(arr1, arr2, _i, b, len) {\n  while(true) {\n    var i = _i;\n    if (i === len) {\n      return true;\n    } else if (b(arr1[i], arr2[i])) {\n      _i = i + 1 | 0;\n      continue ;\n    } else {\n      return false;\n    }\n  };\n}\n\nfunction every2U(a, b, p) {\n  return everyAux2(a, b, 0, p, Caml_primitive.caml_int_min(a.length, b.length));\n}\n\nfunction every2(a, b, p) {\n  return every2U(a, b, Curry.__2(p));\n}\n\nfunction some2U(a, b, p) {\n  var arr1 = a;\n  var arr2 = b;\n  var _i = 0;\n  var b$1 = p;\n  var len = Caml_primitive.caml_int_min(a.length, b.length);\n  while(true) {\n    var i = _i;\n    if (i === len) {\n      return false;\n    } else if (b$1(arr1[i], arr2[i])) {\n      return true;\n    } else {\n      _i = i + 1 | 0;\n      continue ;\n    }\n  };\n}\n\nfunction some2(a, b, p) {\n  return some2U(a, b, Curry.__2(p));\n}\n\nfunction eqU(a, b, p) {\n  var lena = a.length;\n  var lenb = b.length;\n  if (lena === lenb) {\n    return everyAux2(a, b, 0, p, lena);\n  } else {\n    return false;\n  }\n}\n\nfunction eq(a, b, p) {\n  return eqU(a, b, Curry.__2(p));\n}\n\nfunction cmpU(a, b, p) {\n  var lena = a.length;\n  var lenb = b.length;\n  if (lena > lenb) {\n    return 1;\n  } else if (lena < lenb) {\n    return -1;\n  } else {\n    var arr1 = a;\n    var arr2 = b;\n    var _i = 0;\n    var b$1 = p;\n    var len = lena;\n    while(true) {\n      var i = _i;\n      if (i === len) {\n        return 0;\n      } else {\n        var c = b$1(arr1[i], arr2[i]);\n        if (c === 0) {\n          _i = i + 1 | 0;\n          continue ;\n        } else {\n          return c;\n        }\n      }\n    };\n  }\n}\n\nfunction cmp(a, b, p) {\n  return cmpU(a, b, Curry.__2(p));\n}\n\nfunction partitionU(a, f) {\n  var l = a.length;\n  var i = 0;\n  var j = 0;\n  var a1 = new Array(l);\n  var a2 = new Array(l);\n  for(var ii = 0 ,ii_finish = l - 1 | 0; ii <= ii_finish; ++ii){\n    var v = a[ii];\n    if (f(v)) {\n      a1[i] = v;\n      i = i + 1 | 0;\n    } else {\n      a2[j] = v;\n      j = j + 1 | 0;\n    }\n  }\n  a1.length = i;\n  a2.length = j;\n  return /* tuple */[\n          a1,\n          a2\n        ];\n}\n\nfunction partition(a, f) {\n  return partitionU(a, Curry.__1(f));\n}\n\nfunction unzip(a) {\n  var l = a.length;\n  var a1 = new Array(l);\n  var a2 = new Array(l);\n  for(var i = 0 ,i_finish = l - 1 | 0; i <= i_finish; ++i){\n    var match = a[i];\n    a1[i] = match[0];\n    a2[i] = match[1];\n  }\n  return /* tuple */[\n          a1,\n          a2\n        ];\n}\n\nexports.get = get;\nexports.getExn = getExn;\nexports.set = set;\nexports.setExn = setExn;\nexports.shuffleInPlace = shuffleInPlace;\nexports.shuffle = shuffle;\nexports.reverseInPlace = reverseInPlace;\nexports.reverse = reverse;\nexports.make = make;\nexports.range = range;\nexports.rangeBy = rangeBy;\nexports.makeByU = makeByU;\nexports.makeBy = makeBy;\nexports.makeByAndShuffleU = makeByAndShuffleU;\nexports.makeByAndShuffle = makeByAndShuffle;\nexports.zip = zip;\nexports.zipByU = zipByU;\nexports.zipBy = zipBy;\nexports.unzip = unzip;\nexports.concat = concat;\nexports.concatMany = concatMany;\nexports.slice = slice;\nexports.sliceToEnd = sliceToEnd;\nexports.fill = fill;\nexports.blit = blit;\nexports.blitUnsafe = blitUnsafe;\nexports.forEachU = forEachU;\nexports.forEach = forEach;\nexports.mapU = mapU;\nexports.map = map;\nexports.keepU = keepU;\nexports.keep = keep;\nexports.keepWithIndexU = keepWithIndexU;\nexports.keepWithIndex = keepWithIndex;\nexports.keepMapU = keepMapU;\nexports.keepMap = keepMap;\nexports.forEachWithIndexU = forEachWithIndexU;\nexports.forEachWithIndex = forEachWithIndex;\nexports.mapWithIndexU = mapWithIndexU;\nexports.mapWithIndex = mapWithIndex;\nexports.partitionU = partitionU;\nexports.partition = partition;\nexports.reduceU = reduceU;\nexports.reduce = reduce;\nexports.reduceReverseU = reduceReverseU;\nexports.reduceReverse = reduceReverse;\nexports.reduceReverse2U = reduceReverse2U;\nexports.reduceReverse2 = reduceReverse2;\nexports.reduceWithIndexU = reduceWithIndexU;\nexports.reduceWithIndex = reduceWithIndex;\nexports.someU = someU;\nexports.some = some;\nexports.everyU = everyU;\nexports.every = every;\nexports.every2U = every2U;\nexports.every2 = every2;\nexports.some2U = some2U;\nexports.some2 = some2;\nexports.cmpU = cmpU;\nexports.cmp = cmp;\nexports.eqU = eqU;\nexports.eq = eq;\n/* No side effect */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/belt_Array.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/belt_Option.js":
/*!********************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/belt_Option.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Curry = __webpack_require__(/*! ./curry.js */ \"./node_modules/bs-platform/lib/js/curry.js\");\nvar Caml_option = __webpack_require__(/*! ./caml_option.js */ \"./node_modules/bs-platform/lib/js/caml_option.js\");\n\nfunction getExn(param) {\n  if (param !== undefined) {\n    return Caml_option.valFromOption(param);\n  } else {\n    throw new Error(\"getExn\");\n  }\n}\n\nfunction mapWithDefaultU(opt, $$default, f) {\n  if (opt !== undefined) {\n    return f(Caml_option.valFromOption(opt));\n  } else {\n    return $$default;\n  }\n}\n\nfunction mapWithDefault(opt, $$default, f) {\n  return mapWithDefaultU(opt, $$default, Curry.__1(f));\n}\n\nfunction mapU(opt, f) {\n  if (opt !== undefined) {\n    return Caml_option.some(f(Caml_option.valFromOption(opt)));\n  }\n  \n}\n\nfunction map(opt, f) {\n  return mapU(opt, Curry.__1(f));\n}\n\nfunction flatMapU(opt, f) {\n  if (opt !== undefined) {\n    return f(Caml_option.valFromOption(opt));\n  }\n  \n}\n\nfunction flatMap(opt, f) {\n  return flatMapU(opt, Curry.__1(f));\n}\n\nfunction getWithDefault(opt, $$default) {\n  if (opt !== undefined) {\n    return Caml_option.valFromOption(opt);\n  } else {\n    return $$default;\n  }\n}\n\nfunction isSome(param) {\n  return param !== undefined;\n}\n\nfunction isNone(x) {\n  return x === undefined;\n}\n\nfunction eqU(a, b, f) {\n  if (a !== undefined) {\n    if (b !== undefined) {\n      return f(Caml_option.valFromOption(a), Caml_option.valFromOption(b));\n    } else {\n      return false;\n    }\n  } else {\n    return b === undefined;\n  }\n}\n\nfunction eq(a, b, f) {\n  return eqU(a, b, Curry.__2(f));\n}\n\nfunction cmpU(a, b, f) {\n  if (a !== undefined) {\n    if (b !== undefined) {\n      return f(Caml_option.valFromOption(a), Caml_option.valFromOption(b));\n    } else {\n      return 1;\n    }\n  } else if (b !== undefined) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n\nfunction cmp(a, b, f) {\n  return cmpU(a, b, Curry.__2(f));\n}\n\nexports.getExn = getExn;\nexports.mapWithDefaultU = mapWithDefaultU;\nexports.mapWithDefault = mapWithDefault;\nexports.mapU = mapU;\nexports.map = map;\nexports.flatMapU = flatMapU;\nexports.flatMap = flatMap;\nexports.getWithDefault = getWithDefault;\nexports.isSome = isSome;\nexports.isNone = isNone;\nexports.eqU = eqU;\nexports.eq = eq;\nexports.cmpU = cmpU;\nexports.cmp = cmp;\n/* No side effect */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/belt_Option.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/belt_Range.js":
/*!*******************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/belt_Range.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Curry = __webpack_require__(/*! ./curry.js */ \"./node_modules/bs-platform/lib/js/curry.js\");\n\nfunction forEachU(s, f, action) {\n  for(var i = s; i <= f; ++i){\n    action(i);\n  }\n  return /* () */0;\n}\n\nfunction forEach(s, f, action) {\n  return forEachU(s, f, Curry.__1(action));\n}\n\nfunction everyU(_s, f, p) {\n  while(true) {\n    var s = _s;\n    if (s > f) {\n      return true;\n    } else if (p(s)) {\n      _s = s + 1 | 0;\n      continue ;\n    } else {\n      return false;\n    }\n  };\n}\n\nfunction every(s, f, p) {\n  return everyU(s, f, Curry.__1(p));\n}\n\nfunction everyByU(s, f, step, p) {\n  if (step > 0) {\n    var _s = s;\n    var f$1 = f;\n    var step$1 = step;\n    var p$1 = p;\n    while(true) {\n      var s$1 = _s;\n      if (s$1 > f$1) {\n        return true;\n      } else if (p$1(s$1)) {\n        _s = s$1 + step$1 | 0;\n        continue ;\n      } else {\n        return false;\n      }\n    };\n  } else {\n    return true;\n  }\n}\n\nfunction everyBy(s, f, step, p) {\n  return everyByU(s, f, step, Curry.__1(p));\n}\n\nfunction someU(_s, f, p) {\n  while(true) {\n    var s = _s;\n    if (s > f) {\n      return false;\n    } else if (p(s)) {\n      return true;\n    } else {\n      _s = s + 1 | 0;\n      continue ;\n    }\n  };\n}\n\nfunction some(s, f, p) {\n  return someU(s, f, Curry.__1(p));\n}\n\nfunction someByU(s, f, step, p) {\n  if (step > 0) {\n    var _s = s;\n    var f$1 = f;\n    var step$1 = step;\n    var p$1 = p;\n    while(true) {\n      var s$1 = _s;\n      if (s$1 > f$1) {\n        return false;\n      } else if (p$1(s$1)) {\n        return true;\n      } else {\n        _s = s$1 + step$1 | 0;\n        continue ;\n      }\n    };\n  } else {\n    return false;\n  }\n}\n\nfunction someBy(s, f, step, p) {\n  return someByU(s, f, step, Curry.__1(p));\n}\n\nexports.forEachU = forEachU;\nexports.forEach = forEach;\nexports.everyU = everyU;\nexports.every = every;\nexports.everyByU = everyByU;\nexports.everyBy = everyBy;\nexports.someU = someU;\nexports.some = some;\nexports.someByU = someByU;\nexports.someBy = someBy;\n/* No side effect */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/belt_Range.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/block.js":
/*!**************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/block.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n\nfunction __(tag, block) {\n  block.tag = tag;\n  return block;\n}\n\nfunction record(meta, xs) {\n  return Object.defineProperty(xs, Symbol.for(\"BsRecord\"), {\n              value: meta\n            });\n}\n\nfunction variant(meta, tag, xs) {\n  xs.tag = tag;\n  return Object.defineProperty(xs, Symbol.for(\"BsVariant\"), {\n              value: meta\n            });\n}\n\nfunction simpleVariant(meta, xs) {\n  return Object.defineProperty(xs, Symbol.for(\"BsVariant\"), {\n              value: meta\n            });\n}\n\nfunction localModule(meta, xs) {\n  return Object.defineProperty(xs, Symbol.for(\"BsLocalModule\"), {\n              value: meta\n            });\n}\n\nfunction polyVar(meta, xs) {\n  return Object.defineProperty(xs, Symbol.for(\"BsPolyVar\"), {\n              value: meta\n            });\n}\n\nexports.__ = __;\nexports.record = record;\nexports.variant = variant;\nexports.simpleVariant = simpleVariant;\nexports.localModule = localModule;\nexports.polyVar = polyVar;\n/* No side effect */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/block.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/buffer.js":
/*!***************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/buffer.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Bytes = __webpack_require__(/*! ./bytes.js */ \"./node_modules/bs-platform/lib/js/bytes.js\");\nvar Curry = __webpack_require__(/*! ./curry.js */ \"./node_modules/bs-platform/lib/js/curry.js\");\nvar $$String = __webpack_require__(/*! ./string.js */ \"./node_modules/bs-platform/lib/js/string.js\");\nvar Caml_bytes = __webpack_require__(/*! ./caml_bytes.js */ \"./node_modules/bs-platform/lib/js/caml_bytes.js\");\nvar Pervasives = __webpack_require__(/*! ./pervasives.js */ \"./node_modules/bs-platform/lib/js/pervasives.js\");\nvar Caml_string = __webpack_require__(/*! ./caml_string.js */ \"./node_modules/bs-platform/lib/js/caml_string.js\");\nvar Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions.js */ \"./node_modules/bs-platform/lib/js/caml_builtin_exceptions.js\");\n\nfunction create(n) {\n  var n$1 = n < 1 ? 1 : n;\n  var s = Caml_bytes.caml_create_bytes(n$1);\n  return /* record */[\n          /* buffer */s,\n          /* position */0,\n          /* length */n$1,\n          /* initial_buffer */s\n        ];\n}\n\nfunction contents(b) {\n  return Bytes.sub_string(b[/* buffer */0], 0, b[/* position */1]);\n}\n\nfunction to_bytes(b) {\n  return Bytes.sub(b[/* buffer */0], 0, b[/* position */1]);\n}\n\nfunction sub(b, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (b[/* position */1] - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Buffer.sub\"\n        ];\n  } else {\n    return Bytes.sub_string(b[/* buffer */0], ofs, len);\n  }\n}\n\nfunction blit(src, srcoff, dst, dstoff, len) {\n  if (len < 0 || srcoff < 0 || srcoff > (src[/* position */1] - len | 0) || dstoff < 0 || dstoff > (dst.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Buffer.blit\"\n        ];\n  } else {\n    return Bytes.blit(src[/* buffer */0], srcoff, dst, dstoff, len);\n  }\n}\n\nfunction nth(b, ofs) {\n  if (ofs < 0 || ofs >= b[/* position */1]) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Buffer.nth\"\n        ];\n  } else {\n    return b[/* buffer */0][ofs];\n  }\n}\n\nfunction length(b) {\n  return b[/* position */1];\n}\n\nfunction clear(b) {\n  b[/* position */1] = 0;\n  return /* () */0;\n}\n\nfunction reset(b) {\n  b[/* position */1] = 0;\n  b[/* buffer */0] = b[/* initial_buffer */3];\n  b[/* length */2] = b[/* buffer */0].length;\n  return /* () */0;\n}\n\nfunction resize(b, more) {\n  var len = b[/* length */2];\n  var new_len = len;\n  while((b[/* position */1] + more | 0) > new_len) {\n    new_len = (new_len << 1);\n  };\n  var new_buffer = Caml_bytes.caml_create_bytes(new_len);\n  Bytes.blit(b[/* buffer */0], 0, new_buffer, 0, b[/* position */1]);\n  b[/* buffer */0] = new_buffer;\n  b[/* length */2] = new_len;\n  return /* () */0;\n}\n\nfunction add_char(b, c) {\n  var pos = b[/* position */1];\n  if (pos >= b[/* length */2]) {\n    resize(b, 1);\n  }\n  b[/* buffer */0][pos] = c;\n  b[/* position */1] = pos + 1 | 0;\n  return /* () */0;\n}\n\nfunction add_substring(b, s, offset, len) {\n  if (offset < 0 || len < 0 || (offset + len | 0) > s.length) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Buffer.add_substring/add_subbytes\"\n        ];\n  }\n  var new_position = b[/* position */1] + len | 0;\n  if (new_position > b[/* length */2]) {\n    resize(b, len);\n  }\n  Bytes.blit_string(s, offset, b[/* buffer */0], b[/* position */1], len);\n  b[/* position */1] = new_position;\n  return /* () */0;\n}\n\nfunction add_subbytes(b, s, offset, len) {\n  return add_substring(b, Caml_bytes.bytes_to_string(s), offset, len);\n}\n\nfunction add_string(b, s) {\n  var len = s.length;\n  var new_position = b[/* position */1] + len | 0;\n  if (new_position > b[/* length */2]) {\n    resize(b, len);\n  }\n  Bytes.blit_string(s, 0, b[/* buffer */0], b[/* position */1], len);\n  b[/* position */1] = new_position;\n  return /* () */0;\n}\n\nfunction add_bytes(b, s) {\n  return add_string(b, Caml_bytes.bytes_to_string(s));\n}\n\nfunction add_buffer(b, bs) {\n  return add_subbytes(b, bs[/* buffer */0], 0, bs[/* position */1]);\n}\n\nfunction add_channel(b, ic, len) {\n  if (len < 0) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Buffer.add_channel\"\n        ];\n  }\n  if ((b[/* position */1] + len | 0) > b[/* length */2]) {\n    resize(b, len);\n  }\n  Pervasives.really_input(ic, b[/* buffer */0], b[/* position */1], len);\n  b[/* position */1] = b[/* position */1] + len | 0;\n  return /* () */0;\n}\n\nfunction output_buffer(oc, b) {\n  return Pervasives.output(oc, b[/* buffer */0], 0, b[/* position */1]);\n}\n\nfunction closing(param) {\n  if (param !== 40) {\n    if (param !== 123) {\n      throw [\n            Caml_builtin_exceptions.assert_failure,\n            /* tuple */[\n              \"buffer.ml\",\n              126,\n              9\n            ]\n          ];\n    } else {\n      return /* \"}\" */125;\n    }\n  } else {\n    return /* \")\" */41;\n  }\n}\n\nfunction advance_to_closing(opening, closing, k, s, start) {\n  var _k = k;\n  var _i = start;\n  var lim = s.length;\n  while(true) {\n    var i = _i;\n    var k$1 = _k;\n    if (i >= lim) {\n      throw Caml_builtin_exceptions.not_found;\n    } else if (Caml_string.get(s, i) === opening) {\n      _i = i + 1 | 0;\n      _k = k$1 + 1 | 0;\n      continue ;\n    } else if (Caml_string.get(s, i) === closing) {\n      if (k$1 === 0) {\n        return i;\n      } else {\n        _i = i + 1 | 0;\n        _k = k$1 - 1 | 0;\n        continue ;\n      }\n    } else {\n      _i = i + 1 | 0;\n      continue ;\n    }\n  };\n}\n\nfunction advance_to_non_alpha(s, start) {\n  var _i = start;\n  var lim = s.length;\n  while(true) {\n    var i = _i;\n    if (i >= lim) {\n      return lim;\n    } else {\n      var match = Caml_string.get(s, i);\n      var exit = 0;\n      if (match >= 91) {\n        if (match >= 97) {\n          if (match >= 123) {\n            return i;\n          } else {\n            exit = 1;\n          }\n        } else if (match !== 95) {\n          return i;\n        } else {\n          exit = 1;\n        }\n      } else if (match >= 58) {\n        if (match >= 65) {\n          exit = 1;\n        } else {\n          return i;\n        }\n      } else if (match >= 48) {\n        exit = 1;\n      } else {\n        return i;\n      }\n      if (exit === 1) {\n        _i = i + 1 | 0;\n        continue ;\n      }\n      \n    }\n  };\n}\n\nfunction find_ident(s, start, lim) {\n  if (start >= lim) {\n    throw Caml_builtin_exceptions.not_found;\n  } else {\n    var c = Caml_string.get(s, start);\n    var exit = 0;\n    if (c !== 40 && c !== 123) {\n      var stop = advance_to_non_alpha(s, start + 1 | 0);\n      return /* tuple */[\n              $$String.sub(s, start, stop - start | 0),\n              stop\n            ];\n    } else {\n      exit = 1;\n    }\n    if (exit === 1) {\n      var new_start = start + 1 | 0;\n      var stop$1 = advance_to_closing(c, closing(c), 0, s, new_start);\n      return /* tuple */[\n              $$String.sub(s, new_start, (stop$1 - start | 0) - 1 | 0),\n              stop$1 + 1 | 0\n            ];\n    }\n    \n  }\n}\n\nfunction add_substitute(b, f, s) {\n  var lim = s.length;\n  var _previous = /* \" \" */32;\n  var _i = 0;\n  while(true) {\n    var i = _i;\n    var previous = _previous;\n    if (i < lim) {\n      var current = Caml_string.get(s, i);\n      if (current !== 36) {\n        if (previous === /* \"\\\\\" */92) {\n          add_char(b, /* \"\\\\\" */92);\n          add_char(b, current);\n          _i = i + 1 | 0;\n          _previous = /* \" \" */32;\n          continue ;\n        } else if (current !== 92) {\n          add_char(b, current);\n          _i = i + 1 | 0;\n          _previous = current;\n          continue ;\n        } else {\n          _i = i + 1 | 0;\n          _previous = current;\n          continue ;\n        }\n      } else if (previous === /* \"\\\\\" */92) {\n        add_char(b, current);\n        _i = i + 1 | 0;\n        _previous = /* \" \" */32;\n        continue ;\n      } else {\n        var j = i + 1 | 0;\n        var match = find_ident(s, j, lim);\n        add_string(b, Curry._1(f, match[0]));\n        _i = match[1];\n        _previous = /* \" \" */32;\n        continue ;\n      }\n    } else if (previous === /* \"\\\\\" */92) {\n      return add_char(b, previous);\n    } else {\n      return 0;\n    }\n  };\n}\n\nexports.create = create;\nexports.contents = contents;\nexports.to_bytes = to_bytes;\nexports.sub = sub;\nexports.blit = blit;\nexports.nth = nth;\nexports.length = length;\nexports.clear = clear;\nexports.reset = reset;\nexports.add_char = add_char;\nexports.add_string = add_string;\nexports.add_bytes = add_bytes;\nexports.add_substring = add_substring;\nexports.add_subbytes = add_subbytes;\nexports.add_substitute = add_substitute;\nexports.add_buffer = add_buffer;\nexports.add_channel = add_channel;\nexports.output_buffer = output_buffer;\n/* No side effect */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/buffer.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/bytes.js":
/*!**************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/bytes.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Char = __webpack_require__(/*! ./char.js */ \"./node_modules/bs-platform/lib/js/char.js\");\nvar List = __webpack_require__(/*! ./list.js */ \"./node_modules/bs-platform/lib/js/list.js\");\nvar Curry = __webpack_require__(/*! ./curry.js */ \"./node_modules/bs-platform/lib/js/curry.js\");\nvar Caml_obj = __webpack_require__(/*! ./caml_obj.js */ \"./node_modules/bs-platform/lib/js/caml_obj.js\");\nvar Caml_bytes = __webpack_require__(/*! ./caml_bytes.js */ \"./node_modules/bs-platform/lib/js/caml_bytes.js\");\nvar Caml_int32 = __webpack_require__(/*! ./caml_int32.js */ \"./node_modules/bs-platform/lib/js/caml_int32.js\");\nvar Caml_primitive = __webpack_require__(/*! ./caml_primitive.js */ \"./node_modules/bs-platform/lib/js/caml_primitive.js\");\nvar Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions.js */ \"./node_modules/bs-platform/lib/js/caml_builtin_exceptions.js\");\n\nfunction make(n, c) {\n  var s = Caml_bytes.caml_create_bytes(n);\n  Caml_bytes.caml_fill_bytes(s, 0, n, c);\n  return s;\n}\n\nfunction init(n, f) {\n  var s = Caml_bytes.caml_create_bytes(n);\n  for(var i = 0 ,i_finish = n - 1 | 0; i <= i_finish; ++i){\n    s[i] = Curry._1(f, i);\n  }\n  return s;\n}\n\nvar empty = [];\n\nfunction copy(s) {\n  var len = s.length;\n  var r = Caml_bytes.caml_create_bytes(len);\n  Caml_bytes.caml_blit_bytes(s, 0, r, 0, len);\n  return r;\n}\n\nfunction to_string(b) {\n  return Caml_bytes.bytes_to_string(copy(b));\n}\n\nfunction of_string(s) {\n  return copy(Caml_bytes.bytes_of_string(s));\n}\n\nfunction sub(s, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"String.sub / Bytes.sub\"\n        ];\n  } else {\n    var r = Caml_bytes.caml_create_bytes(len);\n    Caml_bytes.caml_blit_bytes(s, ofs, r, 0, len);\n    return r;\n  }\n}\n\nfunction sub_string(b, ofs, len) {\n  return Caml_bytes.bytes_to_string(sub(b, ofs, len));\n}\n\nfunction extend(s, left, right) {\n  var len = (s.length + left | 0) + right | 0;\n  var r = Caml_bytes.caml_create_bytes(len);\n  var match = left < 0 ? /* tuple */[\n      -left | 0,\n      0\n    ] : /* tuple */[\n      0,\n      left\n    ];\n  var dstoff = match[1];\n  var srcoff = match[0];\n  var cpylen = Caml_primitive.caml_int_min(s.length - srcoff | 0, len - dstoff | 0);\n  if (cpylen > 0) {\n    Caml_bytes.caml_blit_bytes(s, srcoff, r, dstoff, cpylen);\n  }\n  return r;\n}\n\nfunction fill(s, ofs, len, c) {\n  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"String.fill / Bytes.fill\"\n        ];\n  } else {\n    return Caml_bytes.caml_fill_bytes(s, ofs, len, c);\n  }\n}\n\nfunction blit(s1, ofs1, s2, ofs2, len) {\n  if (len < 0 || ofs1 < 0 || ofs1 > (s1.length - len | 0) || ofs2 < 0 || ofs2 > (s2.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Bytes.blit\"\n        ];\n  } else {\n    return Caml_bytes.caml_blit_bytes(s1, ofs1, s2, ofs2, len);\n  }\n}\n\nfunction blit_string(s1, ofs1, s2, ofs2, len) {\n  if (len < 0 || ofs1 < 0 || ofs1 > (s1.length - len | 0) || ofs2 < 0 || ofs2 > (s2.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"String.blit / Bytes.blit_string\"\n        ];\n  } else {\n    return Caml_bytes.caml_blit_string(s1, ofs1, s2, ofs2, len);\n  }\n}\n\nfunction iter(f, a) {\n  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){\n    Curry._1(f, a[i]);\n  }\n  return /* () */0;\n}\n\nfunction iteri(f, a) {\n  for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){\n    Curry._2(f, i, a[i]);\n  }\n  return /* () */0;\n}\n\nfunction concat(sep, l) {\n  if (l) {\n    var hd = l[0];\n    var num = /* record */[/* contents */0];\n    var len = /* record */[/* contents */0];\n    List.iter((function (s) {\n            num[0] = num[0] + 1 | 0;\n            len[0] = len[0] + s.length | 0;\n            return /* () */0;\n          }), l);\n    var r = Caml_bytes.caml_create_bytes(len[0] + Caml_int32.imul(sep.length, num[0] - 1 | 0) | 0);\n    Caml_bytes.caml_blit_bytes(hd, 0, r, 0, hd.length);\n    var pos = /* record */[/* contents */hd.length];\n    List.iter((function (s) {\n            Caml_bytes.caml_blit_bytes(sep, 0, r, pos[0], sep.length);\n            pos[0] = pos[0] + sep.length | 0;\n            Caml_bytes.caml_blit_bytes(s, 0, r, pos[0], s.length);\n            pos[0] = pos[0] + s.length | 0;\n            return /* () */0;\n          }), l[1]);\n    return r;\n  } else {\n    return empty;\n  }\n}\n\nfunction cat(s1, s2) {\n  var l1 = s1.length;\n  var l2 = s2.length;\n  var r = Caml_bytes.caml_create_bytes(l1 + l2 | 0);\n  Caml_bytes.caml_blit_bytes(s1, 0, r, 0, l1);\n  Caml_bytes.caml_blit_bytes(s2, 0, r, l1, l2);\n  return r;\n}\n\nfunction is_space(param) {\n  var switcher = param - 9 | 0;\n  if (switcher > 4 || switcher < 0) {\n    return switcher === 23;\n  } else {\n    return switcher !== 2;\n  }\n}\n\nfunction trim(s) {\n  var len = s.length;\n  var i = 0;\n  while(i < len && is_space(s[i])) {\n    i = i + 1 | 0;\n  };\n  var j = len - 1 | 0;\n  while(j >= i && is_space(s[j])) {\n    j = j - 1 | 0;\n  };\n  if (j >= i) {\n    return sub(s, i, (j - i | 0) + 1 | 0);\n  } else {\n    return empty;\n  }\n}\n\nfunction escaped(s) {\n  var n = 0;\n  for(var i = 0 ,i_finish = s.length - 1 | 0; i <= i_finish; ++i){\n    var match = s[i];\n    var tmp;\n    if (match >= 32) {\n      var switcher = match - 34 | 0;\n      tmp = switcher > 58 || switcher < 0 ? (\n          switcher >= 93 ? 4 : 1\n        ) : (\n          switcher > 57 || switcher < 1 ? 2 : 1\n        );\n    } else {\n      tmp = match >= 11 ? (\n          match !== 13 ? 4 : 2\n        ) : (\n          match >= 8 ? 2 : 4\n        );\n    }\n    n = n + tmp | 0;\n  }\n  if (n === s.length) {\n    return copy(s);\n  } else {\n    var s$prime = Caml_bytes.caml_create_bytes(n);\n    n = 0;\n    for(var i$1 = 0 ,i_finish$1 = s.length - 1 | 0; i$1 <= i_finish$1; ++i$1){\n      var c = s[i$1];\n      var exit = 0;\n      if (c >= 35) {\n        if (c !== 92) {\n          if (c >= 127) {\n            exit = 1;\n          } else {\n            s$prime[n] = c;\n          }\n        } else {\n          exit = 2;\n        }\n      } else if (c >= 32) {\n        if (c >= 34) {\n          exit = 2;\n        } else {\n          s$prime[n] = c;\n        }\n      } else if (c >= 14) {\n        exit = 1;\n      } else {\n        switch (c) {\n          case 8 : \n              s$prime[n] = /* \"\\\\\" */92;\n              n = n + 1 | 0;\n              s$prime[n] = /* \"b\" */98;\n              break;\n          case 9 : \n              s$prime[n] = /* \"\\\\\" */92;\n              n = n + 1 | 0;\n              s$prime[n] = /* \"t\" */116;\n              break;\n          case 10 : \n              s$prime[n] = /* \"\\\\\" */92;\n              n = n + 1 | 0;\n              s$prime[n] = /* \"n\" */110;\n              break;\n          case 0 : \n          case 1 : \n          case 2 : \n          case 3 : \n          case 4 : \n          case 5 : \n          case 6 : \n          case 7 : \n          case 11 : \n          case 12 : \n              exit = 1;\n              break;\n          case 13 : \n              s$prime[n] = /* \"\\\\\" */92;\n              n = n + 1 | 0;\n              s$prime[n] = /* \"r\" */114;\n              break;\n          \n        }\n      }\n      switch (exit) {\n        case 1 : \n            s$prime[n] = /* \"\\\\\" */92;\n            n = n + 1 | 0;\n            s$prime[n] = 48 + (c / 100 | 0) | 0;\n            n = n + 1 | 0;\n            s$prime[n] = 48 + (c / 10 | 0) % 10 | 0;\n            n = n + 1 | 0;\n            s$prime[n] = 48 + c % 10 | 0;\n            break;\n        case 2 : \n            s$prime[n] = /* \"\\\\\" */92;\n            n = n + 1 | 0;\n            s$prime[n] = c;\n            break;\n        \n      }\n      n = n + 1 | 0;\n    }\n    return s$prime;\n  }\n}\n\nfunction map(f, s) {\n  var l = s.length;\n  if (l === 0) {\n    return s;\n  } else {\n    var r = Caml_bytes.caml_create_bytes(l);\n    for(var i = 0 ,i_finish = l - 1 | 0; i <= i_finish; ++i){\n      r[i] = Curry._1(f, s[i]);\n    }\n    return r;\n  }\n}\n\nfunction mapi(f, s) {\n  var l = s.length;\n  if (l === 0) {\n    return s;\n  } else {\n    var r = Caml_bytes.caml_create_bytes(l);\n    for(var i = 0 ,i_finish = l - 1 | 0; i <= i_finish; ++i){\n      r[i] = Curry._2(f, i, s[i]);\n    }\n    return r;\n  }\n}\n\nfunction uppercase(s) {\n  return map(Char.uppercase, s);\n}\n\nfunction lowercase(s) {\n  return map(Char.lowercase, s);\n}\n\nfunction apply1(f, s) {\n  if (s.length === 0) {\n    return s;\n  } else {\n    var r = copy(s);\n    r[0] = Curry._1(f, s[0]);\n    return r;\n  }\n}\n\nfunction capitalize(s) {\n  return apply1(Char.uppercase, s);\n}\n\nfunction uncapitalize(s) {\n  return apply1(Char.lowercase, s);\n}\n\nfunction index_rec(s, lim, _i, c) {\n  while(true) {\n    var i = _i;\n    if (i >= lim) {\n      throw Caml_builtin_exceptions.not_found;\n    } else if (s[i] === c) {\n      return i;\n    } else {\n      _i = i + 1 | 0;\n      continue ;\n    }\n  };\n}\n\nfunction index(s, c) {\n  return index_rec(s, s.length, 0, c);\n}\n\nfunction index_from(s, i, c) {\n  var l = s.length;\n  if (i < 0 || i > l) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"String.index_from / Bytes.index_from\"\n        ];\n  } else {\n    return index_rec(s, l, i, c);\n  }\n}\n\nfunction rindex_rec(s, _i, c) {\n  while(true) {\n    var i = _i;\n    if (i < 0) {\n      throw Caml_builtin_exceptions.not_found;\n    } else if (s[i] === c) {\n      return i;\n    } else {\n      _i = i - 1 | 0;\n      continue ;\n    }\n  };\n}\n\nfunction rindex(s, c) {\n  return rindex_rec(s, s.length - 1 | 0, c);\n}\n\nfunction rindex_from(s, i, c) {\n  if (i < -1 || i >= s.length) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"String.rindex_from / Bytes.rindex_from\"\n        ];\n  } else {\n    return rindex_rec(s, i, c);\n  }\n}\n\nfunction contains_from(s, i, c) {\n  var l = s.length;\n  if (i < 0 || i > l) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"String.contains_from / Bytes.contains_from\"\n        ];\n  } else {\n    try {\n      index_rec(s, l, i, c);\n      return true;\n    }\n    catch (exn){\n      if (exn === Caml_builtin_exceptions.not_found) {\n        return false;\n      } else {\n        throw exn;\n      }\n    }\n  }\n}\n\nfunction contains(s, c) {\n  return contains_from(s, 0, c);\n}\n\nfunction rcontains_from(s, i, c) {\n  if (i < 0 || i >= s.length) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"String.rcontains_from / Bytes.rcontains_from\"\n        ];\n  } else {\n    try {\n      rindex_rec(s, i, c);\n      return true;\n    }\n    catch (exn){\n      if (exn === Caml_builtin_exceptions.not_found) {\n        return false;\n      } else {\n        throw exn;\n      }\n    }\n  }\n}\n\nvar compare = Caml_obj.caml_compare;\n\nvar unsafe_to_string = Caml_bytes.bytes_to_string;\n\nvar unsafe_of_string = Caml_bytes.bytes_of_string;\n\nexports.make = make;\nexports.init = init;\nexports.empty = empty;\nexports.copy = copy;\nexports.of_string = of_string;\nexports.to_string = to_string;\nexports.sub = sub;\nexports.sub_string = sub_string;\nexports.extend = extend;\nexports.fill = fill;\nexports.blit = blit;\nexports.blit_string = blit_string;\nexports.concat = concat;\nexports.cat = cat;\nexports.iter = iter;\nexports.iteri = iteri;\nexports.map = map;\nexports.mapi = mapi;\nexports.trim = trim;\nexports.escaped = escaped;\nexports.index = index;\nexports.rindex = rindex;\nexports.index_from = index_from;\nexports.rindex_from = rindex_from;\nexports.contains = contains;\nexports.contains_from = contains_from;\nexports.rcontains_from = rcontains_from;\nexports.uppercase = uppercase;\nexports.lowercase = lowercase;\nexports.capitalize = capitalize;\nexports.uncapitalize = uncapitalize;\nexports.compare = compare;\nexports.unsafe_to_string = unsafe_to_string;\nexports.unsafe_of_string = unsafe_of_string;\n/* No side effect */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/bytes.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/caml_array.js":
/*!*******************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/caml_array.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions.js */ \"./node_modules/bs-platform/lib/js/caml_builtin_exceptions.js\");\n\nfunction caml_array_sub(x, offset, len) {\n  var result = new Array(len);\n  var j = 0;\n  var i = offset;\n  while(j < len) {\n    result[j] = x[i];\n    j = j + 1 | 0;\n    i = i + 1 | 0;\n  };\n  return result;\n}\n\nfunction len(_acc, _l) {\n  while(true) {\n    var l = _l;\n    var acc = _acc;\n    if (l) {\n      _l = l[1];\n      _acc = l[0].length + acc | 0;\n      continue ;\n    } else {\n      return acc;\n    }\n  };\n}\n\nfunction fill(arr, _i, _l) {\n  while(true) {\n    var l = _l;\n    var i = _i;\n    if (l) {\n      var x = l[0];\n      var l$1 = x.length;\n      var k = i;\n      var j = 0;\n      while(j < l$1) {\n        arr[k] = x[j];\n        k = k + 1 | 0;\n        j = j + 1 | 0;\n      };\n      _l = l[1];\n      _i = k;\n      continue ;\n    } else {\n      return /* () */0;\n    }\n  };\n}\n\nfunction caml_array_concat(l) {\n  var v = len(0, l);\n  var result = new Array(v);\n  fill(result, 0, l);\n  return result;\n}\n\nfunction caml_array_set(xs, index, newval) {\n  if (index < 0 || index >= xs.length) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"index out of bounds\"\n        ];\n  } else {\n    xs[index] = newval;\n    return /* () */0;\n  }\n}\n\nfunction caml_array_get(xs, index) {\n  if (index < 0 || index >= xs.length) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"index out of bounds\"\n        ];\n  } else {\n    return xs[index];\n  }\n}\n\nfunction caml_make_vect(len, init) {\n  var b = new Array(len);\n  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n    b[i] = init;\n  }\n  return b;\n}\n\nfunction caml_make_float_vect(len) {\n  var b = new Array(len);\n  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n    b[i] = 0;\n  }\n  return b;\n}\n\nfunction caml_array_blit(a1, i1, a2, i2, len) {\n  if (i2 <= i1) {\n    for(var j = 0 ,j_finish = len - 1 | 0; j <= j_finish; ++j){\n      a2[j + i2 | 0] = a1[j + i1 | 0];\n    }\n    return /* () */0;\n  } else {\n    for(var j$1 = len - 1 | 0; j$1 >= 0; --j$1){\n      a2[j$1 + i2 | 0] = a1[j$1 + i1 | 0];\n    }\n    return /* () */0;\n  }\n}\n\nfunction caml_array_dup(prim) {\n  return prim.slice(0);\n}\n\nexports.caml_array_dup = caml_array_dup;\nexports.caml_array_sub = caml_array_sub;\nexports.caml_array_concat = caml_array_concat;\nexports.caml_make_vect = caml_make_vect;\nexports.caml_make_float_vect = caml_make_float_vect;\nexports.caml_array_blit = caml_array_blit;\nexports.caml_array_get = caml_array_get;\nexports.caml_array_set = caml_array_set;\n/* No side effect */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/caml_array.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/caml_builtin_exceptions.js":
/*!********************************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/caml_builtin_exceptions.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n\nvar out_of_memory = /* tuple */[\n  \"Out_of_memory\",\n  0\n];\n\nvar sys_error = /* tuple */[\n  \"Sys_error\",\n  -1\n];\n\nvar failure = /* tuple */[\n  \"Failure\",\n  -2\n];\n\nvar invalid_argument = /* tuple */[\n  \"Invalid_argument\",\n  -3\n];\n\nvar end_of_file = /* tuple */[\n  \"End_of_file\",\n  -4\n];\n\nvar division_by_zero = /* tuple */[\n  \"Division_by_zero\",\n  -5\n];\n\nvar not_found = /* tuple */[\n  \"Not_found\",\n  -6\n];\n\nvar match_failure = /* tuple */[\n  \"Match_failure\",\n  -7\n];\n\nvar stack_overflow = /* tuple */[\n  \"Stack_overflow\",\n  -8\n];\n\nvar sys_blocked_io = /* tuple */[\n  \"Sys_blocked_io\",\n  -9\n];\n\nvar assert_failure = /* tuple */[\n  \"Assert_failure\",\n  -10\n];\n\nvar undefined_recursive_module = /* tuple */[\n  \"Undefined_recursive_module\",\n  -11\n];\n\nout_of_memory.tag = 248;\n\nsys_error.tag = 248;\n\nfailure.tag = 248;\n\ninvalid_argument.tag = 248;\n\nend_of_file.tag = 248;\n\ndivision_by_zero.tag = 248;\n\nnot_found.tag = 248;\n\nmatch_failure.tag = 248;\n\nstack_overflow.tag = 248;\n\nsys_blocked_io.tag = 248;\n\nassert_failure.tag = 248;\n\nundefined_recursive_module.tag = 248;\n\nexports.out_of_memory = out_of_memory;\nexports.sys_error = sys_error;\nexports.failure = failure;\nexports.invalid_argument = invalid_argument;\nexports.end_of_file = end_of_file;\nexports.division_by_zero = division_by_zero;\nexports.not_found = not_found;\nexports.match_failure = match_failure;\nexports.stack_overflow = stack_overflow;\nexports.sys_blocked_io = sys_blocked_io;\nexports.assert_failure = assert_failure;\nexports.undefined_recursive_module = undefined_recursive_module;\n/*  Not a pure module */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/caml_builtin_exceptions.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/caml_bytes.js":
/*!*******************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/caml_bytes.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions.js */ \"./node_modules/bs-platform/lib/js/caml_builtin_exceptions.js\");\n\nfunction get(s, i) {\n  if (i < 0 || i >= s.length) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"index out of bounds\"\n        ];\n  } else {\n    return s[i];\n  }\n}\n\nfunction caml_fill_bytes(s, i, l, c) {\n  if (l > 0) {\n    for(var k = i ,k_finish = (l + i | 0) - 1 | 0; k <= k_finish; ++k){\n      s[k] = c;\n    }\n    return /* () */0;\n  } else {\n    return 0;\n  }\n}\n\nfunction caml_create_bytes(len) {\n  if (len < 0) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"String.create\"\n        ];\n  } else {\n    var result = new Array(len);\n    for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n      result[i] = /* \"\\000\" */0;\n    }\n    return result;\n  }\n}\n\nfunction caml_blit_bytes(s1, i1, s2, i2, len) {\n  if (len > 0) {\n    if (s1 === s2) {\n      var s1$1 = s1;\n      var i1$1 = i1;\n      var i2$1 = i2;\n      var len$1 = len;\n      if (i1$1 < i2$1) {\n        var range_a = (s1$1.length - i2$1 | 0) - 1 | 0;\n        var range_b = len$1 - 1 | 0;\n        var range = range_a > range_b ? range_b : range_a;\n        for(var j = range; j >= 0; --j){\n          s1$1[i2$1 + j | 0] = s1$1[i1$1 + j | 0];\n        }\n        return /* () */0;\n      } else if (i1$1 > i2$1) {\n        var range_a$1 = (s1$1.length - i1$1 | 0) - 1 | 0;\n        var range_b$1 = len$1 - 1 | 0;\n        var range$1 = range_a$1 > range_b$1 ? range_b$1 : range_a$1;\n        for(var k = 0; k <= range$1; ++k){\n          s1$1[i2$1 + k | 0] = s1$1[i1$1 + k | 0];\n        }\n        return /* () */0;\n      } else {\n        return 0;\n      }\n    } else {\n      var off1 = s1.length - i1 | 0;\n      if (len <= off1) {\n        for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n          s2[i2 + i | 0] = s1[i1 + i | 0];\n        }\n        return /* () */0;\n      } else {\n        for(var i$1 = 0 ,i_finish$1 = off1 - 1 | 0; i$1 <= i_finish$1; ++i$1){\n          s2[i2 + i$1 | 0] = s1[i1 + i$1 | 0];\n        }\n        for(var i$2 = off1 ,i_finish$2 = len - 1 | 0; i$2 <= i_finish$2; ++i$2){\n          s2[i2 + i$2 | 0] = /* \"\\000\" */0;\n        }\n        return /* () */0;\n      }\n    }\n  } else {\n    return 0;\n  }\n}\n\nfunction bytes_to_string(a) {\n  var bytes = a;\n  var i = 0;\n  var len = a.length;\n  var s = \"\";\n  var s_len = len;\n  if (i === 0 && len <= 4096 && len === bytes.length) {\n    return String.fromCharCode.apply(null, bytes);\n  } else {\n    var offset = 0;\n    while(s_len > 0) {\n      var next = s_len < 1024 ? s_len : 1024;\n      var tmp_bytes = new Array(next);\n      caml_blit_bytes(bytes, offset, tmp_bytes, 0, next);\n      s = s + String.fromCharCode.apply(null, tmp_bytes);\n      s_len = s_len - next | 0;\n      offset = offset + next | 0;\n    };\n    return s;\n  }\n}\n\nfunction caml_blit_string(s1, i1, s2, i2, len) {\n  if (len > 0) {\n    var off1 = s1.length - i1 | 0;\n    if (len <= off1) {\n      for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n        s2[i2 + i | 0] = s1.charCodeAt(i1 + i | 0);\n      }\n      return /* () */0;\n    } else {\n      for(var i$1 = 0 ,i_finish$1 = off1 - 1 | 0; i$1 <= i_finish$1; ++i$1){\n        s2[i2 + i$1 | 0] = s1.charCodeAt(i1 + i$1 | 0);\n      }\n      for(var i$2 = off1 ,i_finish$2 = len - 1 | 0; i$2 <= i_finish$2; ++i$2){\n        s2[i2 + i$2 | 0] = /* \"\\000\" */0;\n      }\n      return /* () */0;\n    }\n  } else {\n    return 0;\n  }\n}\n\nfunction bytes_of_string(s) {\n  var len = s.length;\n  var res = new Array(len);\n  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n    res[i] = s.charCodeAt(i);\n  }\n  return res;\n}\n\nexports.caml_create_bytes = caml_create_bytes;\nexports.caml_fill_bytes = caml_fill_bytes;\nexports.get = get;\nexports.bytes_to_string = bytes_to_string;\nexports.caml_blit_bytes = caml_blit_bytes;\nexports.caml_blit_string = caml_blit_string;\nexports.bytes_of_string = bytes_of_string;\n/* No side effect */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/caml_bytes.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/caml_exceptions.js":
/*!************************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/caml_exceptions.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n\nvar id = /* record */[/* contents */0];\n\nfunction caml_set_oo_id(b) {\n  b[1] = id[0];\n  id[0] += 1;\n  return b;\n}\n\nfunction caml_fresh_oo_id(param) {\n  id[0] += 1;\n  return id[0];\n}\n\nfunction create(str) {\n  var v_001 = caml_fresh_oo_id(/* () */0);\n  var v = /* tuple */[\n    str,\n    v_001\n  ];\n  v.tag = 248;\n  return v;\n}\n\nfunction caml_is_extension(e) {\n  if (e === undefined) {\n    return false;\n  } else if (e.tag === 248) {\n    return true;\n  } else {\n    var slot = e[0];\n    if (slot !== undefined) {\n      return slot.tag === 248;\n    } else {\n      return false;\n    }\n  }\n}\n\nexports.caml_set_oo_id = caml_set_oo_id;\nexports.caml_fresh_oo_id = caml_fresh_oo_id;\nexports.create = create;\nexports.caml_is_extension = caml_is_extension;\n/* No side effect */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/caml_exceptions.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/caml_format.js":
/*!********************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/caml_format.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Caml_int32 = __webpack_require__(/*! ./caml_int32.js */ \"./node_modules/bs-platform/lib/js/caml_int32.js\");\nvar Caml_int64 = __webpack_require__(/*! ./caml_int64.js */ \"./node_modules/bs-platform/lib/js/caml_int64.js\");\nvar Caml_utils = __webpack_require__(/*! ./caml_utils.js */ \"./node_modules/bs-platform/lib/js/caml_utils.js\");\nvar Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions.js */ \"./node_modules/bs-platform/lib/js/caml_builtin_exceptions.js\");\n\nfunction parse_digit(c) {\n  if (c >= 65) {\n    if (c >= 97) {\n      if (c >= 123) {\n        return -1;\n      } else {\n        return c - 87 | 0;\n      }\n    } else if (c >= 91) {\n      return -1;\n    } else {\n      return c - 55 | 0;\n    }\n  } else if (c > 57 || c < 48) {\n    return -1;\n  } else {\n    return c - /* \"0\" */48 | 0;\n  }\n}\n\nfunction int_of_string_base(param) {\n  switch (param) {\n    case 0 : \n        return 8;\n    case 1 : \n        return 16;\n    case 2 : \n        return 10;\n    case 3 : \n        return 2;\n    \n  }\n}\n\nfunction parse_sign_and_base(s) {\n  var sign = 1;\n  var base = /* Dec */2;\n  var i = 0;\n  var match = s.charCodeAt(i);\n  switch (match) {\n    case 43 : \n        i = i + 1 | 0;\n        break;\n    case 44 : \n        break;\n    case 45 : \n        sign = -1;\n        i = i + 1 | 0;\n        break;\n    default:\n      \n  }\n  if (s[i] === \"0\") {\n    var match$1 = s.charCodeAt(i + 1 | 0);\n    if (match$1 >= 89) {\n      if (match$1 >= 111) {\n        if (match$1 < 121) {\n          switch (match$1 - 111 | 0) {\n            case 0 : \n                base = /* Oct */0;\n                i = i + 2 | 0;\n                break;\n            case 6 : \n                i = i + 2 | 0;\n                break;\n            case 1 : \n            case 2 : \n            case 3 : \n            case 4 : \n            case 5 : \n            case 7 : \n            case 8 : \n                break;\n            case 9 : \n                base = /* Hex */1;\n                i = i + 2 | 0;\n                break;\n            \n          }\n        }\n        \n      } else if (match$1 === 98) {\n        base = /* Bin */3;\n        i = i + 2 | 0;\n      }\n      \n    } else if (match$1 !== 66) {\n      if (match$1 >= 79) {\n        switch (match$1 - 79 | 0) {\n          case 0 : \n              base = /* Oct */0;\n              i = i + 2 | 0;\n              break;\n          case 6 : \n              i = i + 2 | 0;\n              break;\n          case 1 : \n          case 2 : \n          case 3 : \n          case 4 : \n          case 5 : \n          case 7 : \n          case 8 : \n              break;\n          case 9 : \n              base = /* Hex */1;\n              i = i + 2 | 0;\n              break;\n          \n        }\n      }\n      \n    } else {\n      base = /* Bin */3;\n      i = i + 2 | 0;\n    }\n  }\n  return /* tuple */[\n          i,\n          sign,\n          base\n        ];\n}\n\nfunction caml_int_of_string(s) {\n  var match = parse_sign_and_base(s);\n  var i = match[0];\n  var base = int_of_string_base(match[2]);\n  var threshold = 4294967295;\n  var len = s.length;\n  var c = i < len ? s.charCodeAt(i) : /* \"\\000\" */0;\n  var d = parse_digit(c);\n  if (d < 0 || d >= base) {\n    throw [\n          Caml_builtin_exceptions.failure,\n          \"int_of_string\"\n        ];\n  }\n  var aux = function (_acc, _k) {\n    while(true) {\n      var k = _k;\n      var acc = _acc;\n      if (k === len) {\n        return acc;\n      } else {\n        var a = s.charCodeAt(k);\n        if (a === /* \"_\" */95) {\n          _k = k + 1 | 0;\n          continue ;\n        } else {\n          var v = parse_digit(a);\n          if (v < 0 || v >= base) {\n            throw [\n                  Caml_builtin_exceptions.failure,\n                  \"int_of_string\"\n                ];\n          } else {\n            var acc$1 = base * acc + v;\n            if (acc$1 > threshold) {\n              throw [\n                    Caml_builtin_exceptions.failure,\n                    \"int_of_string\"\n                  ];\n            } else {\n              _k = k + 1 | 0;\n              _acc = acc$1;\n              continue ;\n            }\n          }\n        }\n      }\n    };\n  };\n  var res = match[1] * aux(d, i + 1 | 0);\n  var or_res = res | 0;\n  if (base === 10 && res !== or_res) {\n    throw [\n          Caml_builtin_exceptions.failure,\n          \"int_of_string\"\n        ];\n  }\n  return or_res;\n}\n\nfunction caml_int64_of_string(s) {\n  var match = parse_sign_and_base(s);\n  var hbase = match[2];\n  var i = match[0];\n  var base = Caml_int64.of_int32(int_of_string_base(hbase));\n  var sign = Caml_int64.of_int32(match[1]);\n  var threshold;\n  switch (hbase) {\n    case 0 : \n        threshold = /* int64 */[\n          /* hi */536870911,\n          /* lo */4294967295\n        ];\n        break;\n    case 1 : \n        threshold = /* int64 */[\n          /* hi */268435455,\n          /* lo */4294967295\n        ];\n        break;\n    case 2 : \n        threshold = /* int64 */[\n          /* hi */429496729,\n          /* lo */2576980377\n        ];\n        break;\n    case 3 : \n        threshold = /* int64 */[\n          /* hi */2147483647,\n          /* lo */4294967295\n        ];\n        break;\n    \n  }\n  var len = s.length;\n  var c = i < len ? s.charCodeAt(i) : /* \"\\000\" */0;\n  var d = Caml_int64.of_int32(parse_digit(c));\n  if (Caml_int64.lt(d, /* int64 */[\n          /* hi */0,\n          /* lo */0\n        ]) || Caml_int64.ge(d, base)) {\n    throw [\n          Caml_builtin_exceptions.failure,\n          \"int64_of_string\"\n        ];\n  }\n  var aux = function (_acc, _k) {\n    while(true) {\n      var k = _k;\n      var acc = _acc;\n      if (k === len) {\n        return acc;\n      } else {\n        var a = s.charCodeAt(k);\n        if (a === /* \"_\" */95) {\n          _k = k + 1 | 0;\n          continue ;\n        } else {\n          var v = Caml_int64.of_int32(parse_digit(a));\n          if (Caml_int64.lt(v, /* int64 */[\n                  /* hi */0,\n                  /* lo */0\n                ]) || Caml_int64.ge(v, base) || Caml_int64.gt(acc, threshold)) {\n            throw [\n                  Caml_builtin_exceptions.failure,\n                  \"int64_of_string\"\n                ];\n          } else {\n            var acc$1 = Caml_int64.add(Caml_int64.mul(base, acc), v);\n            _k = k + 1 | 0;\n            _acc = acc$1;\n            continue ;\n          }\n        }\n      }\n    };\n  };\n  var res = Caml_int64.mul(sign, aux(d, i + 1 | 0));\n  var or_res = Caml_int64.or_(res, /* int64 */[\n        /* hi */0,\n        /* lo */0\n      ]);\n  if (Caml_int64.eq(base, /* int64 */[\n          /* hi */0,\n          /* lo */10\n        ]) && Caml_int64.neq(res, or_res)) {\n    throw [\n          Caml_builtin_exceptions.failure,\n          \"int64_of_string\"\n        ];\n  }\n  return or_res;\n}\n\nfunction int_of_base(param) {\n  switch (param) {\n    case 0 : \n        return 8;\n    case 1 : \n        return 16;\n    case 2 : \n        return 10;\n    \n  }\n}\n\nfunction lowercase(c) {\n  if (c >= /* \"A\" */65 && c <= /* \"Z\" */90 || c >= /* \"\\192\" */192 && c <= /* \"\\214\" */214 || c >= /* \"\\216\" */216 && c <= /* \"\\222\" */222) {\n    return c + 32 | 0;\n  } else {\n    return c;\n  }\n}\n\nfunction parse_format(fmt) {\n  var len = fmt.length;\n  if (len > 31) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"format_int: format too long\"\n        ];\n  }\n  var f = /* record */[\n    /* justify */\"+\",\n    /* signstyle */\"-\",\n    /* filter */\" \",\n    /* alternate */false,\n    /* base : Dec */2,\n    /* signedconv */false,\n    /* width */0,\n    /* uppercase */false,\n    /* sign */1,\n    /* prec */-1,\n    /* conv */\"f\"\n  ];\n  var _i = 0;\n  while(true) {\n    var i = _i;\n    if (i >= len) {\n      return f;\n    } else {\n      var c = fmt.charCodeAt(i);\n      var exit = 0;\n      if (c >= 69) {\n        if (c >= 88) {\n          if (c >= 121) {\n            exit = 1;\n          } else {\n            switch (c - 88 | 0) {\n              case 0 : \n                  f[/* base */4] = /* Hex */1;\n                  f[/* uppercase */7] = true;\n                  _i = i + 1 | 0;\n                  continue ;\n              case 13 : \n              case 14 : \n              case 15 : \n                  exit = 5;\n                  break;\n              case 12 : \n              case 17 : \n                  exit = 4;\n                  break;\n              case 23 : \n                  f[/* base */4] = /* Oct */0;\n                  _i = i + 1 | 0;\n                  continue ;\n              case 29 : \n                  f[/* base */4] = /* Dec */2;\n                  _i = i + 1 | 0;\n                  continue ;\n              case 1 : \n              case 2 : \n              case 3 : \n              case 4 : \n              case 5 : \n              case 6 : \n              case 7 : \n              case 8 : \n              case 9 : \n              case 10 : \n              case 11 : \n              case 16 : \n              case 18 : \n              case 19 : \n              case 20 : \n              case 21 : \n              case 22 : \n              case 24 : \n              case 25 : \n              case 26 : \n              case 27 : \n              case 28 : \n              case 30 : \n              case 31 : \n                  exit = 1;\n                  break;\n              case 32 : \n                  f[/* base */4] = /* Hex */1;\n                  _i = i + 1 | 0;\n                  continue ;\n              \n            }\n          }\n        } else if (c >= 72) {\n          exit = 1;\n        } else {\n          f[/* signedconv */5] = true;\n          f[/* uppercase */7] = true;\n          f[/* conv */10] = String.fromCharCode(lowercase(c));\n          _i = i + 1 | 0;\n          continue ;\n        }\n      } else {\n        switch (c) {\n          case 35 : \n              f[/* alternate */3] = true;\n              _i = i + 1 | 0;\n              continue ;\n          case 32 : \n          case 43 : \n              exit = 2;\n              break;\n          case 45 : \n              f[/* justify */0] = \"-\";\n              _i = i + 1 | 0;\n              continue ;\n          case 46 : \n              f[/* prec */9] = 0;\n              var j = i + 1 | 0;\n              while((function(j){\n                  return function () {\n                    var w = fmt.charCodeAt(j) - /* \"0\" */48 | 0;\n                    return w >= 0 && w <= 9;\n                  }\n                  }(j))()) {\n                f[/* prec */9] = (Caml_int32.imul(f[/* prec */9], 10) + fmt.charCodeAt(j) | 0) - /* \"0\" */48 | 0;\n                j = j + 1 | 0;\n              };\n              _i = j;\n              continue ;\n          case 33 : \n          case 34 : \n          case 36 : \n          case 37 : \n          case 38 : \n          case 39 : \n          case 40 : \n          case 41 : \n          case 42 : \n          case 44 : \n          case 47 : \n              exit = 1;\n              break;\n          case 48 : \n              f[/* filter */2] = \"0\";\n              _i = i + 1 | 0;\n              continue ;\n          case 49 : \n          case 50 : \n          case 51 : \n          case 52 : \n          case 53 : \n          case 54 : \n          case 55 : \n          case 56 : \n          case 57 : \n              exit = 3;\n              break;\n          default:\n            exit = 1;\n        }\n      }\n      switch (exit) {\n        case 1 : \n            _i = i + 1 | 0;\n            continue ;\n        case 2 : \n            f[/* signstyle */1] = String.fromCharCode(c);\n            _i = i + 1 | 0;\n            continue ;\n        case 3 : \n            f[/* width */6] = 0;\n            var j$1 = i;\n            while((function(j$1){\n                return function () {\n                  var w = fmt.charCodeAt(j$1) - /* \"0\" */48 | 0;\n                  return w >= 0 && w <= 9;\n                }\n                }(j$1))()) {\n              f[/* width */6] = (Caml_int32.imul(f[/* width */6], 10) + fmt.charCodeAt(j$1) | 0) - /* \"0\" */48 | 0;\n              j$1 = j$1 + 1 | 0;\n            };\n            _i = j$1;\n            continue ;\n        case 4 : \n            f[/* signedconv */5] = true;\n            f[/* base */4] = /* Dec */2;\n            _i = i + 1 | 0;\n            continue ;\n        case 5 : \n            f[/* signedconv */5] = true;\n            f[/* conv */10] = String.fromCharCode(c);\n            _i = i + 1 | 0;\n            continue ;\n        \n      }\n    }\n  };\n}\n\nfunction finish_formatting(config, rawbuffer) {\n  var justify = config[/* justify */0];\n  var signstyle = config[/* signstyle */1];\n  var filter = config[/* filter */2];\n  var alternate = config[/* alternate */3];\n  var base = config[/* base */4];\n  var signedconv = config[/* signedconv */5];\n  var width = config[/* width */6];\n  var uppercase = config[/* uppercase */7];\n  var sign = config[/* sign */8];\n  var len = rawbuffer.length;\n  if (signedconv && (sign < 0 || signstyle !== \"-\")) {\n    len = len + 1 | 0;\n  }\n  if (alternate) {\n    if (base === /* Oct */0) {\n      len = len + 1 | 0;\n    } else if (base === /* Hex */1) {\n      len = len + 2 | 0;\n    }\n    \n  }\n  var buffer = \"\";\n  if (justify === \"+\" && filter === \" \") {\n    for(var i = len ,i_finish = width - 1 | 0; i <= i_finish; ++i){\n      buffer = buffer + filter;\n    }\n  }\n  if (signedconv) {\n    if (sign < 0) {\n      buffer = buffer + \"-\";\n    } else if (signstyle !== \"-\") {\n      buffer = buffer + signstyle;\n    }\n    \n  }\n  if (alternate && base === /* Oct */0) {\n    buffer = buffer + \"0\";\n  }\n  if (alternate && base === /* Hex */1) {\n    buffer = buffer + \"0x\";\n  }\n  if (justify === \"+\" && filter === \"0\") {\n    for(var i$1 = len ,i_finish$1 = width - 1 | 0; i$1 <= i_finish$1; ++i$1){\n      buffer = buffer + filter;\n    }\n  }\n  buffer = uppercase ? buffer + rawbuffer.toUpperCase() : buffer + rawbuffer;\n  if (justify === \"-\") {\n    for(var i$2 = len ,i_finish$2 = width - 1 | 0; i$2 <= i_finish$2; ++i$2){\n      buffer = buffer + \" \";\n    }\n  }\n  return buffer;\n}\n\nfunction caml_format_int(fmt, i) {\n  if (fmt === \"%d\") {\n    return String(i);\n  } else {\n    var f = parse_format(fmt);\n    var f$1 = f;\n    var i$1 = i;\n    var i$2 = i$1 < 0 ? (\n        f$1[/* signedconv */5] ? (f$1[/* sign */8] = -1, -i$1) : (i$1 >>> 0)\n      ) : i$1;\n    var s = i$2.toString(int_of_base(f$1[/* base */4]));\n    if (f$1[/* prec */9] >= 0) {\n      f$1[/* filter */2] = \" \";\n      var n = f$1[/* prec */9] - s.length | 0;\n      if (n > 0) {\n        s = Caml_utils.repeat(n, \"0\") + s;\n      }\n      \n    }\n    return finish_formatting(f$1, s);\n  }\n}\n\nfunction caml_int64_format(fmt, x) {\n  var f = parse_format(fmt);\n  var x$1 = f[/* signedconv */5] && Caml_int64.lt(x, /* int64 */[\n        /* hi */0,\n        /* lo */0\n      ]) ? (f[/* sign */8] = -1, Caml_int64.neg(x)) : x;\n  var s = \"\";\n  var match = f[/* base */4];\n  switch (match) {\n    case 0 : \n        var wbase = /* int64 */[\n          /* hi */0,\n          /* lo */8\n        ];\n        var cvtbl = \"01234567\";\n        if (Caml_int64.lt(x$1, /* int64 */[\n                /* hi */0,\n                /* lo */0\n              ])) {\n          var y = Caml_int64.discard_sign(x$1);\n          var match$1 = Caml_int64.div_mod(y, wbase);\n          var quotient = Caml_int64.add(/* int64 */[\n                /* hi */268435456,\n                /* lo */0\n              ], match$1[0]);\n          var modulus = match$1[1];\n          s = String.fromCharCode(cvtbl.charCodeAt(modulus[1] | 0)) + s;\n          while(Caml_int64.neq(quotient, /* int64 */[\n                  /* hi */0,\n                  /* lo */0\n                ])) {\n            var match$2 = Caml_int64.div_mod(quotient, wbase);\n            quotient = match$2[0];\n            modulus = match$2[1];\n            s = String.fromCharCode(cvtbl.charCodeAt(modulus[1] | 0)) + s;\n          };\n        } else {\n          var match$3 = Caml_int64.div_mod(x$1, wbase);\n          var quotient$1 = match$3[0];\n          var modulus$1 = match$3[1];\n          s = String.fromCharCode(cvtbl.charCodeAt(modulus$1[1] | 0)) + s;\n          while(Caml_int64.neq(quotient$1, /* int64 */[\n                  /* hi */0,\n                  /* lo */0\n                ])) {\n            var match$4 = Caml_int64.div_mod(quotient$1, wbase);\n            quotient$1 = match$4[0];\n            modulus$1 = match$4[1];\n            s = String.fromCharCode(cvtbl.charCodeAt(modulus$1[1] | 0)) + s;\n          };\n        }\n        break;\n    case 1 : \n        s = Caml_int64.to_hex(x$1) + s;\n        break;\n    case 2 : \n        var wbase$1 = /* int64 */[\n          /* hi */0,\n          /* lo */10\n        ];\n        var cvtbl$1 = \"0123456789\";\n        if (Caml_int64.lt(x$1, /* int64 */[\n                /* hi */0,\n                /* lo */0\n              ])) {\n          var y$1 = Caml_int64.discard_sign(x$1);\n          var match$5 = Caml_int64.div_mod(y$1, wbase$1);\n          var match$6 = Caml_int64.div_mod(Caml_int64.add(/* int64 */[\n                    /* hi */0,\n                    /* lo */8\n                  ], match$5[1]), wbase$1);\n          var quotient$2 = Caml_int64.add(Caml_int64.add(/* int64 */[\n                    /* hi */214748364,\n                    /* lo */3435973836\n                  ], match$5[0]), match$6[0]);\n          var modulus$2 = match$6[1];\n          s = String.fromCharCode(cvtbl$1.charCodeAt(modulus$2[1] | 0)) + s;\n          while(Caml_int64.neq(quotient$2, /* int64 */[\n                  /* hi */0,\n                  /* lo */0\n                ])) {\n            var match$7 = Caml_int64.div_mod(quotient$2, wbase$1);\n            quotient$2 = match$7[0];\n            modulus$2 = match$7[1];\n            s = String.fromCharCode(cvtbl$1.charCodeAt(modulus$2[1] | 0)) + s;\n          };\n        } else {\n          var match$8 = Caml_int64.div_mod(x$1, wbase$1);\n          var quotient$3 = match$8[0];\n          var modulus$3 = match$8[1];\n          s = String.fromCharCode(cvtbl$1.charCodeAt(modulus$3[1] | 0)) + s;\n          while(Caml_int64.neq(quotient$3, /* int64 */[\n                  /* hi */0,\n                  /* lo */0\n                ])) {\n            var match$9 = Caml_int64.div_mod(quotient$3, wbase$1);\n            quotient$3 = match$9[0];\n            modulus$3 = match$9[1];\n            s = String.fromCharCode(cvtbl$1.charCodeAt(modulus$3[1] | 0)) + s;\n          };\n        }\n        break;\n    \n  }\n  if (f[/* prec */9] >= 0) {\n    f[/* filter */2] = \" \";\n    var n = f[/* prec */9] - s.length | 0;\n    if (n > 0) {\n      s = Caml_utils.repeat(n, \"0\") + s;\n    }\n    \n  }\n  return finish_formatting(f, s);\n}\n\nfunction caml_format_float(fmt, x) {\n  var f = parse_format(fmt);\n  var prec = f[/* prec */9] < 0 ? 6 : f[/* prec */9];\n  var x$1 = x < 0 ? (f[/* sign */8] = -1, -x) : x;\n  var s = \"\";\n  if (isNaN(x$1)) {\n    s = \"nan\";\n    f[/* filter */2] = \" \";\n  } else if (isFinite(x$1)) {\n    var match = f[/* conv */10];\n    switch (match) {\n      case \"e\" : \n          s = x$1.toExponential(prec);\n          var i = s.length;\n          if (s[i - 3 | 0] === \"e\") {\n            s = s.slice(0, i - 1 | 0) + (\"0\" + s.slice(i - 1 | 0));\n          }\n          break;\n      case \"f\" : \n          s = x$1.toFixed(prec);\n          break;\n      case \"g\" : \n          var prec$1 = prec !== 0 ? prec : 1;\n          s = x$1.toExponential(prec$1 - 1 | 0);\n          var j = s.indexOf(\"e\");\n          var exp = Number(s.slice(j + 1 | 0)) | 0;\n          if (exp < -4 || x$1 >= 1e21 || x$1.toFixed().length > prec$1) {\n            var i$1 = j - 1 | 0;\n            while(s[i$1] === \"0\") {\n              i$1 = i$1 - 1 | 0;\n            };\n            if (s[i$1] === \".\") {\n              i$1 = i$1 - 1 | 0;\n            }\n            s = s.slice(0, i$1 + 1 | 0) + s.slice(j);\n            var i$2 = s.length;\n            if (s[i$2 - 3 | 0] === \"e\") {\n              s = s.slice(0, i$2 - 1 | 0) + (\"0\" + s.slice(i$2 - 1 | 0));\n            }\n            \n          } else {\n            var p = prec$1;\n            if (exp < 0) {\n              p = p - (exp + 1 | 0) | 0;\n              s = x$1.toFixed(p);\n            } else {\n              while((function () {\n                      s = x$1.toFixed(p);\n                      return s.length > (prec$1 + 1 | 0);\n                    })()) {\n                p = p - 1 | 0;\n              };\n            }\n            if (p !== 0) {\n              var k = s.length - 1 | 0;\n              while(s[k] === \"0\") {\n                k = k - 1 | 0;\n              };\n              if (s[k] === \".\") {\n                k = k - 1 | 0;\n              }\n              s = s.slice(0, k + 1 | 0);\n            }\n            \n          }\n          break;\n      default:\n        \n    }\n  } else {\n    s = \"inf\";\n    f[/* filter */2] = \" \";\n  }\n  return finish_formatting(f, s);\n}\n\nfunction float_of_string (s,exn){ \n\n    var res = +s;\n    if ((s.length > 0) && (res === res))\n        return res;\n    s = s.replace(/_/g, \"\");\n    res = +s;\n    if (((s.length > 0) && (res === res)) || /^[+-]?nan$/i.test(s)) {\n        return res;\n    };\n    if (/^\\+?inf(inity)?$/i.test(s))\n        return Infinity;\n    if (/^-inf(inity)?$/i.test(s))\n        return -Infinity;\n    throw exn;\n\n};\n\nfunction caml_float_of_string(s) {\n  return float_of_string(s, [\n              Caml_builtin_exceptions.failure,\n              \"float_of_string\"\n            ]);\n}\n\nvar caml_nativeint_format = caml_format_int;\n\nvar caml_int32_format = caml_format_int;\n\nvar caml_int32_of_string = caml_int_of_string;\n\nvar caml_nativeint_of_string = caml_int_of_string;\n\nexports.caml_format_float = caml_format_float;\nexports.caml_format_int = caml_format_int;\nexports.caml_nativeint_format = caml_nativeint_format;\nexports.caml_int32_format = caml_int32_format;\nexports.caml_float_of_string = caml_float_of_string;\nexports.caml_int64_format = caml_int64_format;\nexports.caml_int_of_string = caml_int_of_string;\nexports.caml_int32_of_string = caml_int32_of_string;\nexports.caml_int64_of_string = caml_int64_of_string;\nexports.caml_nativeint_of_string = caml_nativeint_of_string;\n/* No side effect */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/caml_format.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/caml_int32.js":
/*!*******************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/caml_int32.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions.js */ \"./node_modules/bs-platform/lib/js/caml_builtin_exceptions.js\");\n\nfunction div(x, y) {\n  if (y === 0) {\n    throw Caml_builtin_exceptions.division_by_zero;\n  } else {\n    return x / y | 0;\n  }\n}\n\nfunction mod_(x, y) {\n  if (y === 0) {\n    throw Caml_builtin_exceptions.division_by_zero;\n  } else {\n    return x % y;\n  }\n}\n\nfunction caml_bswap16(x) {\n  return ((x & 255) << 8) | ((x & 65280) >>> 8);\n}\n\nfunction caml_int32_bswap(x) {\n  return ((x & 255) << 24) | ((x & 65280) << 8) | ((x & 16711680) >>> 8) | ((x & 4278190080) >>> 24);\n}\n\nvar imul = ( Math.imul || function (x,y) {\n  y |= 0; return ((((x >> 16) * y) << 16) + (x & 0xffff) * y)|0; \n}\n);\n\nvar caml_nativeint_bswap = caml_int32_bswap;\n\nexports.div = div;\nexports.mod_ = mod_;\nexports.caml_bswap16 = caml_bswap16;\nexports.caml_int32_bswap = caml_int32_bswap;\nexports.caml_nativeint_bswap = caml_nativeint_bswap;\nexports.imul = imul;\n/* imul Not a pure module */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/caml_int32.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/caml_int64.js":
/*!*******************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/caml_int64.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Caml_int32 = __webpack_require__(/*! ./caml_int32.js */ \"./node_modules/bs-platform/lib/js/caml_int32.js\");\nvar Caml_utils = __webpack_require__(/*! ./caml_utils.js */ \"./node_modules/bs-platform/lib/js/caml_utils.js\");\nvar Caml_primitive = __webpack_require__(/*! ./caml_primitive.js */ \"./node_modules/bs-platform/lib/js/caml_primitive.js\");\nvar Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions.js */ \"./node_modules/bs-platform/lib/js/caml_builtin_exceptions.js\");\n\nvar min_int = /* record */[\n  /* hi */-2147483648,\n  /* lo */0\n];\n\nvar max_int = /* record */[\n  /* hi */2147483647,\n  /* lo */1\n];\n\nvar one = /* record */[\n  /* hi */0,\n  /* lo */1\n];\n\nvar zero = /* record */[\n  /* hi */0,\n  /* lo */0\n];\n\nvar neg_one = /* record */[\n  /* hi */-1,\n  /* lo */4294967295\n];\n\nfunction neg_signed(x) {\n  return (x & 2147483648) !== 0;\n}\n\nfunction add(param, param$1) {\n  var other_low_ = param$1[/* lo */1];\n  var this_low_ = param[/* lo */1];\n  var lo = this_low_ + other_low_ & 4294967295;\n  var overflow = neg_signed(this_low_) && (neg_signed(other_low_) || !neg_signed(lo)) || neg_signed(other_low_) && !neg_signed(lo) ? 1 : 0;\n  var hi = param[/* hi */0] + param$1[/* hi */0] + overflow & 4294967295;\n  return /* record */[\n          /* hi */hi,\n          /* lo */(lo >>> 0)\n        ];\n}\n\nfunction not(param) {\n  var hi = param[/* hi */0] ^ -1;\n  var lo = param[/* lo */1] ^ -1;\n  return /* record */[\n          /* hi */hi,\n          /* lo */(lo >>> 0)\n        ];\n}\n\nfunction eq(x, y) {\n  if (x[/* hi */0] === y[/* hi */0]) {\n    return x[/* lo */1] === y[/* lo */1];\n  } else {\n    return false;\n  }\n}\n\nfunction equal_null(x, y) {\n  if (y !== null) {\n    return eq(x, y);\n  } else {\n    return false;\n  }\n}\n\nfunction equal_undefined(x, y) {\n  if (y !== undefined) {\n    return eq(x, y);\n  } else {\n    return false;\n  }\n}\n\nfunction equal_nullable(x, y) {\n  if (y == null) {\n    return false;\n  } else {\n    return eq(x, y);\n  }\n}\n\nfunction neg(x) {\n  if (eq(x, min_int)) {\n    return min_int;\n  } else {\n    return add(not(x), one);\n  }\n}\n\nfunction sub(x, y) {\n  return add(x, neg(y));\n}\n\nfunction lsl_(x, numBits) {\n  if (numBits === 0) {\n    return x;\n  } else {\n    var lo = x[/* lo */1];\n    if (numBits >= 32) {\n      return /* record */[\n              /* hi */(lo << (numBits - 32 | 0)),\n              /* lo */0\n            ];\n    } else {\n      var hi = (lo >>> (32 - numBits | 0)) | (x[/* hi */0] << numBits);\n      return /* record */[\n              /* hi */hi,\n              /* lo */((lo << numBits) >>> 0)\n            ];\n    }\n  }\n}\n\nfunction lsr_(x, numBits) {\n  if (numBits === 0) {\n    return x;\n  } else {\n    var hi = x[/* hi */0];\n    var offset = numBits - 32 | 0;\n    if (offset === 0) {\n      return /* record */[\n              /* hi */0,\n              /* lo */(hi >>> 0)\n            ];\n    } else if (offset > 0) {\n      var lo = (hi >>> offset);\n      return /* record */[\n              /* hi */0,\n              /* lo */(lo >>> 0)\n            ];\n    } else {\n      var hi$1 = (hi >>> numBits);\n      var lo$1 = (hi << (-offset | 0)) | (x[/* lo */1] >>> numBits);\n      return /* record */[\n              /* hi */hi$1,\n              /* lo */(lo$1 >>> 0)\n            ];\n    }\n  }\n}\n\nfunction asr_(x, numBits) {\n  if (numBits === 0) {\n    return x;\n  } else {\n    var hi = x[/* hi */0];\n    if (numBits < 32) {\n      var hi$1 = (hi >> numBits);\n      var lo = (hi << (32 - numBits | 0)) | (x[/* lo */1] >>> numBits);\n      return /* record */[\n              /* hi */hi$1,\n              /* lo */(lo >>> 0)\n            ];\n    } else {\n      var lo$1 = (hi >> (numBits - 32 | 0));\n      return /* record */[\n              /* hi */hi >= 0 ? 0 : -1,\n              /* lo */(lo$1 >>> 0)\n            ];\n    }\n  }\n}\n\nfunction is_zero(param) {\n  if (param[/* hi */0] !== 0 || param[/* lo */1] !== 0) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nfunction mul(_this, _other) {\n  while(true) {\n    var other = _other;\n    var $$this = _this;\n    var exit = 0;\n    var lo;\n    var this_hi = $$this[/* hi */0];\n    var exit$1 = 0;\n    var exit$2 = 0;\n    var exit$3 = 0;\n    if (this_hi !== 0 || $$this[/* lo */1] !== 0) {\n      exit$3 = 4;\n    } else {\n      return zero;\n    }\n    if (exit$3 === 4) {\n      if (other[/* hi */0] !== 0 || other[/* lo */1] !== 0) {\n        exit$2 = 3;\n      } else {\n        return zero;\n      }\n    }\n    if (exit$2 === 3) {\n      if (this_hi !== -2147483648 || $$this[/* lo */1] !== 0) {\n        exit$1 = 2;\n      } else {\n        lo = other[/* lo */1];\n        exit = 1;\n      }\n    }\n    if (exit$1 === 2) {\n      var other_hi = other[/* hi */0];\n      var lo$1 = $$this[/* lo */1];\n      var exit$4 = 0;\n      if (other_hi !== -2147483648 || other[/* lo */1] !== 0) {\n        exit$4 = 3;\n      } else {\n        lo = lo$1;\n        exit = 1;\n      }\n      if (exit$4 === 3) {\n        var other_lo = other[/* lo */1];\n        if (this_hi < 0) {\n          if (other_hi < 0) {\n            _other = neg(other);\n            _this = neg($$this);\n            continue ;\n          } else {\n            return neg(mul(neg($$this), other));\n          }\n        } else if (other_hi < 0) {\n          return neg(mul($$this, neg(other)));\n        } else {\n          var a48 = (this_hi >>> 16);\n          var a32 = this_hi & 65535;\n          var a16 = (lo$1 >>> 16);\n          var a00 = lo$1 & 65535;\n          var b48 = (other_hi >>> 16);\n          var b32 = other_hi & 65535;\n          var b16 = (other_lo >>> 16);\n          var b00 = other_lo & 65535;\n          var c48 = 0;\n          var c32 = 0;\n          var c16 = 0;\n          var c00 = a00 * b00;\n          c16 = (c00 >>> 16) + a16 * b00;\n          c32 = (c16 >>> 16);\n          c16 = (c16 & 65535) + a00 * b16;\n          c32 = c32 + (c16 >>> 16) + a32 * b00;\n          c48 = (c32 >>> 16);\n          c32 = (c32 & 65535) + a16 * b16;\n          c48 += (c32 >>> 16);\n          c32 = (c32 & 65535) + a00 * b32;\n          c48 += (c32 >>> 16);\n          c32 = c32 & 65535;\n          c48 = c48 + (a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48) & 65535;\n          var hi = c32 | (c48 << 16);\n          var lo$2 = c00 & 65535 | ((c16 & 65535) << 16);\n          return /* record */[\n                  /* hi */hi,\n                  /* lo */(lo$2 >>> 0)\n                ];\n        }\n      }\n      \n    }\n    if (exit === 1) {\n      if ((lo & 1) === 0) {\n        return zero;\n      } else {\n        return min_int;\n      }\n    }\n    \n  };\n}\n\nfunction swap(param) {\n  var hi = Caml_int32.caml_int32_bswap(param[/* lo */1]);\n  var lo = Caml_int32.caml_int32_bswap(param[/* hi */0]);\n  return /* record */[\n          /* hi */hi,\n          /* lo */(lo >>> 0)\n        ];\n}\n\nfunction xor(param, param$1) {\n  return /* record */[\n          /* hi */param[/* hi */0] ^ param$1[/* hi */0],\n          /* lo */((param[/* lo */1] ^ param$1[/* lo */1]) >>> 0)\n        ];\n}\n\nfunction or_(param, param$1) {\n  return /* record */[\n          /* hi */param[/* hi */0] | param$1[/* hi */0],\n          /* lo */((param[/* lo */1] | param$1[/* lo */1]) >>> 0)\n        ];\n}\n\nfunction and_(param, param$1) {\n  return /* record */[\n          /* hi */param[/* hi */0] & param$1[/* hi */0],\n          /* lo */((param[/* lo */1] & param$1[/* lo */1]) >>> 0)\n        ];\n}\n\nfunction ge(param, param$1) {\n  var other_hi = param$1[/* hi */0];\n  var hi = param[/* hi */0];\n  if (hi > other_hi) {\n    return true;\n  } else if (hi < other_hi) {\n    return false;\n  } else {\n    return param[/* lo */1] >= param$1[/* lo */1];\n  }\n}\n\nfunction neq(x, y) {\n  return !eq(x, y);\n}\n\nfunction lt(x, y) {\n  return !ge(x, y);\n}\n\nfunction gt(x, y) {\n  if (x[/* hi */0] > y[/* hi */0]) {\n    return true;\n  } else if (x[/* hi */0] < y[/* hi */0]) {\n    return false;\n  } else {\n    return x[/* lo */1] > y[/* lo */1];\n  }\n}\n\nfunction le(x, y) {\n  return !gt(x, y);\n}\n\nfunction min(x, y) {\n  if (ge(x, y)) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nfunction max(x, y) {\n  if (gt(x, y)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction to_float(param) {\n  return param[/* hi */0] * (0x100000000) + param[/* lo */1];\n}\n\nfunction of_float(x) {\n  if (isNaN(x) || !isFinite(x)) {\n    return zero;\n  } else if (x <= -9.22337203685477581e+18) {\n    return min_int;\n  } else if (x + 1 >= 9.22337203685477581e+18) {\n    return max_int;\n  } else if (x < 0) {\n    return neg(of_float(-x));\n  } else {\n    var hi = x / 4294967296 | 0;\n    var lo = x % 4294967296 | 0;\n    return /* record */[\n            /* hi */hi,\n            /* lo */(lo >>> 0)\n          ];\n  }\n}\n\nfunction div(_self, _other) {\n  while(true) {\n    var other = _other;\n    var self = _self;\n    var self_hi = self[/* hi */0];\n    var exit = 0;\n    var exit$1 = 0;\n    if (other[/* hi */0] !== 0 || other[/* lo */1] !== 0) {\n      exit$1 = 2;\n    } else {\n      throw Caml_builtin_exceptions.division_by_zero;\n    }\n    if (exit$1 === 2) {\n      if (self_hi !== -2147483648) {\n        if (self_hi !== 0 || self[/* lo */1] !== 0) {\n          exit = 1;\n        } else {\n          return zero;\n        }\n      } else if (self[/* lo */1] !== 0) {\n        exit = 1;\n      } else if (eq(other, one) || eq(other, neg_one)) {\n        return self;\n      } else if (eq(other, min_int)) {\n        return one;\n      } else {\n        var other_hi = other[/* hi */0];\n        var half_this = asr_(self, 1);\n        var approx = lsl_(div(half_this, other), 1);\n        var exit$2 = 0;\n        if (approx[/* hi */0] !== 0 || approx[/* lo */1] !== 0) {\n          exit$2 = 3;\n        } else if (other_hi < 0) {\n          return one;\n        } else {\n          return neg(one);\n        }\n        if (exit$2 === 3) {\n          var y = mul(other, approx);\n          var rem = add(self, neg(y));\n          return add(approx, div(rem, other));\n        }\n        \n      }\n    }\n    if (exit === 1) {\n      var other_hi$1 = other[/* hi */0];\n      var exit$3 = 0;\n      if (other_hi$1 !== -2147483648 || other[/* lo */1] !== 0) {\n        exit$3 = 2;\n      } else {\n        return zero;\n      }\n      if (exit$3 === 2) {\n        if (self_hi < 0) {\n          if (other_hi$1 < 0) {\n            _other = neg(other);\n            _self = neg(self);\n            continue ;\n          } else {\n            return neg(div(neg(self), other));\n          }\n        } else if (other_hi$1 < 0) {\n          return neg(div(self, neg(other)));\n        } else {\n          var res = zero;\n          var rem$1 = self;\n          while(ge(rem$1, other)) {\n            var approx$1 = Caml_primitive.caml_float_max(1, Math.floor(to_float(rem$1) / to_float(other)));\n            var log2 = Math.ceil(Math.log(approx$1) / Math.LN2);\n            var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);\n            var approxRes = of_float(approx$1);\n            var approxRem = mul(approxRes, other);\n            while(approxRem[/* hi */0] < 0 || gt(approxRem, rem$1)) {\n              approx$1 -= delta;\n              approxRes = of_float(approx$1);\n              approxRem = mul(approxRes, other);\n            };\n            if (is_zero(approxRes)) {\n              approxRes = one;\n            }\n            res = add(res, approxRes);\n            rem$1 = add(rem$1, neg(approxRem));\n          };\n          return res;\n        }\n      }\n      \n    }\n    \n  };\n}\n\nfunction mod_(self, other) {\n  var y = mul(div(self, other), other);\n  return add(self, neg(y));\n}\n\nfunction div_mod(self, other) {\n  var quotient = div(self, other);\n  var y = mul(quotient, other);\n  return /* tuple */[\n          quotient,\n          add(self, neg(y))\n        ];\n}\n\nfunction compare(self, other) {\n  var v = Caml_primitive.caml_nativeint_compare(self[/* hi */0], other[/* hi */0]);\n  if (v === 0) {\n    return Caml_primitive.caml_nativeint_compare(self[/* lo */1], other[/* lo */1]);\n  } else {\n    return v;\n  }\n}\n\nfunction of_int32(lo) {\n  return /* record */[\n          /* hi */lo < 0 ? -1 : 0,\n          /* lo */(lo >>> 0)\n        ];\n}\n\nfunction to_int32(x) {\n  return x[/* lo */1] | 0;\n}\n\nfunction to_hex(x) {\n  var x_lo = x[/* lo */1];\n  var x_hi = x[/* hi */0];\n  var aux = function (v) {\n    return (v >>> 0).toString(16);\n  };\n  var exit = 0;\n  if (x_hi !== 0 || x_lo !== 0) {\n    exit = 1;\n  } else {\n    return \"0\";\n  }\n  if (exit === 1) {\n    if (x_lo !== 0) {\n      if (x_hi !== 0) {\n        var lo = aux(x_lo);\n        var pad = 8 - lo.length | 0;\n        if (pad <= 0) {\n          return aux(x_hi) + lo;\n        } else {\n          return aux(x_hi) + (Caml_utils.repeat(pad, \"0\") + lo);\n        }\n      } else {\n        return aux(x_lo);\n      }\n    } else {\n      return aux(x_hi) + \"00000000\";\n    }\n  }\n  \n}\n\nfunction discard_sign(x) {\n  return /* record */[\n          /* hi */2147483647 & x[/* hi */0],\n          /* lo */x[/* lo */1]\n        ];\n}\n\nfunction float_of_bits (x){ \n  return new Float64Array(new Int32Array([x[1],x[0]]).buffer)[0]\n};\n\nfunction bits_of_float(x) {\n  var buf = (new Int32Array(new Float64Array([x]).buffer));\n  return /* record */[\n          /* hi */buf[1],\n          /* lo */(buf[0] >>> 0)\n        ];\n}\n\nfunction get64(s, i) {\n  var hi = (s.charCodeAt(i + 4 | 0) << 32) | (s.charCodeAt(i + 5 | 0) << 40) | (s.charCodeAt(i + 6 | 0) << 48) | (s.charCodeAt(i + 7 | 0) << 56);\n  var lo = s.charCodeAt(i) | (s.charCodeAt(i + 1 | 0) << 8) | (s.charCodeAt(i + 2 | 0) << 16) | (s.charCodeAt(i + 3 | 0) << 24);\n  return /* record */[\n          /* hi */hi,\n          /* lo */(lo >>> 0)\n        ];\n}\n\nexports.min_int = min_int;\nexports.max_int = max_int;\nexports.one = one;\nexports.zero = zero;\nexports.not = not;\nexports.of_int32 = of_int32;\nexports.to_int32 = to_int32;\nexports.add = add;\nexports.neg = neg;\nexports.sub = sub;\nexports.lsl_ = lsl_;\nexports.lsr_ = lsr_;\nexports.asr_ = asr_;\nexports.is_zero = is_zero;\nexports.mul = mul;\nexports.xor = xor;\nexports.or_ = or_;\nexports.and_ = and_;\nexports.swap = swap;\nexports.ge = ge;\nexports.eq = eq;\nexports.neq = neq;\nexports.lt = lt;\nexports.gt = gt;\nexports.le = le;\nexports.equal_null = equal_null;\nexports.equal_undefined = equal_undefined;\nexports.equal_nullable = equal_nullable;\nexports.min = min;\nexports.max = max;\nexports.to_float = to_float;\nexports.of_float = of_float;\nexports.div = div;\nexports.mod_ = mod_;\nexports.compare = compare;\nexports.float_of_bits = float_of_bits;\nexports.bits_of_float = bits_of_float;\nexports.get64 = get64;\nexports.div_mod = div_mod;\nexports.to_hex = to_hex;\nexports.discard_sign = discard_sign;\n/* Caml_int32 Not a pure module */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/caml_int64.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/caml_io.js":
/*!****************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/caml_io.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\n\nvar Curry = __webpack_require__(/*! ./curry.js */ \"./node_modules/bs-platform/lib/js/curry.js\");\n\nvar stdout = /* record */[\n  /* buffer */\"\",\n  /* output */(function (param, s) {\n      var v = s.length - 1 | 0;\n      if (( (typeof process !== \"undefined\") && process.stdout && process.stdout.write)) {\n        return ( process.stdout.write )(s);\n      } else if (s[v] === \"\\n\") {\n        console.log(s.slice(0, v));\n        return /* () */0;\n      } else {\n        console.log(s);\n        return /* () */0;\n      }\n    })\n];\n\nvar stderr = /* record */[\n  /* buffer */\"\",\n  /* output */(function (param, s) {\n      var v = s.length - 1 | 0;\n      if (s[v] === \"\\n\") {\n        console.log(s.slice(0, v));\n        return /* () */0;\n      } else {\n        console.log(s);\n        return /* () */0;\n      }\n    })\n];\n\nfunction caml_ml_flush(oc) {\n  if (oc[/* buffer */0] !== \"\") {\n    Curry._2(oc[/* output */1], oc, oc[/* buffer */0]);\n    oc[/* buffer */0] = \"\";\n    return /* () */0;\n  } else {\n    return 0;\n  }\n}\n\nfunction caml_ml_output(oc, str, offset, len) {\n  var str$1 = offset === 0 && len === str.length ? str : str.slice(offset, len);\n  if (( (typeof process !== \"undefined\") && process.stdout && process.stdout.write ) && oc === stdout) {\n    return ( process.stdout.write )(str$1);\n  } else {\n    var id = str$1.lastIndexOf(\"\\n\");\n    if (id < 0) {\n      oc[/* buffer */0] = oc[/* buffer */0] + str$1;\n      return /* () */0;\n    } else {\n      oc[/* buffer */0] = oc[/* buffer */0] + str$1.slice(0, id + 1 | 0);\n      caml_ml_flush(oc);\n      oc[/* buffer */0] = oc[/* buffer */0] + str$1.slice(id + 1 | 0);\n      return /* () */0;\n    }\n  }\n}\n\nfunction caml_ml_output_char(oc, $$char) {\n  return caml_ml_output(oc, String.fromCharCode($$char), 0, 1);\n}\n\nfunction caml_ml_out_channels_list(param) {\n  return /* :: */[\n          stdout,\n          /* :: */[\n            stderr,\n            /* [] */0\n          ]\n        ];\n}\n\nvar stdin = undefined;\n\nexports.stdin = stdin;\nexports.stdout = stdout;\nexports.stderr = stderr;\nexports.caml_ml_flush = caml_ml_flush;\nexports.caml_ml_output = caml_ml_output;\nexports.caml_ml_output_char = caml_ml_output_char;\nexports.caml_ml_out_channels_list = caml_ml_out_channels_list;\n/* No side effect */\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/caml_io.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/caml_js_exceptions.js":
/*!***************************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/caml_js_exceptions.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Caml_option = __webpack_require__(/*! ./caml_option.js */ \"./node_modules/bs-platform/lib/js/caml_option.js\");\nvar Caml_exceptions = __webpack_require__(/*! ./caml_exceptions.js */ \"./node_modules/bs-platform/lib/js/caml_exceptions.js\");\n\nvar $$Error = Caml_exceptions.create(\"Caml_js_exceptions.Error\");\n\nfunction internalToOCamlException(e) {\n  if (Caml_exceptions.caml_is_extension(e)) {\n    return e;\n  } else {\n    return [\n            $$Error,\n            e\n          ];\n  }\n}\n\nfunction caml_as_js_exn(exn) {\n  if (exn[0] === $$Error) {\n    return Caml_option.some(exn[1]);\n  }\n  \n}\n\nexports.$$Error = $$Error;\nexports.internalToOCamlException = internalToOCamlException;\nexports.caml_as_js_exn = caml_as_js_exn;\n/* No side effect */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/caml_js_exceptions.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/caml_missing_polyfill.js":
/*!******************************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/caml_missing_polyfill.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n\nfunction not_implemented (s){\n  throw new Error(s + \" not implemented by BuckleScript yet\\n\")\n};\n\nexports.not_implemented = not_implemented;\n/* No side effect */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/caml_missing_polyfill.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/caml_obj.js":
/*!*****************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/caml_obj.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Block = __webpack_require__(/*! ./block.js */ \"./node_modules/bs-platform/lib/js/block.js\");\nvar Caml_primitive = __webpack_require__(/*! ./caml_primitive.js */ \"./node_modules/bs-platform/lib/js/caml_primitive.js\");\nvar Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions.js */ \"./node_modules/bs-platform/lib/js/caml_builtin_exceptions.js\");\n\nfunction caml_obj_block(tag, size) {\n  var v = new Array(size);\n  v.tag = tag;\n  return v;\n}\n\nfunction caml_obj_dup(x) {\n  var len = x.length | 0;\n  var v = new Array(len);\n  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n    v[i] = x[i];\n  }\n  v.tag = x.tag | 0;\n  return v;\n}\n\nfunction caml_obj_truncate(x, new_size) {\n  var len = x.length | 0;\n  if (new_size <= 0 || new_size > len) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Obj.truncate\"\n        ];\n  } else if (len !== new_size) {\n    for(var i = new_size ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n      x[i] = 0;\n    }\n    x.length = new_size;\n    return /* () */0;\n  } else {\n    return 0;\n  }\n}\n\nfunction caml_lazy_make_forward(x) {\n  return Block.__(250, [x]);\n}\n\nfunction caml_update_dummy(x, y) {\n  var len = y.length | 0;\n  for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){\n    x[i] = y[i];\n  }\n  var y_tag = y.tag | 0;\n  if (y_tag !== 0) {\n    x.tag = y_tag;\n    return /* () */0;\n  } else {\n    return 0;\n  }\n}\n\nfunction for_in (o,foo){\n        for (var x in o) { foo(x) }\n      };\n\nfunction caml_compare(_a, _b) {\n  while(true) {\n    var b = _b;\n    var a = _a;\n    if (a === b) {\n      return 0;\n    } else {\n      var a_type = typeof a;\n      var b_type = typeof b;\n      var exit = 0;\n      switch (a_type) {\n        case \"boolean\" : \n            if (b_type === \"boolean\") {\n              return Caml_primitive.caml_bool_compare(a, b);\n            } else {\n              exit = 1;\n            }\n            break;\n        case \"function\" : \n            if (b_type === \"function\") {\n              throw [\n                    Caml_builtin_exceptions.invalid_argument,\n                    \"compare: functional value\"\n                  ];\n            } else {\n              exit = 1;\n            }\n            break;\n        case \"number\" : \n            if (b_type === \"number\") {\n              return Caml_primitive.caml_int_compare(a, b);\n            } else {\n              exit = 1;\n            }\n            break;\n        case \"string\" : \n            if (b_type === \"string\") {\n              return Caml_primitive.caml_string_compare(a, b);\n            } else {\n              return 1;\n            }\n        case \"undefined\" : \n            return -1;\n        default:\n          exit = 1;\n      }\n      if (exit === 1) {\n        switch (b_type) {\n          case \"string\" : \n              return -1;\n          case \"undefined\" : \n              return 1;\n          default:\n            if (a_type === \"boolean\") {\n              return 1;\n            } else if (b_type === \"boolean\") {\n              return -1;\n            } else if (a_type === \"function\") {\n              return 1;\n            } else if (b_type === \"function\") {\n              return -1;\n            } else if (a_type === \"number\") {\n              if (b === null || b.tag === 256) {\n                return 1;\n              } else {\n                return -1;\n              }\n            } else if (b_type === \"number\") {\n              if (a === null || a.tag === 256) {\n                return -1;\n              } else {\n                return 1;\n              }\n            } else if (a === null) {\n              if (b.tag === 256) {\n                return 1;\n              } else {\n                return -1;\n              }\n            } else if (b === null) {\n              if (a.tag === 256) {\n                return -1;\n              } else {\n                return 1;\n              }\n            } else {\n              var tag_a = a.tag | 0;\n              var tag_b = b.tag | 0;\n              if (tag_a === 250) {\n                _a = a[0];\n                continue ;\n              } else if (tag_b === 250) {\n                _b = b[0];\n                continue ;\n              } else if (tag_a === 256) {\n                if (tag_b === 256) {\n                  return Caml_primitive.caml_int_compare(a[1], b[1]);\n                } else {\n                  return -1;\n                }\n              } else if (tag_a === 248) {\n                return Caml_primitive.caml_int_compare(a[1], b[1]);\n              } else if (tag_a === 251) {\n                throw [\n                      Caml_builtin_exceptions.invalid_argument,\n                      \"equal: abstract value\"\n                    ];\n              } else if (tag_a !== tag_b) {\n                if (tag_a < tag_b) {\n                  return -1;\n                } else {\n                  return 1;\n                }\n              } else {\n                var len_a = a.length | 0;\n                var len_b = b.length | 0;\n                if (len_a === len_b) {\n                  if (Array.isArray(a)) {\n                    var a$1 = a;\n                    var b$1 = b;\n                    var _i = 0;\n                    var same_length = len_a;\n                    while(true) {\n                      var i = _i;\n                      if (i === same_length) {\n                        return 0;\n                      } else {\n                        var res = caml_compare(a$1[i], b$1[i]);\n                        if (res !== 0) {\n                          return res;\n                        } else {\n                          _i = i + 1 | 0;\n                          continue ;\n                        }\n                      }\n                    };\n                  } else {\n                    var a$2 = a;\n                    var b$2 = b;\n                    var min_key_lhs = /* record */[/* contents */undefined];\n                    var min_key_rhs = /* record */[/* contents */undefined];\n                    var do_key = function (param, key) {\n                      var min_key = param[2];\n                      var b = param[1];\n                      if (!b.hasOwnProperty(key) || caml_compare(param[0][key], b[key]) > 0) {\n                        var match = min_key[0];\n                        if (match !== undefined && key >= match) {\n                          return 0;\n                        } else {\n                          min_key[0] = key;\n                          return /* () */0;\n                        }\n                      } else {\n                        return 0;\n                      }\n                    };\n                    var partial_arg = /* tuple */[\n                      a$2,\n                      b$2,\n                      min_key_rhs\n                    ];\n                    var do_key_a = (function(partial_arg){\n                    return function do_key_a(param) {\n                      return do_key(partial_arg, param);\n                    }\n                    }(partial_arg));\n                    var partial_arg$1 = /* tuple */[\n                      b$2,\n                      a$2,\n                      min_key_lhs\n                    ];\n                    var do_key_b = (function(partial_arg$1){\n                    return function do_key_b(param) {\n                      return do_key(partial_arg$1, param);\n                    }\n                    }(partial_arg$1));\n                    for_in(a$2, do_key_a);\n                    for_in(b$2, do_key_b);\n                    var match = min_key_lhs[0];\n                    var match$1 = min_key_rhs[0];\n                    if (match !== undefined) {\n                      if (match$1 !== undefined) {\n                        return Caml_primitive.caml_string_compare(match, match$1);\n                      } else {\n                        return -1;\n                      }\n                    } else if (match$1 !== undefined) {\n                      return 1;\n                    } else {\n                      return 0;\n                    }\n                  }\n                } else if (len_a < len_b) {\n                  var a$3 = a;\n                  var b$3 = b;\n                  var _i$1 = 0;\n                  var short_length = len_a;\n                  while(true) {\n                    var i$1 = _i$1;\n                    if (i$1 === short_length) {\n                      return -1;\n                    } else {\n                      var res$1 = caml_compare(a$3[i$1], b$3[i$1]);\n                      if (res$1 !== 0) {\n                        return res$1;\n                      } else {\n                        _i$1 = i$1 + 1 | 0;\n                        continue ;\n                      }\n                    }\n                  };\n                } else {\n                  var a$4 = a;\n                  var b$4 = b;\n                  var _i$2 = 0;\n                  var short_length$1 = len_b;\n                  while(true) {\n                    var i$2 = _i$2;\n                    if (i$2 === short_length$1) {\n                      return 1;\n                    } else {\n                      var res$2 = caml_compare(a$4[i$2], b$4[i$2]);\n                      if (res$2 !== 0) {\n                        return res$2;\n                      } else {\n                        _i$2 = i$2 + 1 | 0;\n                        continue ;\n                      }\n                    }\n                  };\n                }\n              }\n            }\n        }\n      }\n      \n    }\n  };\n}\n\nfunction caml_equal(_a, _b) {\n  while(true) {\n    var b = _b;\n    var a = _a;\n    if (a === b) {\n      return true;\n    } else {\n      var a_type = typeof a;\n      if (a_type === \"string\" || a_type === \"number\" || a_type === \"boolean\" || a_type === \"undefined\" || a === null) {\n        return false;\n      } else {\n        var b_type = typeof b;\n        if (a_type === \"function\" || b_type === \"function\") {\n          throw [\n                Caml_builtin_exceptions.invalid_argument,\n                \"equal: functional value\"\n              ];\n        } else if (b_type === \"number\" || b_type === \"undefined\" || b === null) {\n          return false;\n        } else {\n          var tag_a = a.tag | 0;\n          var tag_b = b.tag | 0;\n          if (tag_a === 250) {\n            _a = a[0];\n            continue ;\n          } else if (tag_b === 250) {\n            _b = b[0];\n            continue ;\n          } else if (tag_a === 248) {\n            return a[1] === b[1];\n          } else if (tag_a === 251) {\n            throw [\n                  Caml_builtin_exceptions.invalid_argument,\n                  \"equal: abstract value\"\n                ];\n          } else if (tag_a !== tag_b) {\n            return false;\n          } else if (tag_a === 256) {\n            return a[1] === b[1];\n          } else {\n            var len_a = a.length | 0;\n            var len_b = b.length | 0;\n            if (len_a === len_b) {\n              if (Array.isArray(a)) {\n                var a$1 = a;\n                var b$1 = b;\n                var _i = 0;\n                var same_length = len_a;\n                while(true) {\n                  var i = _i;\n                  if (i === same_length) {\n                    return true;\n                  } else if (caml_equal(a$1[i], b$1[i])) {\n                    _i = i + 1 | 0;\n                    continue ;\n                  } else {\n                    return false;\n                  }\n                };\n              } else {\n                var a$2 = a;\n                var b$2 = b;\n                var result = /* record */[/* contents */true];\n                var do_key_a = (function(b$2,result){\n                return function do_key_a(key) {\n                  if (b$2.hasOwnProperty(key)) {\n                    return 0;\n                  } else {\n                    result[0] = false;\n                    return /* () */0;\n                  }\n                }\n                }(b$2,result));\n                var do_key_b = (function(a$2,b$2,result){\n                return function do_key_b(key) {\n                  if (!a$2.hasOwnProperty(key) || !caml_equal(b$2[key], a$2[key])) {\n                    result[0] = false;\n                    return /* () */0;\n                  } else {\n                    return 0;\n                  }\n                }\n                }(a$2,b$2,result));\n                for_in(a$2, do_key_a);\n                if (result[0]) {\n                  for_in(b$2, do_key_b);\n                }\n                return result[0];\n              }\n            } else {\n              return false;\n            }\n          }\n        }\n      }\n    }\n  };\n}\n\nfunction caml_equal_null(x, y) {\n  if (y !== null) {\n    return caml_equal(x, y);\n  } else {\n    return x === y;\n  }\n}\n\nfunction caml_equal_undefined(x, y) {\n  if (y !== undefined) {\n    return caml_equal(x, y);\n  } else {\n    return x === y;\n  }\n}\n\nfunction caml_equal_nullable(x, y) {\n  if (y == null) {\n    return x === y;\n  } else {\n    return caml_equal(x, y);\n  }\n}\n\nfunction caml_notequal(a, b) {\n  return !caml_equal(a, b);\n}\n\nfunction caml_greaterequal(a, b) {\n  return caml_compare(a, b) >= 0;\n}\n\nfunction caml_greaterthan(a, b) {\n  return caml_compare(a, b) > 0;\n}\n\nfunction caml_lessequal(a, b) {\n  return caml_compare(a, b) <= 0;\n}\n\nfunction caml_lessthan(a, b) {\n  return caml_compare(a, b) < 0;\n}\n\nfunction caml_min(x, y) {\n  if (caml_compare(x, y) <= 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_max(x, y) {\n  if (caml_compare(x, y) >= 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_obj_set_tag(prim, prim$1) {\n  prim.tag = prim$1;\n  return /* () */0;\n}\n\nexports.caml_obj_block = caml_obj_block;\nexports.caml_obj_dup = caml_obj_dup;\nexports.caml_obj_truncate = caml_obj_truncate;\nexports.caml_lazy_make_forward = caml_lazy_make_forward;\nexports.caml_update_dummy = caml_update_dummy;\nexports.caml_compare = caml_compare;\nexports.caml_equal = caml_equal;\nexports.caml_equal_null = caml_equal_null;\nexports.caml_equal_undefined = caml_equal_undefined;\nexports.caml_equal_nullable = caml_equal_nullable;\nexports.caml_notequal = caml_notequal;\nexports.caml_greaterequal = caml_greaterequal;\nexports.caml_greaterthan = caml_greaterthan;\nexports.caml_lessthan = caml_lessthan;\nexports.caml_lessequal = caml_lessequal;\nexports.caml_min = caml_min;\nexports.caml_max = caml_max;\nexports.caml_obj_set_tag = caml_obj_set_tag;\n/* No side effect */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/caml_obj.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/caml_option.js":
/*!********************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/caml_option.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n\nvar undefinedHeader = /* array */[];\n\nfunction some(x) {\n  if (x === undefined) {\n    var block = /* tuple */[\n      undefinedHeader,\n      0\n    ];\n    block.tag = 256;\n    return block;\n  } else if (x !== null && x[0] === undefinedHeader) {\n    var nid = x[1] + 1 | 0;\n    var block$1 = /* tuple */[\n      undefinedHeader,\n      nid\n    ];\n    block$1.tag = 256;\n    return block$1;\n  } else {\n    return x;\n  }\n}\n\nfunction nullable_to_opt(x) {\n  if (x === null || x === undefined) {\n    return undefined;\n  } else {\n    return some(x);\n  }\n}\n\nfunction undefined_to_opt(x) {\n  if (x === undefined) {\n    return undefined;\n  } else {\n    return some(x);\n  }\n}\n\nfunction null_to_opt(x) {\n  if (x === null) {\n    return undefined;\n  } else {\n    return some(x);\n  }\n}\n\nfunction valFromOption(x) {\n  if (x !== null && x[0] === undefinedHeader) {\n    var depth = x[1];\n    if (depth === 0) {\n      return undefined;\n    } else {\n      return /* tuple */[\n              undefinedHeader,\n              depth - 1 | 0\n            ];\n    }\n  } else {\n    return x;\n  }\n}\n\nfunction option_get(x) {\n  if (x === undefined) {\n    return undefined;\n  } else {\n    return valFromOption(x);\n  }\n}\n\nfunction option_get_unwrap(x) {\n  if (x === undefined) {\n    return undefined;\n  } else {\n    return valFromOption(x)[1];\n  }\n}\n\nexports.nullable_to_opt = nullable_to_opt;\nexports.undefined_to_opt = undefined_to_opt;\nexports.null_to_opt = null_to_opt;\nexports.valFromOption = valFromOption;\nexports.some = some;\nexports.option_get = option_get;\nexports.option_get_unwrap = option_get_unwrap;\n/* No side effect */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/caml_option.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/caml_primitive.js":
/*!***********************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/caml_primitive.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n\nfunction caml_int_compare(x, y) {\n  if (x < y) {\n    return -1;\n  } else if (x === y) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\n\nfunction caml_bool_compare(x, y) {\n  if (x) {\n    if (y) {\n      return 0;\n    } else {\n      return 1;\n    }\n  } else if (y) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n\nfunction caml_float_compare(x, y) {\n  if (x === y) {\n    return 0;\n  } else if (x < y) {\n    return -1;\n  } else if (x > y || x === x) {\n    return 1;\n  } else if (y === y) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n\nfunction caml_string_compare(s1, s2) {\n  if (s1 === s2) {\n    return 0;\n  } else if (s1 < s2) {\n    return -1;\n  } else {\n    return 1;\n  }\n}\n\nfunction caml_bytes_compare_aux(s1, s2, _off, len, def) {\n  while(true) {\n    var off = _off;\n    if (off < len) {\n      var a = s1[off];\n      var b = s2[off];\n      if (a > b) {\n        return 1;\n      } else if (a < b) {\n        return -1;\n      } else {\n        _off = off + 1 | 0;\n        continue ;\n      }\n    } else {\n      return def;\n    }\n  };\n}\n\nfunction caml_bytes_compare(s1, s2) {\n  var len1 = s1.length;\n  var len2 = s2.length;\n  if (len1 === len2) {\n    return caml_bytes_compare_aux(s1, s2, 0, len1, 0);\n  } else if (len1 < len2) {\n    return caml_bytes_compare_aux(s1, s2, 0, len1, -1);\n  } else {\n    return caml_bytes_compare_aux(s1, s2, 0, len2, 1);\n  }\n}\n\nfunction caml_bytes_equal(s1, s2) {\n  var len1 = s1.length;\n  var len2 = s2.length;\n  if (len1 === len2) {\n    var s1$1 = s1;\n    var s2$1 = s2;\n    var _off = 0;\n    var len = len1;\n    while(true) {\n      var off = _off;\n      if (off === len) {\n        return true;\n      } else {\n        var a = s1$1[off];\n        var b = s2$1[off];\n        if (a === b) {\n          _off = off + 1 | 0;\n          continue ;\n        } else {\n          return false;\n        }\n      }\n    };\n  } else {\n    return false;\n  }\n}\n\nfunction caml_bool_min(x, y) {\n  if (x) {\n    return y;\n  } else {\n    return x;\n  }\n}\n\nfunction caml_int_min(x, y) {\n  if (x < y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_float_min(x, y) {\n  if (x < y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_string_min(x, y) {\n  if (x < y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_nativeint_min(x, y) {\n  if (x < y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_int32_min(x, y) {\n  if (x < y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_bool_max(x, y) {\n  if (x) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_int_max(x, y) {\n  if (x > y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_float_max(x, y) {\n  if (x > y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_string_max(x, y) {\n  if (x > y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_nativeint_max(x, y) {\n  if (x > y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nfunction caml_int32_max(x, y) {\n  if (x > y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nvar caml_nativeint_compare = caml_int_compare;\n\nvar caml_int32_compare = caml_int_compare;\n\nexports.caml_bytes_compare = caml_bytes_compare;\nexports.caml_bytes_equal = caml_bytes_equal;\nexports.caml_int_compare = caml_int_compare;\nexports.caml_bool_compare = caml_bool_compare;\nexports.caml_float_compare = caml_float_compare;\nexports.caml_nativeint_compare = caml_nativeint_compare;\nexports.caml_string_compare = caml_string_compare;\nexports.caml_int32_compare = caml_int32_compare;\nexports.caml_bool_min = caml_bool_min;\nexports.caml_int_min = caml_int_min;\nexports.caml_float_min = caml_float_min;\nexports.caml_string_min = caml_string_min;\nexports.caml_nativeint_min = caml_nativeint_min;\nexports.caml_int32_min = caml_int32_min;\nexports.caml_bool_max = caml_bool_max;\nexports.caml_int_max = caml_int_max;\nexports.caml_float_max = caml_float_max;\nexports.caml_string_max = caml_string_max;\nexports.caml_nativeint_max = caml_nativeint_max;\nexports.caml_int32_max = caml_int32_max;\n/* No side effect */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/caml_primitive.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/caml_string.js":
/*!********************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/caml_string.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions.js */ \"./node_modules/bs-platform/lib/js/caml_builtin_exceptions.js\");\n\nfunction caml_string_get(s, i) {\n  if (i >= s.length || i < 0) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"index out of bounds\"\n        ];\n  } else {\n    return s.charCodeAt(i);\n  }\n}\n\nfunction caml_string_get16(s, i) {\n  return s.charCodeAt(i) + (s.charCodeAt(i + 1 | 0) << 8) | 0;\n}\n\nfunction caml_string_get32(s, i) {\n  return ((s.charCodeAt(i) + (s.charCodeAt(i + 1 | 0) << 8) | 0) + (s.charCodeAt(i + 2 | 0) << 16) | 0) + (s.charCodeAt(i + 3 | 0) << 24) | 0;\n}\n\nfunction get(s, i) {\n  if (i < 0 || i >= s.length) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"index out of bounds\"\n        ];\n  } else {\n    return s.charCodeAt(i);\n  }\n}\n\nexports.caml_string_get = caml_string_get;\nexports.caml_string_get16 = caml_string_get16;\nexports.caml_string_get32 = caml_string_get32;\nexports.get = get;\n/* No side effect */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/caml_string.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/caml_sys.js":
/*!*****************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/caml_sys.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\n\nvar Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions.js */ \"./node_modules/bs-platform/lib/js/caml_builtin_exceptions.js\");\n\nfunction caml_sys_getenv(s) {\n  if (typeof process === \"undefined\" || (process.env) === undefined) {\n    throw Caml_builtin_exceptions.not_found;\n  } else {\n    var match = (process.env)[s];\n    if (match !== undefined) {\n      return match;\n    } else {\n      throw Caml_builtin_exceptions.not_found;\n    }\n  }\n}\n\nfunction caml_sys_time(param) {\n  if (typeof process === \"undefined\" || (process.uptime) === undefined) {\n    return -1;\n  } else {\n    return process.uptime();\n  }\n}\n\nfunction caml_sys_random_seed(param) {\n  return /* array */[((Date.now() | 0) ^ 4294967295) * Math.random() | 0];\n}\n\nfunction caml_sys_system_command(_cmd) {\n  return 127;\n}\n\nfunction caml_sys_getcwd(param) {\n  if (typeof process === \"undefined\") {\n    return \"/\";\n  } else {\n    return process.cwd();\n  }\n}\n\nfunction caml_sys_get_argv(param) {\n  if (typeof process === \"undefined\") {\n    return /* tuple */[\n            \"\",\n            /* array */[\"\"]\n          ];\n  } else {\n    var argv = (process.argv);\n    if (argv == null) {\n      return /* tuple */[\n              \"\",\n              /* array */[\"\"]\n            ];\n    } else {\n      return /* tuple */[\n              argv[0],\n              argv\n            ];\n    }\n  }\n}\n\nfunction caml_sys_exit(exit_code) {\n  if (typeof process !== \"undefined\") {\n    return process.exit(exit_code);\n  } else {\n    return 0;\n  }\n}\n\nfunction caml_sys_is_directory(_s) {\n  throw [\n        Caml_builtin_exceptions.failure,\n        \"caml_sys_is_directory not implemented\"\n      ];\n}\n\nfunction caml_sys_file_exists(_s) {\n  throw [\n        Caml_builtin_exceptions.failure,\n        \"caml_sys_file_exists not implemented\"\n      ];\n}\n\nexports.caml_sys_getenv = caml_sys_getenv;\nexports.caml_sys_time = caml_sys_time;\nexports.caml_sys_random_seed = caml_sys_random_seed;\nexports.caml_sys_system_command = caml_sys_system_command;\nexports.caml_sys_getcwd = caml_sys_getcwd;\nexports.caml_sys_get_argv = caml_sys_get_argv;\nexports.caml_sys_exit = caml_sys_exit;\nexports.caml_sys_is_directory = caml_sys_is_directory;\nexports.caml_sys_file_exists = caml_sys_file_exists;\n/* No side effect */\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/caml_sys.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/caml_utils.js":
/*!*******************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/caml_utils.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n\nfunction repeat (count,self){\n    if (self.repeat){\n        return self.repeat(count)\n    }\n    if (self.length == 0 || count == 0) {\n            return '';\n        }\n    // Ensuring count is a 31-bit integer allows us to heavily optimize the\n    // main part. But anyway, most current (August 2014) browsers can't handle\n    // strings 1 << 28 chars or longer, so:\n    if (self.length * count >= 1 << 28) {\n            throw new RangeError('repeat count must not overflow maximum string size');\n    }\n    var rpt = '';\n    for (;;) {\n            if ((count & 1) == 1) {\n                rpt += self;\n            }\n            count >>>= 1;\n            if (count == 0) {\n                break;\n            }\n            self += self;\n    }\n    return rpt;\n\n};\n\nexports.repeat = repeat;\n/* No side effect */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/caml_utils.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/camlinternalFormat.js":
/*!***************************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/camlinternalFormat.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Char = __webpack_require__(/*! ./char.js */ \"./node_modules/bs-platform/lib/js/char.js\");\nvar Block = __webpack_require__(/*! ./block.js */ \"./node_modules/bs-platform/lib/js/block.js\");\nvar Bytes = __webpack_require__(/*! ./bytes.js */ \"./node_modules/bs-platform/lib/js/bytes.js\");\nvar Curry = __webpack_require__(/*! ./curry.js */ \"./node_modules/bs-platform/lib/js/curry.js\");\nvar $$Buffer = __webpack_require__(/*! ./buffer.js */ \"./node_modules/bs-platform/lib/js/buffer.js\");\nvar $$String = __webpack_require__(/*! ./string.js */ \"./node_modules/bs-platform/lib/js/string.js\");\nvar Caml_io = __webpack_require__(/*! ./caml_io.js */ \"./node_modules/bs-platform/lib/js/caml_io.js\");\nvar Caml_obj = __webpack_require__(/*! ./caml_obj.js */ \"./node_modules/bs-platform/lib/js/caml_obj.js\");\nvar Caml_bytes = __webpack_require__(/*! ./caml_bytes.js */ \"./node_modules/bs-platform/lib/js/caml_bytes.js\");\nvar Caml_int32 = __webpack_require__(/*! ./caml_int32.js */ \"./node_modules/bs-platform/lib/js/caml_int32.js\");\nvar Pervasives = __webpack_require__(/*! ./pervasives.js */ \"./node_modules/bs-platform/lib/js/pervasives.js\");\nvar Caml_format = __webpack_require__(/*! ./caml_format.js */ \"./node_modules/bs-platform/lib/js/caml_format.js\");\nvar Caml_string = __webpack_require__(/*! ./caml_string.js */ \"./node_modules/bs-platform/lib/js/caml_string.js\");\nvar Caml_primitive = __webpack_require__(/*! ./caml_primitive.js */ \"./node_modules/bs-platform/lib/js/caml_primitive.js\");\nvar Caml_exceptions = __webpack_require__(/*! ./caml_exceptions.js */ \"./node_modules/bs-platform/lib/js/caml_exceptions.js\");\nvar Caml_js_exceptions = __webpack_require__(/*! ./caml_js_exceptions.js */ \"./node_modules/bs-platform/lib/js/caml_js_exceptions.js\");\nvar Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions.js */ \"./node_modules/bs-platform/lib/js/caml_builtin_exceptions.js\");\nvar CamlinternalFormatBasics = __webpack_require__(/*! ./camlinternalFormatBasics.js */ \"./node_modules/bs-platform/lib/js/camlinternalFormatBasics.js\");\n\nfunction create_char_set(param) {\n  return Bytes.make(32, /* \"\\000\" */0);\n}\n\nfunction add_in_char_set(char_set, c) {\n  var str_ind = (c >>> 3);\n  var mask = (1 << (c & 7));\n  char_set[str_ind] = Pervasives.char_of_int(Caml_bytes.get(char_set, str_ind) | mask);\n  return /* () */0;\n}\n\nvar freeze_char_set = Bytes.to_string;\n\nfunction rev_char_set(char_set) {\n  var char_set$prime = Bytes.make(32, /* \"\\000\" */0);\n  for(var i = 0; i <= 31; ++i){\n    char_set$prime[i] = Pervasives.char_of_int(Caml_string.get(char_set, i) ^ 255);\n  }\n  return Caml_bytes.bytes_to_string(char_set$prime);\n}\n\nfunction is_in_char_set(char_set, c) {\n  var str_ind = (c >>> 3);\n  var mask = (1 << (c & 7));\n  return (Caml_string.get(char_set, str_ind) & mask) !== 0;\n}\n\nfunction pad_of_pad_opt(pad_opt) {\n  if (pad_opt !== undefined) {\n    return /* Lit_padding */Block.__(0, [\n              /* Right */1,\n              pad_opt\n            ]);\n  } else {\n    return /* No_padding */0;\n  }\n}\n\nfunction prec_of_prec_opt(prec_opt) {\n  if (prec_opt !== undefined) {\n    return /* Lit_precision */[prec_opt];\n  } else {\n    return /* No_precision */0;\n  }\n}\n\nfunction param_format_of_ignored_format(ign, fmt) {\n  if (typeof ign === \"number\") {\n    switch (ign) {\n      case 0 : \n          return /* Param_format_EBB */[/* Char */Block.__(0, [fmt])];\n      case 1 : \n          return /* Param_format_EBB */[/* Caml_char */Block.__(1, [fmt])];\n      case 2 : \n          return /* Param_format_EBB */[/* Bool */Block.__(9, [fmt])];\n      case 3 : \n          return /* Param_format_EBB */[/* Reader */Block.__(19, [fmt])];\n      case 4 : \n          return /* Param_format_EBB */[/* Scan_next_char */Block.__(22, [fmt])];\n      \n    }\n  } else {\n    switch (ign.tag | 0) {\n      case 0 : \n          return /* Param_format_EBB */[/* String */Block.__(2, [\n                      pad_of_pad_opt(ign[0]),\n                      fmt\n                    ])];\n      case 1 : \n          return /* Param_format_EBB */[/* Caml_string */Block.__(3, [\n                      pad_of_pad_opt(ign[0]),\n                      fmt\n                    ])];\n      case 2 : \n          return /* Param_format_EBB */[/* Int */Block.__(4, [\n                      ign[0],\n                      pad_of_pad_opt(ign[1]),\n                      /* No_precision */0,\n                      fmt\n                    ])];\n      case 3 : \n          return /* Param_format_EBB */[/* Int32 */Block.__(5, [\n                      ign[0],\n                      pad_of_pad_opt(ign[1]),\n                      /* No_precision */0,\n                      fmt\n                    ])];\n      case 4 : \n          return /* Param_format_EBB */[/* Nativeint */Block.__(6, [\n                      ign[0],\n                      pad_of_pad_opt(ign[1]),\n                      /* No_precision */0,\n                      fmt\n                    ])];\n      case 5 : \n          return /* Param_format_EBB */[/* Int64 */Block.__(7, [\n                      ign[0],\n                      pad_of_pad_opt(ign[1]),\n                      /* No_precision */0,\n                      fmt\n                    ])];\n      case 6 : \n          return /* Param_format_EBB */[/* Float */Block.__(8, [\n                      /* Float_f */0,\n                      pad_of_pad_opt(ign[0]),\n                      prec_of_prec_opt(ign[1]),\n                      fmt\n                    ])];\n      case 7 : \n          return /* Param_format_EBB */[/* Format_arg */Block.__(13, [\n                      ign[0],\n                      ign[1],\n                      fmt\n                    ])];\n      case 8 : \n          return /* Param_format_EBB */[/* Format_subst */Block.__(14, [\n                      ign[0],\n                      ign[1],\n                      fmt\n                    ])];\n      case 9 : \n          return /* Param_format_EBB */[/* Scan_char_set */Block.__(20, [\n                      ign[0],\n                      ign[1],\n                      fmt\n                    ])];\n      case 10 : \n          return /* Param_format_EBB */[/* Scan_get_counter */Block.__(21, [\n                      ign[0],\n                      fmt\n                    ])];\n      \n    }\n  }\n}\n\nfunction buffer_check_size(buf, overhead) {\n  var len = buf[/* bytes */1].length;\n  var min_len = buf[/* ind */0] + overhead | 0;\n  if (min_len > len) {\n    var new_len = Caml_primitive.caml_int_max((len << 1), min_len);\n    var new_str = Caml_bytes.caml_create_bytes(new_len);\n    Bytes.blit(buf[/* bytes */1], 0, new_str, 0, len);\n    buf[/* bytes */1] = new_str;\n    return /* () */0;\n  } else {\n    return 0;\n  }\n}\n\nfunction buffer_add_char(buf, c) {\n  buffer_check_size(buf, 1);\n  buf[/* bytes */1][buf[/* ind */0]] = c;\n  buf[/* ind */0] = buf[/* ind */0] + 1 | 0;\n  return /* () */0;\n}\n\nfunction buffer_add_string(buf, s) {\n  var str_len = s.length;\n  buffer_check_size(buf, str_len);\n  $$String.blit(s, 0, buf[/* bytes */1], buf[/* ind */0], str_len);\n  buf[/* ind */0] = buf[/* ind */0] + str_len | 0;\n  return /* () */0;\n}\n\nfunction buffer_contents(buf) {\n  return Bytes.sub_string(buf[/* bytes */1], 0, buf[/* ind */0]);\n}\n\nfunction char_of_iconv(iconv) {\n  switch (iconv) {\n    case 0 : \n    case 1 : \n    case 2 : \n        return /* \"d\" */100;\n    case 3 : \n    case 4 : \n    case 5 : \n        return /* \"i\" */105;\n    case 6 : \n    case 7 : \n        return /* \"x\" */120;\n    case 8 : \n    case 9 : \n        return /* \"X\" */88;\n    case 10 : \n    case 11 : \n        return /* \"o\" */111;\n    case 12 : \n        return /* \"u\" */117;\n    \n  }\n}\n\nfunction char_of_fconv(fconv) {\n  switch (fconv) {\n    case 0 : \n    case 1 : \n    case 2 : \n        return /* \"f\" */102;\n    case 3 : \n    case 4 : \n    case 5 : \n        return /* \"e\" */101;\n    case 6 : \n    case 7 : \n    case 8 : \n        return /* \"E\" */69;\n    case 9 : \n    case 10 : \n    case 11 : \n        return /* \"g\" */103;\n    case 12 : \n    case 13 : \n    case 14 : \n        return /* \"G\" */71;\n    case 15 : \n        return /* \"F\" */70;\n    \n  }\n}\n\nfunction char_of_counter(counter) {\n  switch (counter) {\n    case 0 : \n        return /* \"l\" */108;\n    case 1 : \n        return /* \"n\" */110;\n    case 2 : \n        return /* \"N\" */78;\n    \n  }\n}\n\nfunction bprint_char_set(buf, char_set) {\n  var print_char = function (buf, i) {\n    var c = Pervasives.char_of_int(i);\n    if (c !== 37) {\n      if (c !== 64) {\n        return buffer_add_char(buf, c);\n      } else {\n        buffer_add_char(buf, /* \"%\" */37);\n        return buffer_add_char(buf, /* \"@\" */64);\n      }\n    } else {\n      buffer_add_char(buf, /* \"%\" */37);\n      return buffer_add_char(buf, /* \"%\" */37);\n    }\n  };\n  var print_out = function (set, _i) {\n    while(true) {\n      var i = _i;\n      if (i < 256) {\n        if (is_in_char_set(set, Pervasives.char_of_int(i))) {\n          var set$1 = set;\n          var i$1 = i;\n          var match = Pervasives.char_of_int(i$1);\n          var switcher = match - 45 | 0;\n          if (switcher > 48 || switcher < 0) {\n            if (switcher >= 210) {\n              return print_char(buf, 255);\n            } else {\n              return print_second(set$1, i$1 + 1 | 0);\n            }\n          } else if (switcher > 47 || switcher < 1) {\n            return print_out(set$1, i$1 + 1 | 0);\n          } else {\n            return print_second(set$1, i$1 + 1 | 0);\n          }\n        } else {\n          _i = i + 1 | 0;\n          continue ;\n        }\n      } else {\n        return 0;\n      }\n    };\n  };\n  var print_second = function (set, i) {\n    if (is_in_char_set(set, Pervasives.char_of_int(i))) {\n      var match = Pervasives.char_of_int(i);\n      var exit = 0;\n      var switcher = match - 45 | 0;\n      if (switcher > 48 || switcher < 0) {\n        if (switcher >= 210) {\n          print_char(buf, 254);\n          return print_char(buf, 255);\n        } else {\n          exit = 1;\n        }\n      } else if ((switcher > 47 || switcher < 1) && !is_in_char_set(set, Pervasives.char_of_int(i + 1 | 0))) {\n        print_char(buf, i - 1 | 0);\n        return print_out(set, i + 1 | 0);\n      } else {\n        exit = 1;\n      }\n      if (exit === 1) {\n        if (is_in_char_set(set, Pervasives.char_of_int(i + 1 | 0))) {\n          var set$1 = set;\n          var i$1 = i - 1 | 0;\n          var _j = i + 2 | 0;\n          while(true) {\n            var j = _j;\n            if (j === 256 || !is_in_char_set(set$1, Pervasives.char_of_int(j))) {\n              print_char(buf, i$1);\n              print_char(buf, /* \"-\" */45);\n              print_char(buf, j - 1 | 0);\n              if (j < 256) {\n                return print_out(set$1, j + 1 | 0);\n              } else {\n                return 0;\n              }\n            } else {\n              _j = j + 1 | 0;\n              continue ;\n            }\n          };\n        } else {\n          print_char(buf, i - 1 | 0);\n          print_char(buf, i);\n          return print_out(set, i + 2 | 0);\n        }\n      }\n      \n    } else {\n      print_char(buf, i - 1 | 0);\n      return print_out(set, i + 1 | 0);\n    }\n  };\n  var print_start = function (set) {\n    var is_alone = function (c) {\n      var before = Char.chr(c - 1 | 0);\n      var after = Char.chr(c + 1 | 0);\n      if (is_in_char_set(set, c)) {\n        return !(is_in_char_set(set, before) && is_in_char_set(set, after));\n      } else {\n        return false;\n      }\n    };\n    if (is_alone(/* \"]\" */93)) {\n      buffer_add_char(buf, /* \"]\" */93);\n    }\n    print_out(set, 1);\n    if (is_alone(/* \"-\" */45)) {\n      return buffer_add_char(buf, /* \"-\" */45);\n    } else {\n      return 0;\n    }\n  };\n  buffer_add_char(buf, /* \"[\" */91);\n  print_start(is_in_char_set(char_set, /* \"\\000\" */0) ? (buffer_add_char(buf, /* \"^\" */94), rev_char_set(char_set)) : char_set);\n  return buffer_add_char(buf, /* \"]\" */93);\n}\n\nfunction bprint_padty(buf, padty) {\n  switch (padty) {\n    case 0 : \n        return buffer_add_char(buf, /* \"-\" */45);\n    case 1 : \n        return /* () */0;\n    case 2 : \n        return buffer_add_char(buf, /* \"0\" */48);\n    \n  }\n}\n\nfunction bprint_ignored_flag(buf, ign_flag) {\n  if (ign_flag) {\n    return buffer_add_char(buf, /* \"_\" */95);\n  } else {\n    return 0;\n  }\n}\n\nfunction bprint_pad_opt(buf, pad_opt) {\n  if (pad_opt !== undefined) {\n    return buffer_add_string(buf, String(pad_opt));\n  } else {\n    return /* () */0;\n  }\n}\n\nfunction bprint_padding(buf, pad) {\n  if (typeof pad === \"number\") {\n    return /* () */0;\n  } else {\n    bprint_padty(buf, pad[0]);\n    if (pad.tag) {\n      return buffer_add_char(buf, /* \"*\" */42);\n    } else {\n      return buffer_add_string(buf, String(pad[1]));\n    }\n  }\n}\n\nfunction bprint_precision(buf, prec) {\n  if (typeof prec === \"number\") {\n    if (prec !== 0) {\n      return buffer_add_string(buf, \".*\");\n    } else {\n      return /* () */0;\n    }\n  } else {\n    buffer_add_char(buf, /* \".\" */46);\n    return buffer_add_string(buf, String(prec[0]));\n  }\n}\n\nfunction bprint_iconv_flag(buf, iconv) {\n  switch (iconv) {\n    case 1 : \n    case 4 : \n        return buffer_add_char(buf, /* \"+\" */43);\n    case 2 : \n    case 5 : \n        return buffer_add_char(buf, /* \" \" */32);\n    case 7 : \n    case 9 : \n    case 11 : \n        return buffer_add_char(buf, /* \"#\" */35);\n    case 0 : \n    case 3 : \n    case 6 : \n    case 8 : \n    case 10 : \n    case 12 : \n        return /* () */0;\n    \n  }\n}\n\nfunction bprint_int_fmt(buf, ign_flag, iconv, pad, prec) {\n  buffer_add_char(buf, /* \"%\" */37);\n  bprint_ignored_flag(buf, ign_flag);\n  bprint_iconv_flag(buf, iconv);\n  bprint_padding(buf, pad);\n  bprint_precision(buf, prec);\n  return buffer_add_char(buf, char_of_iconv(iconv));\n}\n\nfunction bprint_altint_fmt(buf, ign_flag, iconv, pad, prec, c) {\n  buffer_add_char(buf, /* \"%\" */37);\n  bprint_ignored_flag(buf, ign_flag);\n  bprint_iconv_flag(buf, iconv);\n  bprint_padding(buf, pad);\n  bprint_precision(buf, prec);\n  buffer_add_char(buf, c);\n  return buffer_add_char(buf, char_of_iconv(iconv));\n}\n\nfunction bprint_fconv_flag(buf, fconv) {\n  switch (fconv) {\n    case 1 : \n    case 4 : \n    case 7 : \n    case 10 : \n    case 13 : \n        return buffer_add_char(buf, /* \"+\" */43);\n    case 2 : \n    case 5 : \n    case 8 : \n    case 11 : \n    case 14 : \n        return buffer_add_char(buf, /* \" \" */32);\n    case 0 : \n    case 3 : \n    case 6 : \n    case 9 : \n    case 12 : \n    case 15 : \n        return /* () */0;\n    \n  }\n}\n\nfunction bprint_float_fmt(buf, ign_flag, fconv, pad, prec) {\n  buffer_add_char(buf, /* \"%\" */37);\n  bprint_ignored_flag(buf, ign_flag);\n  bprint_fconv_flag(buf, fconv);\n  bprint_padding(buf, pad);\n  bprint_precision(buf, prec);\n  return buffer_add_char(buf, char_of_fconv(fconv));\n}\n\nfunction string_of_formatting_lit(formatting_lit) {\n  if (typeof formatting_lit === \"number\") {\n    switch (formatting_lit) {\n      case 0 : \n          return \"@]\";\n      case 1 : \n          return \"@}\";\n      case 2 : \n          return \"@?\";\n      case 3 : \n          return \"@\\n\";\n      case 4 : \n          return \"@.\";\n      case 5 : \n          return \"@@\";\n      case 6 : \n          return \"@%\";\n      \n    }\n  } else {\n    switch (formatting_lit.tag | 0) {\n      case 0 : \n      case 1 : \n          return formatting_lit[0];\n      case 2 : \n          return \"@\" + Caml_bytes.bytes_to_string(Bytes.make(1, formatting_lit[0]));\n      \n    }\n  }\n}\n\nfunction string_of_formatting_gen(formatting_gen) {\n  return formatting_gen[0][1];\n}\n\nfunction bprint_char_literal(buf, chr) {\n  if (chr !== 37) {\n    return buffer_add_char(buf, chr);\n  } else {\n    return buffer_add_string(buf, \"%%\");\n  }\n}\n\nfunction bprint_string_literal(buf, str) {\n  for(var i = 0 ,i_finish = str.length - 1 | 0; i <= i_finish; ++i){\n    bprint_char_literal(buf, Caml_string.get(str, i));\n  }\n  return /* () */0;\n}\n\nfunction bprint_fmtty(buf, _fmtty) {\n  while(true) {\n    var fmtty = _fmtty;\n    if (typeof fmtty === \"number\") {\n      return /* () */0;\n    } else {\n      switch (fmtty.tag | 0) {\n        case 0 : \n            buffer_add_string(buf, \"%c\");\n            _fmtty = fmtty[0];\n            continue ;\n        case 1 : \n            buffer_add_string(buf, \"%s\");\n            _fmtty = fmtty[0];\n            continue ;\n        case 2 : \n            buffer_add_string(buf, \"%i\");\n            _fmtty = fmtty[0];\n            continue ;\n        case 3 : \n            buffer_add_string(buf, \"%li\");\n            _fmtty = fmtty[0];\n            continue ;\n        case 4 : \n            buffer_add_string(buf, \"%ni\");\n            _fmtty = fmtty[0];\n            continue ;\n        case 5 : \n            buffer_add_string(buf, \"%Li\");\n            _fmtty = fmtty[0];\n            continue ;\n        case 6 : \n            buffer_add_string(buf, \"%f\");\n            _fmtty = fmtty[0];\n            continue ;\n        case 7 : \n            buffer_add_string(buf, \"%B\");\n            _fmtty = fmtty[0];\n            continue ;\n        case 8 : \n            buffer_add_string(buf, \"%{\");\n            bprint_fmtty(buf, fmtty[0]);\n            buffer_add_string(buf, \"%}\");\n            _fmtty = fmtty[1];\n            continue ;\n        case 9 : \n            buffer_add_string(buf, \"%(\");\n            bprint_fmtty(buf, fmtty[0]);\n            buffer_add_string(buf, \"%)\");\n            _fmtty = fmtty[2];\n            continue ;\n        case 10 : \n            buffer_add_string(buf, \"%a\");\n            _fmtty = fmtty[0];\n            continue ;\n        case 11 : \n            buffer_add_string(buf, \"%t\");\n            _fmtty = fmtty[0];\n            continue ;\n        case 12 : \n            buffer_add_string(buf, \"%?\");\n            _fmtty = fmtty[0];\n            continue ;\n        case 13 : \n            buffer_add_string(buf, \"%r\");\n            _fmtty = fmtty[0];\n            continue ;\n        case 14 : \n            buffer_add_string(buf, \"%_r\");\n            _fmtty = fmtty[0];\n            continue ;\n        \n      }\n    }\n  };\n}\n\nfunction int_of_custom_arity(param) {\n  if (param) {\n    return 1 + int_of_custom_arity(param[0]) | 0;\n  } else {\n    return 0;\n  }\n}\n\nfunction bprint_fmt(buf, fmt) {\n  var _fmt = fmt;\n  var _ign_flag = false;\n  while(true) {\n    var ign_flag = _ign_flag;\n    var fmt$1 = _fmt;\n    if (typeof fmt$1 === \"number\") {\n      return /* () */0;\n    } else {\n      switch (fmt$1.tag | 0) {\n        case 0 : \n            buffer_add_char(buf, /* \"%\" */37);\n            bprint_ignored_flag(buf, ign_flag);\n            buffer_add_char(buf, /* \"c\" */99);\n            _ign_flag = false;\n            _fmt = fmt$1[0];\n            continue ;\n        case 1 : \n            buffer_add_char(buf, /* \"%\" */37);\n            bprint_ignored_flag(buf, ign_flag);\n            buffer_add_char(buf, /* \"C\" */67);\n            _ign_flag = false;\n            _fmt = fmt$1[0];\n            continue ;\n        case 2 : \n            buffer_add_char(buf, /* \"%\" */37);\n            bprint_ignored_flag(buf, ign_flag);\n            bprint_padding(buf, fmt$1[0]);\n            buffer_add_char(buf, /* \"s\" */115);\n            _ign_flag = false;\n            _fmt = fmt$1[1];\n            continue ;\n        case 3 : \n            buffer_add_char(buf, /* \"%\" */37);\n            bprint_ignored_flag(buf, ign_flag);\n            bprint_padding(buf, fmt$1[0]);\n            buffer_add_char(buf, /* \"S\" */83);\n            _ign_flag = false;\n            _fmt = fmt$1[1];\n            continue ;\n        case 4 : \n            bprint_int_fmt(buf, ign_flag, fmt$1[0], fmt$1[1], fmt$1[2]);\n            _ign_flag = false;\n            _fmt = fmt$1[3];\n            continue ;\n        case 5 : \n            bprint_altint_fmt(buf, ign_flag, fmt$1[0], fmt$1[1], fmt$1[2], /* \"l\" */108);\n            _ign_flag = false;\n            _fmt = fmt$1[3];\n            continue ;\n        case 6 : \n            bprint_altint_fmt(buf, ign_flag, fmt$1[0], fmt$1[1], fmt$1[2], /* \"n\" */110);\n            _ign_flag = false;\n            _fmt = fmt$1[3];\n            continue ;\n        case 7 : \n            bprint_altint_fmt(buf, ign_flag, fmt$1[0], fmt$1[1], fmt$1[2], /* \"L\" */76);\n            _ign_flag = false;\n            _fmt = fmt$1[3];\n            continue ;\n        case 8 : \n            bprint_float_fmt(buf, ign_flag, fmt$1[0], fmt$1[1], fmt$1[2]);\n            _ign_flag = false;\n            _fmt = fmt$1[3];\n            continue ;\n        case 9 : \n            buffer_add_char(buf, /* \"%\" */37);\n            bprint_ignored_flag(buf, ign_flag);\n            buffer_add_char(buf, /* \"B\" */66);\n            _ign_flag = false;\n            _fmt = fmt$1[0];\n            continue ;\n        case 10 : \n            buffer_add_string(buf, \"%!\");\n            _fmt = fmt$1[0];\n            continue ;\n        case 11 : \n            bprint_string_literal(buf, fmt$1[0]);\n            _fmt = fmt$1[1];\n            continue ;\n        case 12 : \n            bprint_char_literal(buf, fmt$1[0]);\n            _fmt = fmt$1[1];\n            continue ;\n        case 13 : \n            buffer_add_char(buf, /* \"%\" */37);\n            bprint_ignored_flag(buf, ign_flag);\n            bprint_pad_opt(buf, fmt$1[0]);\n            buffer_add_char(buf, /* \"{\" */123);\n            bprint_fmtty(buf, fmt$1[1]);\n            buffer_add_char(buf, /* \"%\" */37);\n            buffer_add_char(buf, /* \"}\" */125);\n            _ign_flag = false;\n            _fmt = fmt$1[2];\n            continue ;\n        case 14 : \n            buffer_add_char(buf, /* \"%\" */37);\n            bprint_ignored_flag(buf, ign_flag);\n            bprint_pad_opt(buf, fmt$1[0]);\n            buffer_add_char(buf, /* \"(\" */40);\n            bprint_fmtty(buf, fmt$1[1]);\n            buffer_add_char(buf, /* \"%\" */37);\n            buffer_add_char(buf, /* \")\" */41);\n            _ign_flag = false;\n            _fmt = fmt$1[2];\n            continue ;\n        case 15 : \n            buffer_add_char(buf, /* \"%\" */37);\n            bprint_ignored_flag(buf, ign_flag);\n            buffer_add_char(buf, /* \"a\" */97);\n            _ign_flag = false;\n            _fmt = fmt$1[0];\n            continue ;\n        case 16 : \n            buffer_add_char(buf, /* \"%\" */37);\n            bprint_ignored_flag(buf, ign_flag);\n            buffer_add_char(buf, /* \"t\" */116);\n            _ign_flag = false;\n            _fmt = fmt$1[0];\n            continue ;\n        case 17 : \n            bprint_string_literal(buf, string_of_formatting_lit(fmt$1[0]));\n            _fmt = fmt$1[1];\n            continue ;\n        case 18 : \n            bprint_string_literal(buf, \"@{\");\n            bprint_string_literal(buf, string_of_formatting_gen(fmt$1[0]));\n            _fmt = fmt$1[1];\n            continue ;\n        case 19 : \n            buffer_add_char(buf, /* \"%\" */37);\n            bprint_ignored_flag(buf, ign_flag);\n            buffer_add_char(buf, /* \"r\" */114);\n            _ign_flag = false;\n            _fmt = fmt$1[0];\n            continue ;\n        case 20 : \n            buffer_add_char(buf, /* \"%\" */37);\n            bprint_ignored_flag(buf, ign_flag);\n            bprint_pad_opt(buf, fmt$1[0]);\n            bprint_char_set(buf, fmt$1[1]);\n            _ign_flag = false;\n            _fmt = fmt$1[2];\n            continue ;\n        case 21 : \n            buffer_add_char(buf, /* \"%\" */37);\n            bprint_ignored_flag(buf, ign_flag);\n            buffer_add_char(buf, char_of_counter(fmt$1[0]));\n            _ign_flag = false;\n            _fmt = fmt$1[1];\n            continue ;\n        case 22 : \n            buffer_add_char(buf, /* \"%\" */37);\n            bprint_ignored_flag(buf, ign_flag);\n            bprint_string_literal(buf, \"0c\");\n            _ign_flag = false;\n            _fmt = fmt$1[0];\n            continue ;\n        case 23 : \n            var match = param_format_of_ignored_format(fmt$1[0], fmt$1[1]);\n            _ign_flag = true;\n            _fmt = match[0];\n            continue ;\n        case 24 : \n            for(var _i = 1 ,_i_finish = int_of_custom_arity(fmt$1[0]); _i <= _i_finish; ++_i){\n              buffer_add_char(buf, /* \"%\" */37);\n              bprint_ignored_flag(buf, ign_flag);\n              buffer_add_char(buf, /* \"?\" */63);\n            }\n            _ign_flag = false;\n            _fmt = fmt$1[2];\n            continue ;\n        \n      }\n    }\n  };\n}\n\nfunction string_of_fmt(fmt) {\n  var buf = /* record */[\n    /* ind */0,\n    /* bytes */Caml_bytes.caml_create_bytes(16)\n  ];\n  bprint_fmt(buf, fmt);\n  return buffer_contents(buf);\n}\n\nfunction symm(param) {\n  if (typeof param === \"number\") {\n    return /* End_of_fmtty */0;\n  } else {\n    switch (param.tag | 0) {\n      case 0 : \n          return /* Char_ty */Block.__(0, [symm(param[0])]);\n      case 1 : \n          return /* String_ty */Block.__(1, [symm(param[0])]);\n      case 2 : \n          return /* Int_ty */Block.__(2, [symm(param[0])]);\n      case 3 : \n          return /* Int32_ty */Block.__(3, [symm(param[0])]);\n      case 4 : \n          return /* Nativeint_ty */Block.__(4, [symm(param[0])]);\n      case 5 : \n          return /* Int64_ty */Block.__(5, [symm(param[0])]);\n      case 6 : \n          return /* Float_ty */Block.__(6, [symm(param[0])]);\n      case 7 : \n          return /* Bool_ty */Block.__(7, [symm(param[0])]);\n      case 8 : \n          return /* Format_arg_ty */Block.__(8, [\n                    param[0],\n                    symm(param[1])\n                  ]);\n      case 9 : \n          return /* Format_subst_ty */Block.__(9, [\n                    param[1],\n                    param[0],\n                    symm(param[2])\n                  ]);\n      case 10 : \n          return /* Alpha_ty */Block.__(10, [symm(param[0])]);\n      case 11 : \n          return /* Theta_ty */Block.__(11, [symm(param[0])]);\n      case 12 : \n          return /* Any_ty */Block.__(12, [symm(param[0])]);\n      case 13 : \n          return /* Reader_ty */Block.__(13, [symm(param[0])]);\n      case 14 : \n          return /* Ignored_reader_ty */Block.__(14, [symm(param[0])]);\n      \n    }\n  }\n}\n\nfunction fmtty_rel_det(param) {\n  if (typeof param === \"number\") {\n    return /* tuple */[\n            (function (param) {\n                return /* Refl */0;\n              }),\n            (function (param) {\n                return /* Refl */0;\n              }),\n            (function (param) {\n                return /* Refl */0;\n              }),\n            (function (param) {\n                return /* Refl */0;\n              })\n          ];\n  } else {\n    switch (param.tag | 0) {\n      case 0 : \n          var match = fmtty_rel_det(param[0]);\n          var af = match[1];\n          var fa = match[0];\n          return /* tuple */[\n                  (function (param) {\n                      Curry._1(fa, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  (function (param) {\n                      Curry._1(af, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  match[2],\n                  match[3]\n                ];\n      case 1 : \n          var match$1 = fmtty_rel_det(param[0]);\n          var af$1 = match$1[1];\n          var fa$1 = match$1[0];\n          return /* tuple */[\n                  (function (param) {\n                      Curry._1(fa$1, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  (function (param) {\n                      Curry._1(af$1, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  match$1[2],\n                  match$1[3]\n                ];\n      case 2 : \n          var match$2 = fmtty_rel_det(param[0]);\n          var af$2 = match$2[1];\n          var fa$2 = match$2[0];\n          return /* tuple */[\n                  (function (param) {\n                      Curry._1(fa$2, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  (function (param) {\n                      Curry._1(af$2, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  match$2[2],\n                  match$2[3]\n                ];\n      case 3 : \n          var match$3 = fmtty_rel_det(param[0]);\n          var af$3 = match$3[1];\n          var fa$3 = match$3[0];\n          return /* tuple */[\n                  (function (param) {\n                      Curry._1(fa$3, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  (function (param) {\n                      Curry._1(af$3, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  match$3[2],\n                  match$3[3]\n                ];\n      case 4 : \n          var match$4 = fmtty_rel_det(param[0]);\n          var af$4 = match$4[1];\n          var fa$4 = match$4[0];\n          return /* tuple */[\n                  (function (param) {\n                      Curry._1(fa$4, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  (function (param) {\n                      Curry._1(af$4, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  match$4[2],\n                  match$4[3]\n                ];\n      case 5 : \n          var match$5 = fmtty_rel_det(param[0]);\n          var af$5 = match$5[1];\n          var fa$5 = match$5[0];\n          return /* tuple */[\n                  (function (param) {\n                      Curry._1(fa$5, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  (function (param) {\n                      Curry._1(af$5, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  match$5[2],\n                  match$5[3]\n                ];\n      case 6 : \n          var match$6 = fmtty_rel_det(param[0]);\n          var af$6 = match$6[1];\n          var fa$6 = match$6[0];\n          return /* tuple */[\n                  (function (param) {\n                      Curry._1(fa$6, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  (function (param) {\n                      Curry._1(af$6, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  match$6[2],\n                  match$6[3]\n                ];\n      case 7 : \n          var match$7 = fmtty_rel_det(param[0]);\n          var af$7 = match$7[1];\n          var fa$7 = match$7[0];\n          return /* tuple */[\n                  (function (param) {\n                      Curry._1(fa$7, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  (function (param) {\n                      Curry._1(af$7, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  match$7[2],\n                  match$7[3]\n                ];\n      case 8 : \n          var match$8 = fmtty_rel_det(param[1]);\n          var af$8 = match$8[1];\n          var fa$8 = match$8[0];\n          return /* tuple */[\n                  (function (param) {\n                      Curry._1(fa$8, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  (function (param) {\n                      Curry._1(af$8, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  match$8[2],\n                  match$8[3]\n                ];\n      case 9 : \n          var match$9 = fmtty_rel_det(param[2]);\n          var de = match$9[3];\n          var ed = match$9[2];\n          var af$9 = match$9[1];\n          var fa$9 = match$9[0];\n          var ty = trans(symm(param[0]), param[1]);\n          var match$10 = fmtty_rel_det(ty);\n          var jd = match$10[3];\n          var dj = match$10[2];\n          var ga = match$10[1];\n          var ag = match$10[0];\n          return /* tuple */[\n                  (function (param) {\n                      Curry._1(fa$9, /* Refl */0);\n                      Curry._1(ag, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  (function (param) {\n                      Curry._1(ga, /* Refl */0);\n                      Curry._1(af$9, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  (function (param) {\n                      Curry._1(ed, /* Refl */0);\n                      Curry._1(dj, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  (function (param) {\n                      Curry._1(jd, /* Refl */0);\n                      Curry._1(de, /* Refl */0);\n                      return /* Refl */0;\n                    })\n                ];\n      case 10 : \n          var match$11 = fmtty_rel_det(param[0]);\n          var af$10 = match$11[1];\n          var fa$10 = match$11[0];\n          return /* tuple */[\n                  (function (param) {\n                      Curry._1(fa$10, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  (function (param) {\n                      Curry._1(af$10, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  match$11[2],\n                  match$11[3]\n                ];\n      case 11 : \n          var match$12 = fmtty_rel_det(param[0]);\n          var af$11 = match$12[1];\n          var fa$11 = match$12[0];\n          return /* tuple */[\n                  (function (param) {\n                      Curry._1(fa$11, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  (function (param) {\n                      Curry._1(af$11, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  match$12[2],\n                  match$12[3]\n                ];\n      case 12 : \n          var match$13 = fmtty_rel_det(param[0]);\n          var af$12 = match$13[1];\n          var fa$12 = match$13[0];\n          return /* tuple */[\n                  (function (param) {\n                      Curry._1(fa$12, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  (function (param) {\n                      Curry._1(af$12, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  match$13[2],\n                  match$13[3]\n                ];\n      case 13 : \n          var match$14 = fmtty_rel_det(param[0]);\n          var de$1 = match$14[3];\n          var ed$1 = match$14[2];\n          var af$13 = match$14[1];\n          var fa$13 = match$14[0];\n          return /* tuple */[\n                  (function (param) {\n                      Curry._1(fa$13, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  (function (param) {\n                      Curry._1(af$13, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  (function (param) {\n                      Curry._1(ed$1, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  (function (param) {\n                      Curry._1(de$1, /* Refl */0);\n                      return /* Refl */0;\n                    })\n                ];\n      case 14 : \n          var match$15 = fmtty_rel_det(param[0]);\n          var de$2 = match$15[3];\n          var ed$2 = match$15[2];\n          var af$14 = match$15[1];\n          var fa$14 = match$15[0];\n          return /* tuple */[\n                  (function (param) {\n                      Curry._1(fa$14, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  (function (param) {\n                      Curry._1(af$14, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  (function (param) {\n                      Curry._1(ed$2, /* Refl */0);\n                      return /* Refl */0;\n                    }),\n                  (function (param) {\n                      Curry._1(de$2, /* Refl */0);\n                      return /* Refl */0;\n                    })\n                ];\n      \n    }\n  }\n}\n\nfunction trans(ty1, ty2) {\n  var exit = 0;\n  if (typeof ty1 === \"number\") {\n    if (typeof ty2 === \"number\") {\n      return /* End_of_fmtty */0;\n    } else {\n      switch (ty2.tag | 0) {\n        case 8 : \n            exit = 6;\n            break;\n        case 9 : \n            exit = 7;\n            break;\n        case 10 : \n            exit = 1;\n            break;\n        case 11 : \n            exit = 2;\n            break;\n        case 12 : \n            exit = 3;\n            break;\n        case 13 : \n            exit = 4;\n            break;\n        case 14 : \n            exit = 5;\n            break;\n        default:\n          throw [\n                Caml_builtin_exceptions.assert_failure,\n                /* tuple */[\n                  \"camlinternalFormat.ml\",\n                  816,\n                  23\n                ]\n              ];\n      }\n    }\n  } else {\n    switch (ty1.tag | 0) {\n      case 0 : \n          if (typeof ty2 === \"number\") {\n            exit = 8;\n          } else {\n            switch (ty2.tag | 0) {\n              case 0 : \n                  return /* Char_ty */Block.__(0, [trans(ty1[0], ty2[0])]);\n              case 8 : \n                  exit = 6;\n                  break;\n              case 9 : \n                  exit = 7;\n                  break;\n              case 10 : \n                  exit = 1;\n                  break;\n              case 11 : \n                  exit = 2;\n                  break;\n              case 12 : \n                  exit = 3;\n                  break;\n              case 13 : \n                  exit = 4;\n                  break;\n              case 14 : \n                  exit = 5;\n                  break;\n              \n            }\n          }\n          break;\n      case 1 : \n          if (typeof ty2 === \"number\") {\n            exit = 8;\n          } else {\n            switch (ty2.tag | 0) {\n              case 1 : \n                  return /* String_ty */Block.__(1, [trans(ty1[0], ty2[0])]);\n              case 8 : \n                  exit = 6;\n                  break;\n              case 9 : \n                  exit = 7;\n                  break;\n              case 10 : \n                  exit = 1;\n                  break;\n              case 11 : \n                  exit = 2;\n                  break;\n              case 12 : \n                  exit = 3;\n                  break;\n              case 13 : \n                  exit = 4;\n                  break;\n              case 14 : \n                  exit = 5;\n                  break;\n              \n            }\n          }\n          break;\n      case 2 : \n          if (typeof ty2 === \"number\") {\n            exit = 8;\n          } else {\n            switch (ty2.tag | 0) {\n              case 2 : \n                  return /* Int_ty */Block.__(2, [trans(ty1[0], ty2[0])]);\n              case 8 : \n                  exit = 6;\n                  break;\n              case 9 : \n                  exit = 7;\n                  break;\n              case 10 : \n                  exit = 1;\n                  break;\n              case 11 : \n                  exit = 2;\n                  break;\n              case 12 : \n                  exit = 3;\n                  break;\n              case 13 : \n                  exit = 4;\n                  break;\n              case 14 : \n                  exit = 5;\n                  break;\n              \n            }\n          }\n          break;\n      case 3 : \n          if (typeof ty2 === \"number\") {\n            exit = 8;\n          } else {\n            switch (ty2.tag | 0) {\n              case 3 : \n                  return /* Int32_ty */Block.__(3, [trans(ty1[0], ty2[0])]);\n              case 8 : \n                  exit = 6;\n                  break;\n              case 9 : \n                  exit = 7;\n                  break;\n              case 10 : \n                  exit = 1;\n                  break;\n              case 11 : \n                  exit = 2;\n                  break;\n              case 12 : \n                  exit = 3;\n                  break;\n              case 13 : \n                  exit = 4;\n                  break;\n              case 14 : \n                  exit = 5;\n                  break;\n              \n            }\n          }\n          break;\n      case 4 : \n          if (typeof ty2 === \"number\") {\n            exit = 8;\n          } else {\n            switch (ty2.tag | 0) {\n              case 4 : \n                  return /* Nativeint_ty */Block.__(4, [trans(ty1[0], ty2[0])]);\n              case 8 : \n                  exit = 6;\n                  break;\n              case 9 : \n                  exit = 7;\n                  break;\n              case 10 : \n                  exit = 1;\n                  break;\n              case 11 : \n                  exit = 2;\n                  break;\n              case 12 : \n                  exit = 3;\n                  break;\n              case 13 : \n                  exit = 4;\n                  break;\n              case 14 : \n                  exit = 5;\n                  break;\n              \n            }\n          }\n          break;\n      case 5 : \n          if (typeof ty2 === \"number\") {\n            exit = 8;\n          } else {\n            switch (ty2.tag | 0) {\n              case 5 : \n                  return /* Int64_ty */Block.__(5, [trans(ty1[0], ty2[0])]);\n              case 8 : \n                  exit = 6;\n                  break;\n              case 9 : \n                  exit = 7;\n                  break;\n              case 10 : \n                  exit = 1;\n                  break;\n              case 11 : \n                  exit = 2;\n                  break;\n              case 12 : \n                  exit = 3;\n                  break;\n              case 13 : \n                  exit = 4;\n                  break;\n              case 14 : \n                  exit = 5;\n                  break;\n              \n            }\n          }\n          break;\n      case 6 : \n          if (typeof ty2 === \"number\") {\n            exit = 8;\n          } else {\n            switch (ty2.tag | 0) {\n              case 6 : \n                  return /* Float_ty */Block.__(6, [trans(ty1[0], ty2[0])]);\n              case 8 : \n                  exit = 6;\n                  break;\n              case 9 : \n                  exit = 7;\n                  break;\n              case 10 : \n                  exit = 1;\n                  break;\n              case 11 : \n                  exit = 2;\n                  break;\n              case 12 : \n                  exit = 3;\n                  break;\n              case 13 : \n                  exit = 4;\n                  break;\n              case 14 : \n                  exit = 5;\n                  break;\n              \n            }\n          }\n          break;\n      case 7 : \n          if (typeof ty2 === \"number\") {\n            exit = 8;\n          } else {\n            switch (ty2.tag | 0) {\n              case 7 : \n                  return /* Bool_ty */Block.__(7, [trans(ty1[0], ty2[0])]);\n              case 8 : \n                  exit = 6;\n                  break;\n              case 9 : \n                  exit = 7;\n                  break;\n              case 10 : \n                  exit = 1;\n                  break;\n              case 11 : \n                  exit = 2;\n                  break;\n              case 12 : \n                  exit = 3;\n                  break;\n              case 13 : \n                  exit = 4;\n                  break;\n              case 14 : \n                  exit = 5;\n                  break;\n              \n            }\n          }\n          break;\n      case 8 : \n          if (typeof ty2 === \"number\") {\n            throw [\n                  Caml_builtin_exceptions.assert_failure,\n                  /* tuple */[\n                    \"camlinternalFormat.ml\",\n                    802,\n                    26\n                  ]\n                ];\n          } else {\n            switch (ty2.tag | 0) {\n              case 8 : \n                  return /* Format_arg_ty */Block.__(8, [\n                            trans(ty1[0], ty2[0]),\n                            trans(ty1[1], ty2[1])\n                          ]);\n              case 10 : \n                  exit = 1;\n                  break;\n              case 11 : \n                  exit = 2;\n                  break;\n              case 12 : \n                  exit = 3;\n                  break;\n              case 13 : \n                  exit = 4;\n                  break;\n              case 14 : \n                  exit = 5;\n                  break;\n              default:\n                throw [\n                      Caml_builtin_exceptions.assert_failure,\n                      /* tuple */[\n                        \"camlinternalFormat.ml\",\n                        802,\n                        26\n                      ]\n                    ];\n            }\n          }\n          break;\n      case 9 : \n          if (typeof ty2 === \"number\") {\n            throw [\n                  Caml_builtin_exceptions.assert_failure,\n                  /* tuple */[\n                    \"camlinternalFormat.ml\",\n                    812,\n                    28\n                  ]\n                ];\n          } else {\n            switch (ty2.tag | 0) {\n              case 8 : \n                  exit = 6;\n                  break;\n              case 9 : \n                  var ty = trans(symm(ty1[1]), ty2[0]);\n                  var match = fmtty_rel_det(ty);\n                  Curry._1(match[1], /* Refl */0);\n                  Curry._1(match[3], /* Refl */0);\n                  return /* Format_subst_ty */Block.__(9, [\n                            ty1[0],\n                            ty2[1],\n                            trans(ty1[2], ty2[2])\n                          ]);\n              case 10 : \n                  exit = 1;\n                  break;\n              case 11 : \n                  exit = 2;\n                  break;\n              case 12 : \n                  exit = 3;\n                  break;\n              case 13 : \n                  exit = 4;\n                  break;\n              case 14 : \n                  exit = 5;\n                  break;\n              default:\n                throw [\n                      Caml_builtin_exceptions.assert_failure,\n                      /* tuple */[\n                        \"camlinternalFormat.ml\",\n                        812,\n                        28\n                      ]\n                    ];\n            }\n          }\n          break;\n      case 10 : \n          if (typeof ty2 === \"number\") {\n            throw [\n                  Caml_builtin_exceptions.assert_failure,\n                  /* tuple */[\n                    \"camlinternalFormat.ml\",\n                    780,\n                    21\n                  ]\n                ];\n          } else if (ty2.tag === 10) {\n            return /* Alpha_ty */Block.__(10, [trans(ty1[0], ty2[0])]);\n          } else {\n            throw [\n                  Caml_builtin_exceptions.assert_failure,\n                  /* tuple */[\n                    \"camlinternalFormat.ml\",\n                    780,\n                    21\n                  ]\n                ];\n          }\n      case 11 : \n          if (typeof ty2 === \"number\") {\n            throw [\n                  Caml_builtin_exceptions.assert_failure,\n                  /* tuple */[\n                    \"camlinternalFormat.ml\",\n                    784,\n                    21\n                  ]\n                ];\n          } else {\n            switch (ty2.tag | 0) {\n              case 10 : \n                  exit = 1;\n                  break;\n              case 11 : \n                  return /* Theta_ty */Block.__(11, [trans(ty1[0], ty2[0])]);\n              default:\n                throw [\n                      Caml_builtin_exceptions.assert_failure,\n                      /* tuple */[\n                        \"camlinternalFormat.ml\",\n                        784,\n                        21\n                      ]\n                    ];\n            }\n          }\n          break;\n      case 12 : \n          if (typeof ty2 === \"number\") {\n            throw [\n                  Caml_builtin_exceptions.assert_failure,\n                  /* tuple */[\n                    \"camlinternalFormat.ml\",\n                    788,\n                    19\n                  ]\n                ];\n          } else {\n            switch (ty2.tag | 0) {\n              case 10 : \n                  exit = 1;\n                  break;\n              case 11 : \n                  exit = 2;\n                  break;\n              case 12 : \n                  return /* Any_ty */Block.__(12, [trans(ty1[0], ty2[0])]);\n              default:\n                throw [\n                      Caml_builtin_exceptions.assert_failure,\n                      /* tuple */[\n                        \"camlinternalFormat.ml\",\n                        788,\n                        19\n                      ]\n                    ];\n            }\n          }\n          break;\n      case 13 : \n          if (typeof ty2 === \"number\") {\n            throw [\n                  Caml_builtin_exceptions.assert_failure,\n                  /* tuple */[\n                    \"camlinternalFormat.ml\",\n                    792,\n                    22\n                  ]\n                ];\n          } else {\n            switch (ty2.tag | 0) {\n              case 10 : \n                  exit = 1;\n                  break;\n              case 11 : \n                  exit = 2;\n                  break;\n              case 12 : \n                  exit = 3;\n                  break;\n              case 13 : \n                  return /* Reader_ty */Block.__(13, [trans(ty1[0], ty2[0])]);\n              default:\n                throw [\n                      Caml_builtin_exceptions.assert_failure,\n                      /* tuple */[\n                        \"camlinternalFormat.ml\",\n                        792,\n                        22\n                      ]\n                    ];\n            }\n          }\n          break;\n      case 14 : \n          if (typeof ty2 === \"number\") {\n            throw [\n                  Caml_builtin_exceptions.assert_failure,\n                  /* tuple */[\n                    \"camlinternalFormat.ml\",\n                    797,\n                    30\n                  ]\n                ];\n          } else {\n            switch (ty2.tag | 0) {\n              case 10 : \n                  exit = 1;\n                  break;\n              case 11 : \n                  exit = 2;\n                  break;\n              case 12 : \n                  exit = 3;\n                  break;\n              case 13 : \n                  exit = 4;\n                  break;\n              case 14 : \n                  return /* Ignored_reader_ty */Block.__(14, [trans(ty1[0], ty2[0])]);\n              default:\n                throw [\n                      Caml_builtin_exceptions.assert_failure,\n                      /* tuple */[\n                        \"camlinternalFormat.ml\",\n                        797,\n                        30\n                      ]\n                    ];\n            }\n          }\n          break;\n      \n    }\n  }\n  switch (exit) {\n    case 1 : \n        throw [\n              Caml_builtin_exceptions.assert_failure,\n              /* tuple */[\n                \"camlinternalFormat.ml\",\n                781,\n                21\n              ]\n            ];\n    case 2 : \n        throw [\n              Caml_builtin_exceptions.assert_failure,\n              /* tuple */[\n                \"camlinternalFormat.ml\",\n                785,\n                21\n              ]\n            ];\n    case 3 : \n        throw [\n              Caml_builtin_exceptions.assert_failure,\n              /* tuple */[\n                \"camlinternalFormat.ml\",\n                789,\n                19\n              ]\n            ];\n    case 4 : \n        throw [\n              Caml_builtin_exceptions.assert_failure,\n              /* tuple */[\n                \"camlinternalFormat.ml\",\n                793,\n                22\n              ]\n            ];\n    case 5 : \n        throw [\n              Caml_builtin_exceptions.assert_failure,\n              /* tuple */[\n                \"camlinternalFormat.ml\",\n                798,\n                30\n              ]\n            ];\n    case 6 : \n        throw [\n              Caml_builtin_exceptions.assert_failure,\n              /* tuple */[\n                \"camlinternalFormat.ml\",\n                803,\n                26\n              ]\n            ];\n    case 7 : \n        throw [\n              Caml_builtin_exceptions.assert_failure,\n              /* tuple */[\n                \"camlinternalFormat.ml\",\n                813,\n                28\n              ]\n            ];\n    case 8 : \n        throw [\n              Caml_builtin_exceptions.assert_failure,\n              /* tuple */[\n                \"camlinternalFormat.ml\",\n                817,\n                23\n              ]\n            ];\n    \n  }\n}\n\nfunction fmtty_of_formatting_gen(formatting_gen) {\n  return fmtty_of_fmt(formatting_gen[0][0]);\n}\n\nfunction fmtty_of_fmt(_fmtty) {\n  while(true) {\n    var fmtty = _fmtty;\n    var exit = 0;\n    if (typeof fmtty === \"number\") {\n      return /* End_of_fmtty */0;\n    } else {\n      switch (fmtty.tag | 0) {\n        case 2 : \n        case 3 : \n            exit = 1;\n            break;\n        case 4 : \n            var ty_rest = fmtty_of_fmt(fmtty[3]);\n            var prec_ty = fmtty_of_precision_fmtty(fmtty[2], /* Int_ty */Block.__(2, [ty_rest]));\n            return fmtty_of_padding_fmtty(fmtty[1], prec_ty);\n        case 5 : \n            var ty_rest$1 = fmtty_of_fmt(fmtty[3]);\n            var prec_ty$1 = fmtty_of_precision_fmtty(fmtty[2], /* Int32_ty */Block.__(3, [ty_rest$1]));\n            return fmtty_of_padding_fmtty(fmtty[1], prec_ty$1);\n        case 6 : \n            var ty_rest$2 = fmtty_of_fmt(fmtty[3]);\n            var prec_ty$2 = fmtty_of_precision_fmtty(fmtty[2], /* Nativeint_ty */Block.__(4, [ty_rest$2]));\n            return fmtty_of_padding_fmtty(fmtty[1], prec_ty$2);\n        case 7 : \n            var ty_rest$3 = fmtty_of_fmt(fmtty[3]);\n            var prec_ty$3 = fmtty_of_precision_fmtty(fmtty[2], /* Int64_ty */Block.__(5, [ty_rest$3]));\n            return fmtty_of_padding_fmtty(fmtty[1], prec_ty$3);\n        case 8 : \n            var ty_rest$4 = fmtty_of_fmt(fmtty[3]);\n            var prec_ty$4 = fmtty_of_precision_fmtty(fmtty[2], /* Float_ty */Block.__(6, [ty_rest$4]));\n            return fmtty_of_padding_fmtty(fmtty[1], prec_ty$4);\n        case 9 : \n            return /* Bool_ty */Block.__(7, [fmtty_of_fmt(fmtty[0])]);\n        case 10 : \n            _fmtty = fmtty[0];\n            continue ;\n        case 13 : \n            return /* Format_arg_ty */Block.__(8, [\n                      fmtty[1],\n                      fmtty_of_fmt(fmtty[2])\n                    ]);\n        case 14 : \n            var ty = fmtty[1];\n            return /* Format_subst_ty */Block.__(9, [\n                      ty,\n                      ty,\n                      fmtty_of_fmt(fmtty[2])\n                    ]);\n        case 15 : \n            return /* Alpha_ty */Block.__(10, [fmtty_of_fmt(fmtty[0])]);\n        case 16 : \n            return /* Theta_ty */Block.__(11, [fmtty_of_fmt(fmtty[0])]);\n        case 18 : \n            return CamlinternalFormatBasics.concat_fmtty(fmtty_of_formatting_gen(fmtty[0]), fmtty_of_fmt(fmtty[1]));\n        case 19 : \n            return /* Reader_ty */Block.__(13, [fmtty_of_fmt(fmtty[0])]);\n        case 20 : \n            return /* String_ty */Block.__(1, [fmtty_of_fmt(fmtty[2])]);\n        case 21 : \n            return /* Int_ty */Block.__(2, [fmtty_of_fmt(fmtty[1])]);\n        case 0 : \n        case 1 : \n        case 22 : \n            return /* Char_ty */Block.__(0, [fmtty_of_fmt(fmtty[0])]);\n        case 23 : \n            var ign = fmtty[0];\n            var fmt = fmtty[1];\n            if (typeof ign === \"number\") {\n              if (ign === 3) {\n                return /* Ignored_reader_ty */Block.__(14, [fmtty_of_fmt(fmt)]);\n              } else {\n                return fmtty_of_fmt(fmt);\n              }\n            } else if (ign.tag === 8) {\n              return CamlinternalFormatBasics.concat_fmtty(ign[1], fmtty_of_fmt(fmt));\n            } else {\n              return fmtty_of_fmt(fmt);\n            }\n        case 24 : \n            return fmtty_of_custom(fmtty[0], fmtty_of_fmt(fmtty[2]));\n        default:\n          _fmtty = fmtty[1];\n          continue ;\n      }\n    }\n    if (exit === 1) {\n      return fmtty_of_padding_fmtty(fmtty[0], /* String_ty */Block.__(1, [fmtty_of_fmt(fmtty[1])]));\n    }\n    \n  };\n}\n\nfunction fmtty_of_custom(arity, fmtty) {\n  if (arity) {\n    return /* Any_ty */Block.__(12, [fmtty_of_custom(arity[0], fmtty)]);\n  } else {\n    return fmtty;\n  }\n}\n\nfunction fmtty_of_padding_fmtty(pad, fmtty) {\n  if (typeof pad === \"number\" || !pad.tag) {\n    return fmtty;\n  } else {\n    return /* Int_ty */Block.__(2, [fmtty]);\n  }\n}\n\nfunction fmtty_of_precision_fmtty(prec, fmtty) {\n  if (typeof prec === \"number\" && prec !== 0) {\n    return /* Int_ty */Block.__(2, [fmtty]);\n  } else {\n    return fmtty;\n  }\n}\n\nvar Type_mismatch = Caml_exceptions.create(\"CamlinternalFormat.Type_mismatch\");\n\nfunction type_padding(pad, fmtty) {\n  if (typeof pad === \"number\") {\n    return /* Padding_fmtty_EBB */[\n            /* No_padding */0,\n            fmtty\n          ];\n  } else if (pad.tag) {\n    if (typeof fmtty === \"number\") {\n      throw Type_mismatch;\n    } else if (fmtty.tag === 2) {\n      return /* Padding_fmtty_EBB */[\n              /* Arg_padding */Block.__(1, [pad[0]]),\n              fmtty[0]\n            ];\n    } else {\n      throw Type_mismatch;\n    }\n  } else {\n    return /* Padding_fmtty_EBB */[\n            /* Lit_padding */Block.__(0, [\n                pad[0],\n                pad[1]\n              ]),\n            fmtty\n          ];\n  }\n}\n\nfunction type_padprec(pad, prec, fmtty) {\n  var match = type_padding(pad, fmtty);\n  if (typeof prec === \"number\") {\n    if (prec !== 0) {\n      var match$1 = match[1];\n      if (typeof match$1 === \"number\") {\n        throw Type_mismatch;\n      } else if (match$1.tag === 2) {\n        return /* Padprec_fmtty_EBB */[\n                match[0],\n                /* Arg_precision */1,\n                match$1[0]\n              ];\n      } else {\n        throw Type_mismatch;\n      }\n    } else {\n      return /* Padprec_fmtty_EBB */[\n              match[0],\n              /* No_precision */0,\n              match[1]\n            ];\n    }\n  } else {\n    return /* Padprec_fmtty_EBB */[\n            match[0],\n            /* Lit_precision */[prec[0]],\n            match[1]\n          ];\n  }\n}\n\nfunction type_ignored_param_one(ign, fmt, fmtty) {\n  var match = type_format_gen(fmt, fmtty);\n  return /* Fmt_fmtty_EBB */[\n          /* Ignored_param */Block.__(23, [\n              ign,\n              match[0]\n            ]),\n          match[1]\n        ];\n}\n\nfunction type_format_gen(fmt, fmtty) {\n  if (typeof fmt === \"number\") {\n    return /* Fmt_fmtty_EBB */[\n            /* End_of_format */0,\n            fmtty\n          ];\n  } else {\n    switch (fmt.tag | 0) {\n      case 0 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          } else if (fmtty.tag) {\n            throw Type_mismatch;\n          } else {\n            var match = type_format_gen(fmt[0], fmtty[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Char */Block.__(0, [match[0]]),\n                    match[1]\n                  ];\n          }\n      case 1 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          } else if (fmtty.tag) {\n            throw Type_mismatch;\n          } else {\n            var match$1 = type_format_gen(fmt[0], fmtty[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Caml_char */Block.__(1, [match$1[0]]),\n                    match$1[1]\n                  ];\n          }\n      case 2 : \n          var match$2 = type_padding(fmt[0], fmtty);\n          var match$3 = match$2[1];\n          if (typeof match$3 === \"number\") {\n            throw Type_mismatch;\n          } else if (match$3.tag === 1) {\n            var match$4 = type_format_gen(fmt[1], match$3[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* String */Block.__(2, [\n                        match$2[0],\n                        match$4[0]\n                      ]),\n                    match$4[1]\n                  ];\n          } else {\n            throw Type_mismatch;\n          }\n      case 3 : \n          var match$5 = type_padding(fmt[0], fmtty);\n          var match$6 = match$5[1];\n          if (typeof match$6 === \"number\") {\n            throw Type_mismatch;\n          } else if (match$6.tag === 1) {\n            var match$7 = type_format_gen(fmt[1], match$6[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Caml_string */Block.__(3, [\n                        match$5[0],\n                        match$7[0]\n                      ]),\n                    match$7[1]\n                  ];\n          } else {\n            throw Type_mismatch;\n          }\n      case 4 : \n          var match$8 = type_padprec(fmt[1], fmt[2], fmtty);\n          var match$9 = match$8[2];\n          if (typeof match$9 === \"number\") {\n            throw Type_mismatch;\n          } else if (match$9.tag === 2) {\n            var match$10 = type_format_gen(fmt[3], match$9[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Int */Block.__(4, [\n                        fmt[0],\n                        match$8[0],\n                        match$8[1],\n                        match$10[0]\n                      ]),\n                    match$10[1]\n                  ];\n          } else {\n            throw Type_mismatch;\n          }\n      case 5 : \n          var match$11 = type_padprec(fmt[1], fmt[2], fmtty);\n          var match$12 = match$11[2];\n          if (typeof match$12 === \"number\") {\n            throw Type_mismatch;\n          } else if (match$12.tag === 3) {\n            var match$13 = type_format_gen(fmt[3], match$12[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Int32 */Block.__(5, [\n                        fmt[0],\n                        match$11[0],\n                        match$11[1],\n                        match$13[0]\n                      ]),\n                    match$13[1]\n                  ];\n          } else {\n            throw Type_mismatch;\n          }\n      case 6 : \n          var match$14 = type_padprec(fmt[1], fmt[2], fmtty);\n          var match$15 = match$14[2];\n          if (typeof match$15 === \"number\") {\n            throw Type_mismatch;\n          } else if (match$15.tag === 4) {\n            var match$16 = type_format_gen(fmt[3], match$15[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Nativeint */Block.__(6, [\n                        fmt[0],\n                        match$14[0],\n                        match$14[1],\n                        match$16[0]\n                      ]),\n                    match$16[1]\n                  ];\n          } else {\n            throw Type_mismatch;\n          }\n      case 7 : \n          var match$17 = type_padprec(fmt[1], fmt[2], fmtty);\n          var match$18 = match$17[2];\n          if (typeof match$18 === \"number\") {\n            throw Type_mismatch;\n          } else if (match$18.tag === 5) {\n            var match$19 = type_format_gen(fmt[3], match$18[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Int64 */Block.__(7, [\n                        fmt[0],\n                        match$17[0],\n                        match$17[1],\n                        match$19[0]\n                      ]),\n                    match$19[1]\n                  ];\n          } else {\n            throw Type_mismatch;\n          }\n      case 8 : \n          var match$20 = type_padprec(fmt[1], fmt[2], fmtty);\n          var match$21 = match$20[2];\n          if (typeof match$21 === \"number\") {\n            throw Type_mismatch;\n          } else if (match$21.tag === 6) {\n            var match$22 = type_format_gen(fmt[3], match$21[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Float */Block.__(8, [\n                        fmt[0],\n                        match$20[0],\n                        match$20[1],\n                        match$22[0]\n                      ]),\n                    match$22[1]\n                  ];\n          } else {\n            throw Type_mismatch;\n          }\n      case 9 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          } else if (fmtty.tag === 7) {\n            var match$23 = type_format_gen(fmt[0], fmtty[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Bool */Block.__(9, [match$23[0]]),\n                    match$23[1]\n                  ];\n          } else {\n            throw Type_mismatch;\n          }\n      case 10 : \n          var match$24 = type_format_gen(fmt[0], fmtty);\n          return /* Fmt_fmtty_EBB */[\n                  /* Flush */Block.__(10, [match$24[0]]),\n                  match$24[1]\n                ];\n      case 11 : \n          var match$25 = type_format_gen(fmt[1], fmtty);\n          return /* Fmt_fmtty_EBB */[\n                  /* String_literal */Block.__(11, [\n                      fmt[0],\n                      match$25[0]\n                    ]),\n                  match$25[1]\n                ];\n      case 12 : \n          var match$26 = type_format_gen(fmt[1], fmtty);\n          return /* Fmt_fmtty_EBB */[\n                  /* Char_literal */Block.__(12, [\n                      fmt[0],\n                      match$26[0]\n                    ]),\n                  match$26[1]\n                ];\n      case 13 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          } else if (fmtty.tag === 8) {\n            var sub_fmtty$prime = fmtty[0];\n            if (Caml_obj.caml_notequal(/* Fmtty_EBB */[fmt[1]], /* Fmtty_EBB */[sub_fmtty$prime])) {\n              throw Type_mismatch;\n            }\n            var match$27 = type_format_gen(fmt[2], fmtty[1]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Format_arg */Block.__(13, [\n                        fmt[0],\n                        sub_fmtty$prime,\n                        match$27[0]\n                      ]),\n                    match$27[1]\n                  ];\n          } else {\n            throw Type_mismatch;\n          }\n      case 14 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          } else if (fmtty.tag === 9) {\n            var sub_fmtty1 = fmtty[0];\n            if (Caml_obj.caml_notequal(/* Fmtty_EBB */[CamlinternalFormatBasics.erase_rel(fmt[1])], /* Fmtty_EBB */[CamlinternalFormatBasics.erase_rel(sub_fmtty1)])) {\n              throw Type_mismatch;\n            }\n            var match$28 = type_format_gen(fmt[2], CamlinternalFormatBasics.erase_rel(fmtty[2]));\n            return /* Fmt_fmtty_EBB */[\n                    /* Format_subst */Block.__(14, [\n                        fmt[0],\n                        sub_fmtty1,\n                        match$28[0]\n                      ]),\n                    match$28[1]\n                  ];\n          } else {\n            throw Type_mismatch;\n          }\n      case 15 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          } else if (fmtty.tag === 10) {\n            var match$29 = type_format_gen(fmt[0], fmtty[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Alpha */Block.__(15, [match$29[0]]),\n                    match$29[1]\n                  ];\n          } else {\n            throw Type_mismatch;\n          }\n      case 16 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          } else if (fmtty.tag === 11) {\n            var match$30 = type_format_gen(fmt[0], fmtty[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Theta */Block.__(16, [match$30[0]]),\n                    match$30[1]\n                  ];\n          } else {\n            throw Type_mismatch;\n          }\n      case 17 : \n          var match$31 = type_format_gen(fmt[1], fmtty);\n          return /* Fmt_fmtty_EBB */[\n                  /* Formatting_lit */Block.__(17, [\n                      fmt[0],\n                      match$31[0]\n                    ]),\n                  match$31[1]\n                ];\n      case 18 : \n          var formatting_gen = fmt[0];\n          var fmt0 = fmt[1];\n          var fmtty0 = fmtty;\n          if (formatting_gen.tag) {\n            var match$32 = formatting_gen[0];\n            var match$33 = type_format_gen(match$32[0], fmtty0);\n            var match$34 = type_format_gen(fmt0, match$33[1]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Formatting_gen */Block.__(18, [\n                        /* Open_box */Block.__(1, [/* Format */[\n                              match$33[0],\n                              match$32[1]\n                            ]]),\n                        match$34[0]\n                      ]),\n                    match$34[1]\n                  ];\n          } else {\n            var match$35 = formatting_gen[0];\n            var match$36 = type_format_gen(match$35[0], fmtty0);\n            var match$37 = type_format_gen(fmt0, match$36[1]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Formatting_gen */Block.__(18, [\n                        /* Open_tag */Block.__(0, [/* Format */[\n                              match$36[0],\n                              match$35[1]\n                            ]]),\n                        match$37[0]\n                      ]),\n                    match$37[1]\n                  ];\n          }\n      case 19 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          } else if (fmtty.tag === 13) {\n            var match$38 = type_format_gen(fmt[0], fmtty[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Reader */Block.__(19, [match$38[0]]),\n                    match$38[1]\n                  ];\n          } else {\n            throw Type_mismatch;\n          }\n      case 20 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          } else if (fmtty.tag === 1) {\n            var match$39 = type_format_gen(fmt[2], fmtty[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Scan_char_set */Block.__(20, [\n                        fmt[0],\n                        fmt[1],\n                        match$39[0]\n                      ]),\n                    match$39[1]\n                  ];\n          } else {\n            throw Type_mismatch;\n          }\n      case 21 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          } else if (fmtty.tag === 2) {\n            var match$40 = type_format_gen(fmt[1], fmtty[0]);\n            return /* Fmt_fmtty_EBB */[\n                    /* Scan_get_counter */Block.__(21, [\n                        fmt[0],\n                        match$40[0]\n                      ]),\n                    match$40[1]\n                  ];\n          } else {\n            throw Type_mismatch;\n          }\n      case 23 : \n          var ign = fmt[0];\n          var fmt$1 = fmt[1];\n          var fmtty$1 = fmtty;\n          if (typeof ign === \"number\") {\n            if (ign === 3) {\n              if (typeof fmtty$1 === \"number\") {\n                throw Type_mismatch;\n              } else if (fmtty$1.tag === 14) {\n                var match$41 = type_format_gen(fmt$1, fmtty$1[0]);\n                return /* Fmt_fmtty_EBB */[\n                        /* Ignored_param */Block.__(23, [\n                            /* Ignored_reader */3,\n                            match$41[0]\n                          ]),\n                        match$41[1]\n                      ];\n              } else {\n                throw Type_mismatch;\n              }\n            } else {\n              return type_ignored_param_one(ign, fmt$1, fmtty$1);\n            }\n          } else {\n            switch (ign.tag | 0) {\n              case 7 : \n                  return type_ignored_param_one(/* Ignored_format_arg */Block.__(7, [\n                                ign[0],\n                                ign[1]\n                              ]), fmt$1, fmtty$1);\n              case 8 : \n                  var match$42 = type_ignored_format_substitution(ign[1], fmt$1, fmtty$1);\n                  var match$43 = match$42[1];\n                  return /* Fmt_fmtty_EBB */[\n                          /* Ignored_param */Block.__(23, [\n                              /* Ignored_format_subst */Block.__(8, [\n                                  ign[0],\n                                  match$42[0]\n                                ]),\n                              match$43[0]\n                            ]),\n                          match$43[1]\n                        ];\n              default:\n                return type_ignored_param_one(ign, fmt$1, fmtty$1);\n            }\n          }\n      case 22 : \n      case 24 : \n          throw Type_mismatch;\n      \n    }\n  }\n}\n\nfunction type_ignored_format_substitution(sub_fmtty, fmt, fmtty) {\n  if (typeof sub_fmtty === \"number\") {\n    return /* Fmtty_fmt_EBB */[\n            /* End_of_fmtty */0,\n            type_format_gen(fmt, fmtty)\n          ];\n  } else {\n    switch (sub_fmtty.tag | 0) {\n      case 0 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          } else if (fmtty.tag) {\n            throw Type_mismatch;\n          } else {\n            var match = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);\n            return /* Fmtty_fmt_EBB */[\n                    /* Char_ty */Block.__(0, [match[0]]),\n                    match[1]\n                  ];\n          }\n      case 1 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          } else if (fmtty.tag === 1) {\n            var match$1 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);\n            return /* Fmtty_fmt_EBB */[\n                    /* String_ty */Block.__(1, [match$1[0]]),\n                    match$1[1]\n                  ];\n          } else {\n            throw Type_mismatch;\n          }\n      case 2 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          } else if (fmtty.tag === 2) {\n            var match$2 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);\n            return /* Fmtty_fmt_EBB */[\n                    /* Int_ty */Block.__(2, [match$2[0]]),\n                    match$2[1]\n                  ];\n          } else {\n            throw Type_mismatch;\n          }\n      case 3 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          } else if (fmtty.tag === 3) {\n            var match$3 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);\n            return /* Fmtty_fmt_EBB */[\n                    /* Int32_ty */Block.__(3, [match$3[0]]),\n                    match$3[1]\n                  ];\n          } else {\n            throw Type_mismatch;\n          }\n      case 4 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          } else if (fmtty.tag === 4) {\n            var match$4 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);\n            return /* Fmtty_fmt_EBB */[\n                    /* Nativeint_ty */Block.__(4, [match$4[0]]),\n                    match$4[1]\n                  ];\n          } else {\n            throw Type_mismatch;\n          }\n      case 5 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          } else if (fmtty.tag === 5) {\n            var match$5 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);\n            return /* Fmtty_fmt_EBB */[\n                    /* Int64_ty */Block.__(5, [match$5[0]]),\n                    match$5[1]\n                  ];\n          } else {\n            throw Type_mismatch;\n          }\n      case 6 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          } else if (fmtty.tag === 6) {\n            var match$6 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);\n            return /* Fmtty_fmt_EBB */[\n                    /* Float_ty */Block.__(6, [match$6[0]]),\n                    match$6[1]\n                  ];\n          } else {\n            throw Type_mismatch;\n          }\n      case 7 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          } else if (fmtty.tag === 7) {\n            var match$7 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);\n            return /* Fmtty_fmt_EBB */[\n                    /* Bool_ty */Block.__(7, [match$7[0]]),\n                    match$7[1]\n                  ];\n          } else {\n            throw Type_mismatch;\n          }\n      case 8 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          } else if (fmtty.tag === 8) {\n            var sub2_fmtty$prime = fmtty[0];\n            if (Caml_obj.caml_notequal(/* Fmtty_EBB */[sub_fmtty[0]], /* Fmtty_EBB */[sub2_fmtty$prime])) {\n              throw Type_mismatch;\n            }\n            var match$8 = type_ignored_format_substitution(sub_fmtty[1], fmt, fmtty[1]);\n            return /* Fmtty_fmt_EBB */[\n                    /* Format_arg_ty */Block.__(8, [\n                        sub2_fmtty$prime,\n                        match$8[0]\n                      ]),\n                    match$8[1]\n                  ];\n          } else {\n            throw Type_mismatch;\n          }\n      case 9 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          } else if (fmtty.tag === 9) {\n            var sub2_fmtty$prime$1 = fmtty[1];\n            var sub1_fmtty$prime = fmtty[0];\n            if (Caml_obj.caml_notequal(/* Fmtty_EBB */[CamlinternalFormatBasics.erase_rel(sub_fmtty[0])], /* Fmtty_EBB */[CamlinternalFormatBasics.erase_rel(sub1_fmtty$prime)])) {\n              throw Type_mismatch;\n            }\n            if (Caml_obj.caml_notequal(/* Fmtty_EBB */[CamlinternalFormatBasics.erase_rel(sub_fmtty[1])], /* Fmtty_EBB */[CamlinternalFormatBasics.erase_rel(sub2_fmtty$prime$1)])) {\n              throw Type_mismatch;\n            }\n            var sub_fmtty$prime = trans(symm(sub1_fmtty$prime), sub2_fmtty$prime$1);\n            var match$9 = fmtty_rel_det(sub_fmtty$prime);\n            Curry._1(match$9[1], /* Refl */0);\n            Curry._1(match$9[3], /* Refl */0);\n            var match$10 = type_ignored_format_substitution(CamlinternalFormatBasics.erase_rel(sub_fmtty[2]), fmt, fmtty[2]);\n            return /* Fmtty_fmt_EBB */[\n                    /* Format_subst_ty */Block.__(9, [\n                        sub1_fmtty$prime,\n                        sub2_fmtty$prime$1,\n                        symm(match$10[0])\n                      ]),\n                    match$10[1]\n                  ];\n          } else {\n            throw Type_mismatch;\n          }\n      case 10 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          } else if (fmtty.tag === 10) {\n            var match$11 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);\n            return /* Fmtty_fmt_EBB */[\n                    /* Alpha_ty */Block.__(10, [match$11[0]]),\n                    match$11[1]\n                  ];\n          } else {\n            throw Type_mismatch;\n          }\n      case 11 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          } else if (fmtty.tag === 11) {\n            var match$12 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);\n            return /* Fmtty_fmt_EBB */[\n                    /* Theta_ty */Block.__(11, [match$12[0]]),\n                    match$12[1]\n                  ];\n          } else {\n            throw Type_mismatch;\n          }\n      case 12 : \n          throw Type_mismatch;\n      case 13 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          } else if (fmtty.tag === 13) {\n            var match$13 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);\n            return /* Fmtty_fmt_EBB */[\n                    /* Reader_ty */Block.__(13, [match$13[0]]),\n                    match$13[1]\n                  ];\n          } else {\n            throw Type_mismatch;\n          }\n      case 14 : \n          if (typeof fmtty === \"number\") {\n            throw Type_mismatch;\n          } else if (fmtty.tag === 14) {\n            var match$14 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);\n            return /* Fmtty_fmt_EBB */[\n                    /* Ignored_reader_ty */Block.__(14, [match$14[0]]),\n                    match$14[1]\n                  ];\n          } else {\n            throw Type_mismatch;\n          }\n      \n    }\n  }\n}\n\nfunction type_format(fmt, fmtty) {\n  var match = type_format_gen(fmt, fmtty);\n  if (typeof match[1] === \"number\") {\n    return match[0];\n  } else {\n    throw Type_mismatch;\n  }\n}\n\nfunction recast(fmt, fmtty) {\n  return type_format(fmt, CamlinternalFormatBasics.erase_rel(symm(fmtty)));\n}\n\nfunction fix_padding(padty, width, str) {\n  var len = str.length;\n  var width$1 = Pervasives.abs(width);\n  var padty$1 = width < 0 ? /* Left */0 : padty;\n  if (width$1 <= len) {\n    return str;\n  } else {\n    var res = Bytes.make(width$1, padty$1 === /* Zeros */2 ? /* \"0\" */48 : /* \" \" */32);\n    switch (padty$1) {\n      case 0 : \n          $$String.blit(str, 0, res, 0, len);\n          break;\n      case 1 : \n          $$String.blit(str, 0, res, width$1 - len | 0, len);\n          break;\n      case 2 : \n          if (len > 0 && (Caml_string.get(str, 0) === /* \"+\" */43 || Caml_string.get(str, 0) === /* \"-\" */45 || Caml_string.get(str, 0) === /* \" \" */32)) {\n            res[0] = Caml_string.get(str, 0);\n            $$String.blit(str, 1, res, (width$1 - len | 0) + 1 | 0, len - 1 | 0);\n          } else if (len > 1 && Caml_string.get(str, 0) === /* \"0\" */48 && (Caml_string.get(str, 1) === /* \"x\" */120 || Caml_string.get(str, 1) === /* \"X\" */88)) {\n            res[1] = Caml_string.get(str, 1);\n            $$String.blit(str, 2, res, (width$1 - len | 0) + 2 | 0, len - 2 | 0);\n          } else {\n            $$String.blit(str, 0, res, width$1 - len | 0, len);\n          }\n          break;\n      \n    }\n    return Caml_bytes.bytes_to_string(res);\n  }\n}\n\nfunction fix_int_precision(prec, str) {\n  var prec$1 = Pervasives.abs(prec);\n  var len = str.length;\n  var c = Caml_string.get(str, 0);\n  var exit = 0;\n  if (c >= 58) {\n    if (c >= 71) {\n      if (c > 102 || c < 97) {\n        return str;\n      } else {\n        exit = 2;\n      }\n    } else if (c >= 65) {\n      exit = 2;\n    } else {\n      return str;\n    }\n  } else if (c !== 32) {\n    if (c >= 43) {\n      switch (c - 43 | 0) {\n        case 0 : \n        case 2 : \n            exit = 1;\n            break;\n        case 1 : \n        case 3 : \n        case 4 : \n            return str;\n        case 5 : \n            if ((prec$1 + 2 | 0) > len && len > 1 && (Caml_string.get(str, 1) === /* \"x\" */120 || Caml_string.get(str, 1) === /* \"X\" */88)) {\n              var res = Bytes.make(prec$1 + 2 | 0, /* \"0\" */48);\n              res[1] = Caml_string.get(str, 1);\n              $$String.blit(str, 2, res, (prec$1 - len | 0) + 4 | 0, len - 2 | 0);\n              return Caml_bytes.bytes_to_string(res);\n            } else {\n              exit = 2;\n            }\n            break;\n        case 6 : \n        case 7 : \n        case 8 : \n        case 9 : \n        case 10 : \n        case 11 : \n        case 12 : \n        case 13 : \n        case 14 : \n            exit = 2;\n            break;\n        \n      }\n    } else {\n      return str;\n    }\n  } else {\n    exit = 1;\n  }\n  switch (exit) {\n    case 1 : \n        if ((prec$1 + 1 | 0) > len) {\n          var res$1 = Bytes.make(prec$1 + 1 | 0, /* \"0\" */48);\n          res$1[0] = c;\n          $$String.blit(str, 1, res$1, (prec$1 - len | 0) + 2 | 0, len - 1 | 0);\n          return Caml_bytes.bytes_to_string(res$1);\n        } else {\n          return str;\n        }\n    case 2 : \n        if (prec$1 > len) {\n          var res$2 = Bytes.make(prec$1, /* \"0\" */48);\n          $$String.blit(str, 0, res$2, prec$1 - len | 0, len);\n          return Caml_bytes.bytes_to_string(res$2);\n        } else {\n          return str;\n        }\n    \n  }\n}\n\nfunction string_to_caml_string(str) {\n  return $$String.concat($$String.escaped(str), /* :: */[\n              \"\\\"\",\n              /* :: */[\n                \"\\\"\",\n                /* [] */0\n              ]\n            ]);\n}\n\nfunction format_of_iconv(iconv) {\n  switch (iconv) {\n    case 0 : \n        return \"%d\";\n    case 1 : \n        return \"%+d\";\n    case 2 : \n        return \"% d\";\n    case 3 : \n        return \"%i\";\n    case 4 : \n        return \"%+i\";\n    case 5 : \n        return \"% i\";\n    case 6 : \n        return \"%x\";\n    case 7 : \n        return \"%#x\";\n    case 8 : \n        return \"%X\";\n    case 9 : \n        return \"%#X\";\n    case 10 : \n        return \"%o\";\n    case 11 : \n        return \"%#o\";\n    case 12 : \n        return \"%u\";\n    \n  }\n}\n\nfunction format_of_aconv(iconv, c) {\n  var seps;\n  switch (iconv) {\n    case 0 : \n        seps = /* :: */[\n          \"%\",\n          /* :: */[\n            \"d\",\n            /* [] */0\n          ]\n        ];\n        break;\n    case 1 : \n        seps = /* :: */[\n          \"%+\",\n          /* :: */[\n            \"d\",\n            /* [] */0\n          ]\n        ];\n        break;\n    case 2 : \n        seps = /* :: */[\n          \"% \",\n          /* :: */[\n            \"d\",\n            /* [] */0\n          ]\n        ];\n        break;\n    case 3 : \n        seps = /* :: */[\n          \"%\",\n          /* :: */[\n            \"i\",\n            /* [] */0\n          ]\n        ];\n        break;\n    case 4 : \n        seps = /* :: */[\n          \"%+\",\n          /* :: */[\n            \"i\",\n            /* [] */0\n          ]\n        ];\n        break;\n    case 5 : \n        seps = /* :: */[\n          \"% \",\n          /* :: */[\n            \"i\",\n            /* [] */0\n          ]\n        ];\n        break;\n    case 6 : \n        seps = /* :: */[\n          \"%\",\n          /* :: */[\n            \"x\",\n            /* [] */0\n          ]\n        ];\n        break;\n    case 7 : \n        seps = /* :: */[\n          \"%#\",\n          /* :: */[\n            \"x\",\n            /* [] */0\n          ]\n        ];\n        break;\n    case 8 : \n        seps = /* :: */[\n          \"%\",\n          /* :: */[\n            \"X\",\n            /* [] */0\n          ]\n        ];\n        break;\n    case 9 : \n        seps = /* :: */[\n          \"%#\",\n          /* :: */[\n            \"X\",\n            /* [] */0\n          ]\n        ];\n        break;\n    case 10 : \n        seps = /* :: */[\n          \"%\",\n          /* :: */[\n            \"o\",\n            /* [] */0\n          ]\n        ];\n        break;\n    case 11 : \n        seps = /* :: */[\n          \"%#\",\n          /* :: */[\n            \"o\",\n            /* [] */0\n          ]\n        ];\n        break;\n    case 12 : \n        seps = /* :: */[\n          \"%\",\n          /* :: */[\n            \"u\",\n            /* [] */0\n          ]\n        ];\n        break;\n    \n  }\n  return $$String.concat(Caml_bytes.bytes_to_string(Bytes.make(1, c)), seps);\n}\n\nfunction format_of_fconv(fconv, prec) {\n  if (fconv === /* Float_F */15) {\n    return \"%.12g\";\n  } else {\n    var prec$1 = Pervasives.abs(prec);\n    var symb = char_of_fconv(fconv);\n    var buf = /* record */[\n      /* ind */0,\n      /* bytes */Caml_bytes.caml_create_bytes(16)\n    ];\n    buffer_add_char(buf, /* \"%\" */37);\n    bprint_fconv_flag(buf, fconv);\n    buffer_add_char(buf, /* \".\" */46);\n    buffer_add_string(buf, String(prec$1));\n    buffer_add_char(buf, symb);\n    return buffer_contents(buf);\n  }\n}\n\nfunction convert_int(iconv, n) {\n  return Caml_format.caml_format_int(format_of_iconv(iconv), n);\n}\n\nfunction convert_int32(iconv, n) {\n  return Caml_format.caml_int32_format(format_of_aconv(iconv, /* \"l\" */108), n);\n}\n\nfunction convert_nativeint(iconv, n) {\n  return Caml_format.caml_nativeint_format(format_of_aconv(iconv, /* \"n\" */110), n);\n}\n\nfunction convert_int64(iconv, n) {\n  return Caml_format.caml_int64_format(format_of_aconv(iconv, /* \"L\" */76), n);\n}\n\nfunction convert_float(fconv, prec, x) {\n  var prec$1 = Pervasives.abs(prec);\n  var str = Caml_format.caml_format_float(format_of_fconv(fconv, prec$1), x);\n  if (fconv !== /* Float_F */15) {\n    return str;\n  } else {\n    var len = str.length;\n    var is_valid = function (_i) {\n      while(true) {\n        var i = _i;\n        if (i === len) {\n          return false;\n        } else {\n          var match = Caml_string.get(str, i);\n          var switcher = match - 46 | 0;\n          if (switcher > 23 || switcher < 0) {\n            if (switcher !== 55) {\n              _i = i + 1 | 0;\n              continue ;\n            } else {\n              return true;\n            }\n          } else if (switcher > 22 || switcher < 1) {\n            return true;\n          } else {\n            _i = i + 1 | 0;\n            continue ;\n          }\n        }\n      };\n    };\n    var match = Pervasives.classify_float(x);\n    if (match !== 3) {\n      if (match >= 4) {\n        return \"nan\";\n      } else if (is_valid(0)) {\n        return str;\n      } else {\n        return str + \".\";\n      }\n    } else if (x < 0.0) {\n      return \"neg_infinity\";\n    } else {\n      return \"infinity\";\n    }\n  }\n}\n\nfunction format_caml_char(c) {\n  return $$String.concat(Char.escaped(c), /* :: */[\n              \"'\",\n              /* :: */[\n                \"'\",\n                /* [] */0\n              ]\n            ]);\n}\n\nfunction string_of_fmtty(fmtty) {\n  var buf = /* record */[\n    /* ind */0,\n    /* bytes */Caml_bytes.caml_create_bytes(16)\n  ];\n  bprint_fmtty(buf, fmtty);\n  return buffer_contents(buf);\n}\n\nfunction make_printf(_k, o, _acc, _fmt) {\n  while(true) {\n    var fmt = _fmt;\n    var acc = _acc;\n    var k = _k;\n    if (typeof fmt === \"number\") {\n      return Curry._2(k, o, acc);\n    } else {\n      switch (fmt.tag | 0) {\n        case 0 : \n            var rest = fmt[0];\n            return (function(k,acc,rest){\n            return function (c) {\n              var new_acc = /* Acc_data_char */Block.__(5, [\n                  acc,\n                  c\n                ]);\n              return make_printf(k, o, new_acc, rest);\n            }\n            }(k,acc,rest));\n        case 1 : \n            var rest$1 = fmt[0];\n            return (function(k,acc,rest$1){\n            return function (c) {\n              var new_acc_001 = format_caml_char(c);\n              var new_acc = /* Acc_data_string */Block.__(4, [\n                  acc,\n                  new_acc_001\n                ]);\n              return make_printf(k, o, new_acc, rest$1);\n            }\n            }(k,acc,rest$1));\n        case 2 : \n            return make_string_padding(k, o, acc, fmt[1], fmt[0], (function (str) {\n                          return str;\n                        }));\n        case 3 : \n            return make_string_padding(k, o, acc, fmt[1], fmt[0], string_to_caml_string);\n        case 4 : \n            return make_int_padding_precision(k, o, acc, fmt[3], fmt[1], fmt[2], convert_int, fmt[0]);\n        case 5 : \n            return make_int_padding_precision(k, o, acc, fmt[3], fmt[1], fmt[2], convert_int32, fmt[0]);\n        case 6 : \n            return make_int_padding_precision(k, o, acc, fmt[3], fmt[1], fmt[2], convert_nativeint, fmt[0]);\n        case 7 : \n            return make_int_padding_precision(k, o, acc, fmt[3], fmt[1], fmt[2], convert_int64, fmt[0]);\n        case 8 : \n            var k$1 = k;\n            var o$1 = o;\n            var acc$1 = acc;\n            var fmt$1 = fmt[3];\n            var pad = fmt[1];\n            var prec = fmt[2];\n            var fconv = fmt[0];\n            if (typeof pad === \"number\") {\n              if (typeof prec === \"number\") {\n                if (prec !== 0) {\n                  return (function(k$1,o$1,acc$1,fmt$1,fconv){\n                  return function (p, x) {\n                    var str = convert_float(fconv, p, x);\n                    return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [\n                                  acc$1,\n                                  str\n                                ]), fmt$1);\n                  }\n                  }(k$1,o$1,acc$1,fmt$1,fconv));\n                } else {\n                  return (function(k$1,o$1,acc$1,fmt$1,fconv){\n                  return function (x) {\n                    var str = convert_float(fconv, 6, x);\n                    return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [\n                                  acc$1,\n                                  str\n                                ]), fmt$1);\n                  }\n                  }(k$1,o$1,acc$1,fmt$1,fconv));\n                }\n              } else {\n                var p = prec[0];\n                return (function(k$1,o$1,acc$1,fmt$1,fconv,p){\n                return function (x) {\n                  var str = convert_float(fconv, p, x);\n                  return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [\n                                acc$1,\n                                str\n                              ]), fmt$1);\n                }\n                }(k$1,o$1,acc$1,fmt$1,fconv,p));\n              }\n            } else if (pad.tag) {\n              var padty = pad[0];\n              if (typeof prec === \"number\") {\n                if (prec !== 0) {\n                  return (function(k$1,o$1,acc$1,fmt$1,fconv,padty){\n                  return function (w, p, x) {\n                    var str = fix_padding(padty, w, convert_float(fconv, p, x));\n                    return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [\n                                  acc$1,\n                                  str\n                                ]), fmt$1);\n                  }\n                  }(k$1,o$1,acc$1,fmt$1,fconv,padty));\n                } else {\n                  return (function(k$1,o$1,acc$1,fmt$1,fconv,padty){\n                  return function (w, x) {\n                    var str = convert_float(fconv, 6, x);\n                    var str$prime = fix_padding(padty, w, str);\n                    return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [\n                                  acc$1,\n                                  str$prime\n                                ]), fmt$1);\n                  }\n                  }(k$1,o$1,acc$1,fmt$1,fconv,padty));\n                }\n              } else {\n                var p$1 = prec[0];\n                return (function(k$1,o$1,acc$1,fmt$1,fconv,padty,p$1){\n                return function (w, x) {\n                  var str = fix_padding(padty, w, convert_float(fconv, p$1, x));\n                  return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [\n                                acc$1,\n                                str\n                              ]), fmt$1);\n                }\n                }(k$1,o$1,acc$1,fmt$1,fconv,padty,p$1));\n              }\n            } else {\n              var w = pad[1];\n              var padty$1 = pad[0];\n              if (typeof prec === \"number\") {\n                if (prec !== 0) {\n                  return (function(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w){\n                  return function (p, x) {\n                    var str = fix_padding(padty$1, w, convert_float(fconv, p, x));\n                    return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [\n                                  acc$1,\n                                  str\n                                ]), fmt$1);\n                  }\n                  }(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w));\n                } else {\n                  return (function(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w){\n                  return function (x) {\n                    var str = convert_float(fconv, 6, x);\n                    var str$prime = fix_padding(padty$1, w, str);\n                    return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [\n                                  acc$1,\n                                  str$prime\n                                ]), fmt$1);\n                  }\n                  }(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w));\n                }\n              } else {\n                var p$2 = prec[0];\n                return (function(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w,p$2){\n                return function (x) {\n                  var str = fix_padding(padty$1, w, convert_float(fconv, p$2, x));\n                  return make_printf(k$1, o$1, /* Acc_data_string */Block.__(4, [\n                                acc$1,\n                                str\n                              ]), fmt$1);\n                }\n                }(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w,p$2));\n              }\n            }\n        case 9 : \n            var rest$2 = fmt[0];\n            return (function(k,acc,rest$2){\n            return function (b) {\n              return make_printf(k, o, /* Acc_data_string */Block.__(4, [\n                            acc,\n                            b ? \"true\" : \"false\"\n                          ]), rest$2);\n            }\n            }(k,acc,rest$2));\n        case 10 : \n            _fmt = fmt[0];\n            _acc = /* Acc_flush */Block.__(7, [acc]);\n            continue ;\n        case 11 : \n            _fmt = fmt[1];\n            _acc = /* Acc_string_literal */Block.__(2, [\n                acc,\n                fmt[0]\n              ]);\n            continue ;\n        case 12 : \n            _fmt = fmt[1];\n            _acc = /* Acc_char_literal */Block.__(3, [\n                acc,\n                fmt[0]\n              ]);\n            continue ;\n        case 13 : \n            var rest$3 = fmt[2];\n            var ty = string_of_fmtty(fmt[1]);\n            return (function(k,acc,rest$3,ty){\n            return function (str) {\n              return make_printf(k, o, /* Acc_data_string */Block.__(4, [\n                            acc,\n                            ty\n                          ]), rest$3);\n            }\n            }(k,acc,rest$3,ty));\n        case 14 : \n            var rest$4 = fmt[2];\n            var fmtty = fmt[1];\n            return (function(k,acc,fmtty,rest$4){\n            return function (param) {\n              return make_printf(k, o, acc, CamlinternalFormatBasics.concat_fmt(recast(param[0], fmtty), rest$4));\n            }\n            }(k,acc,fmtty,rest$4));\n        case 15 : \n            var rest$5 = fmt[0];\n            return (function(k,acc,rest$5){\n            return function (f, x) {\n              return make_printf(k, o, /* Acc_delay */Block.__(6, [\n                            acc,\n                            (function (o) {\n                                return Curry._2(f, o, x);\n                              })\n                          ]), rest$5);\n            }\n            }(k,acc,rest$5));\n        case 16 : \n            var rest$6 = fmt[0];\n            return (function(k,acc,rest$6){\n            return function (f) {\n              return make_printf(k, o, /* Acc_delay */Block.__(6, [\n                            acc,\n                            f\n                          ]), rest$6);\n            }\n            }(k,acc,rest$6));\n        case 17 : \n            _fmt = fmt[1];\n            _acc = /* Acc_formatting_lit */Block.__(0, [\n                acc,\n                fmt[0]\n              ]);\n            continue ;\n        case 18 : \n            var match = fmt[0];\n            if (match.tag) {\n              var rest$7 = fmt[1];\n              var k$prime = (function(k,acc,rest$7){\n              return function k$prime(koc, kacc) {\n                return make_printf(k, koc, /* Acc_formatting_gen */Block.__(1, [\n                              acc,\n                              /* Acc_open_box */Block.__(1, [kacc])\n                            ]), rest$7);\n              }\n              }(k,acc,rest$7));\n              _fmt = match[0][0];\n              _acc = /* End_of_acc */0;\n              _k = k$prime;\n              continue ;\n            } else {\n              var rest$8 = fmt[1];\n              var k$prime$1 = (function(k,acc,rest$8){\n              return function k$prime$1(koc, kacc) {\n                return make_printf(k, koc, /* Acc_formatting_gen */Block.__(1, [\n                              acc,\n                              /* Acc_open_tag */Block.__(0, [kacc])\n                            ]), rest$8);\n              }\n              }(k,acc,rest$8));\n              _fmt = match[0][0];\n              _acc = /* End_of_acc */0;\n              _k = k$prime$1;\n              continue ;\n            }\n        case 19 : \n            throw [\n                  Caml_builtin_exceptions.assert_failure,\n                  /* tuple */[\n                    \"camlinternalFormat.ml\",\n                    1449,\n                    4\n                  ]\n                ];\n        case 20 : \n            var rest$9 = fmt[2];\n            var new_acc = /* Acc_invalid_arg */Block.__(8, [\n                acc,\n                \"Printf: bad conversion %[\"\n              ]);\n            return (function(k,rest$9,new_acc){\n            return function (param) {\n              return make_printf(k, o, new_acc, rest$9);\n            }\n            }(k,rest$9,new_acc));\n        case 21 : \n            var rest$10 = fmt[1];\n            return (function(k,acc,rest$10){\n            return function (n) {\n              var new_acc_001 = Caml_format.caml_format_int(\"%u\", n);\n              var new_acc = /* Acc_data_string */Block.__(4, [\n                  acc,\n                  new_acc_001\n                ]);\n              return make_printf(k, o, new_acc, rest$10);\n            }\n            }(k,acc,rest$10));\n        case 22 : \n            var rest$11 = fmt[0];\n            return (function(k,acc,rest$11){\n            return function (c) {\n              var new_acc = /* Acc_data_char */Block.__(5, [\n                  acc,\n                  c\n                ]);\n              return make_printf(k, o, new_acc, rest$11);\n            }\n            }(k,acc,rest$11));\n        case 23 : \n            var k$2 = k;\n            var o$2 = o;\n            var acc$2 = acc;\n            var ign = fmt[0];\n            var fmt$2 = fmt[1];\n            if (typeof ign === \"number\") {\n              if (ign === 3) {\n                throw [\n                      Caml_builtin_exceptions.assert_failure,\n                      /* tuple */[\n                        \"camlinternalFormat.ml\",\n                        1517,\n                        39\n                      ]\n                    ];\n              } else {\n                return make_invalid_arg(k$2, o$2, acc$2, fmt$2);\n              }\n            } else if (ign.tag === 8) {\n              return make_from_fmtty(k$2, o$2, acc$2, ign[1], fmt$2);\n            } else {\n              return make_invalid_arg(k$2, o$2, acc$2, fmt$2);\n            }\n        case 24 : \n            return make_custom(k, o, acc, fmt[2], fmt[0], Curry._1(fmt[1], /* () */0));\n        \n      }\n    }\n  };\n}\n\nfunction make_from_fmtty(k, o, acc, fmtty, fmt) {\n  if (typeof fmtty === \"number\") {\n    return make_invalid_arg(k, o, acc, fmt);\n  } else {\n    switch (fmtty.tag | 0) {\n      case 0 : \n          var rest = fmtty[0];\n          return (function (param) {\n              return make_from_fmtty(k, o, acc, rest, fmt);\n            });\n      case 1 : \n          var rest$1 = fmtty[0];\n          return (function (param) {\n              return make_from_fmtty(k, o, acc, rest$1, fmt);\n            });\n      case 2 : \n          var rest$2 = fmtty[0];\n          return (function (param) {\n              return make_from_fmtty(k, o, acc, rest$2, fmt);\n            });\n      case 3 : \n          var rest$3 = fmtty[0];\n          return (function (param) {\n              return make_from_fmtty(k, o, acc, rest$3, fmt);\n            });\n      case 4 : \n          var rest$4 = fmtty[0];\n          return (function (param) {\n              return make_from_fmtty(k, o, acc, rest$4, fmt);\n            });\n      case 5 : \n          var rest$5 = fmtty[0];\n          return (function (param) {\n              return make_from_fmtty(k, o, acc, rest$5, fmt);\n            });\n      case 6 : \n          var rest$6 = fmtty[0];\n          return (function (param) {\n              return make_from_fmtty(k, o, acc, rest$6, fmt);\n            });\n      case 7 : \n          var rest$7 = fmtty[0];\n          return (function (param) {\n              return make_from_fmtty(k, o, acc, rest$7, fmt);\n            });\n      case 8 : \n          var rest$8 = fmtty[1];\n          return (function (param) {\n              return make_from_fmtty(k, o, acc, rest$8, fmt);\n            });\n      case 9 : \n          var rest$9 = fmtty[2];\n          var ty = trans(symm(fmtty[0]), fmtty[1]);\n          return (function (param) {\n              return make_from_fmtty(k, o, acc, CamlinternalFormatBasics.concat_fmtty(ty, rest$9), fmt);\n            });\n      case 10 : \n          var rest$10 = fmtty[0];\n          return (function (param, param$1) {\n              return make_from_fmtty(k, o, acc, rest$10, fmt);\n            });\n      case 11 : \n          var rest$11 = fmtty[0];\n          return (function (param) {\n              return make_from_fmtty(k, o, acc, rest$11, fmt);\n            });\n      case 12 : \n          var rest$12 = fmtty[0];\n          return (function (param) {\n              return make_from_fmtty(k, o, acc, rest$12, fmt);\n            });\n      case 13 : \n          throw [\n                Caml_builtin_exceptions.assert_failure,\n                /* tuple */[\n                  \"camlinternalFormat.ml\",\n                  1540,\n                  31\n                ]\n              ];\n      case 14 : \n          throw [\n                Caml_builtin_exceptions.assert_failure,\n                /* tuple */[\n                  \"camlinternalFormat.ml\",\n                  1541,\n                  31\n                ]\n              ];\n      \n    }\n  }\n}\n\nfunction make_invalid_arg(k, o, acc, fmt) {\n  return make_printf(k, o, /* Acc_invalid_arg */Block.__(8, [\n                acc,\n                \"Printf: bad conversion %_\"\n              ]), fmt);\n}\n\nfunction make_string_padding(k, o, acc, fmt, pad, trans) {\n  if (typeof pad === \"number\") {\n    return (function (x) {\n        var new_acc_001 = Curry._1(trans, x);\n        var new_acc = /* Acc_data_string */Block.__(4, [\n            acc,\n            new_acc_001\n          ]);\n        return make_printf(k, o, new_acc, fmt);\n      });\n  } else if (pad.tag) {\n    var padty = pad[0];\n    return (function (w, x) {\n        var new_acc_001 = fix_padding(padty, w, Curry._1(trans, x));\n        var new_acc = /* Acc_data_string */Block.__(4, [\n            acc,\n            new_acc_001\n          ]);\n        return make_printf(k, o, new_acc, fmt);\n      });\n  } else {\n    var width = pad[1];\n    var padty$1 = pad[0];\n    return (function (x) {\n        var new_acc_001 = fix_padding(padty$1, width, Curry._1(trans, x));\n        var new_acc = /* Acc_data_string */Block.__(4, [\n            acc,\n            new_acc_001\n          ]);\n        return make_printf(k, o, new_acc, fmt);\n      });\n  }\n}\n\nfunction make_int_padding_precision(k, o, acc, fmt, pad, prec, trans, iconv) {\n  if (typeof pad === \"number\") {\n    if (typeof prec === \"number\") {\n      if (prec !== 0) {\n        return (function (p, x) {\n            var str = fix_int_precision(p, Curry._2(trans, iconv, x));\n            return make_printf(k, o, /* Acc_data_string */Block.__(4, [\n                          acc,\n                          str\n                        ]), fmt);\n          });\n      } else {\n        return (function (x) {\n            var str = Curry._2(trans, iconv, x);\n            return make_printf(k, o, /* Acc_data_string */Block.__(4, [\n                          acc,\n                          str\n                        ]), fmt);\n          });\n      }\n    } else {\n      var p = prec[0];\n      return (function (x) {\n          var str = fix_int_precision(p, Curry._2(trans, iconv, x));\n          return make_printf(k, o, /* Acc_data_string */Block.__(4, [\n                        acc,\n                        str\n                      ]), fmt);\n        });\n    }\n  } else if (pad.tag) {\n    var padty = pad[0];\n    if (typeof prec === \"number\") {\n      if (prec !== 0) {\n        return (function (w, p, x) {\n            var str = fix_padding(padty, w, fix_int_precision(p, Curry._2(trans, iconv, x)));\n            return make_printf(k, o, /* Acc_data_string */Block.__(4, [\n                          acc,\n                          str\n                        ]), fmt);\n          });\n      } else {\n        return (function (w, x) {\n            var str = fix_padding(padty, w, Curry._2(trans, iconv, x));\n            return make_printf(k, o, /* Acc_data_string */Block.__(4, [\n                          acc,\n                          str\n                        ]), fmt);\n          });\n      }\n    } else {\n      var p$1 = prec[0];\n      return (function (w, x) {\n          var str = fix_padding(padty, w, fix_int_precision(p$1, Curry._2(trans, iconv, x)));\n          return make_printf(k, o, /* Acc_data_string */Block.__(4, [\n                        acc,\n                        str\n                      ]), fmt);\n        });\n    }\n  } else {\n    var w = pad[1];\n    var padty$1 = pad[0];\n    if (typeof prec === \"number\") {\n      if (prec !== 0) {\n        return (function (p, x) {\n            var str = fix_padding(padty$1, w, fix_int_precision(p, Curry._2(trans, iconv, x)));\n            return make_printf(k, o, /* Acc_data_string */Block.__(4, [\n                          acc,\n                          str\n                        ]), fmt);\n          });\n      } else {\n        return (function (x) {\n            var str = fix_padding(padty$1, w, Curry._2(trans, iconv, x));\n            return make_printf(k, o, /* Acc_data_string */Block.__(4, [\n                          acc,\n                          str\n                        ]), fmt);\n          });\n      }\n    } else {\n      var p$2 = prec[0];\n      return (function (x) {\n          var str = fix_padding(padty$1, w, fix_int_precision(p$2, Curry._2(trans, iconv, x)));\n          return make_printf(k, o, /* Acc_data_string */Block.__(4, [\n                        acc,\n                        str\n                      ]), fmt);\n        });\n    }\n  }\n}\n\nfunction make_custom(k, o, acc, rest, arity, f) {\n  if (arity) {\n    var arity$1 = arity[0];\n    return (function (x) {\n        return make_custom(k, o, acc, rest, arity$1, Curry._1(f, x));\n      });\n  } else {\n    return make_printf(k, o, /* Acc_data_string */Block.__(4, [\n                  acc,\n                  f\n                ]), rest);\n  }\n}\n\nfunction output_acc(o, _acc) {\n  while(true) {\n    var acc = _acc;\n    var exit = 0;\n    if (typeof acc === \"number\") {\n      return /* () */0;\n    } else {\n      switch (acc.tag | 0) {\n        case 0 : \n            var s = string_of_formatting_lit(acc[1]);\n            output_acc(o, acc[0]);\n            return Pervasives.output_string(o, s);\n        case 1 : \n            var match = acc[1];\n            var p = acc[0];\n            output_acc(o, p);\n            if (match.tag) {\n              Pervasives.output_string(o, \"@[\");\n              _acc = match[0];\n              continue ;\n            } else {\n              Pervasives.output_string(o, \"@{\");\n              _acc = match[0];\n              continue ;\n            }\n        case 2 : \n        case 4 : \n            exit = 1;\n            break;\n        case 3 : \n        case 5 : \n            exit = 2;\n            break;\n        case 6 : \n            output_acc(o, acc[0]);\n            return Curry._1(acc[1], o);\n        case 7 : \n            output_acc(o, acc[0]);\n            return Caml_io.caml_ml_flush(o);\n        case 8 : \n            output_acc(o, acc[0]);\n            throw [\n                  Caml_builtin_exceptions.invalid_argument,\n                  acc[1]\n                ];\n        \n      }\n    }\n    switch (exit) {\n      case 1 : \n          output_acc(o, acc[0]);\n          return Pervasives.output_string(o, acc[1]);\n      case 2 : \n          output_acc(o, acc[0]);\n          return Caml_io.caml_ml_output_char(o, acc[1]);\n      \n    }\n  };\n}\n\nfunction bufput_acc(b, _acc) {\n  while(true) {\n    var acc = _acc;\n    var exit = 0;\n    if (typeof acc === \"number\") {\n      return /* () */0;\n    } else {\n      switch (acc.tag | 0) {\n        case 0 : \n            var s = string_of_formatting_lit(acc[1]);\n            bufput_acc(b, acc[0]);\n            return $$Buffer.add_string(b, s);\n        case 1 : \n            var match = acc[1];\n            var p = acc[0];\n            bufput_acc(b, p);\n            if (match.tag) {\n              $$Buffer.add_string(b, \"@[\");\n              _acc = match[0];\n              continue ;\n            } else {\n              $$Buffer.add_string(b, \"@{\");\n              _acc = match[0];\n              continue ;\n            }\n        case 2 : \n        case 4 : \n            exit = 1;\n            break;\n        case 3 : \n        case 5 : \n            exit = 2;\n            break;\n        case 6 : \n            bufput_acc(b, acc[0]);\n            return Curry._1(acc[1], b);\n        case 7 : \n            _acc = acc[0];\n            continue ;\n        case 8 : \n            bufput_acc(b, acc[0]);\n            throw [\n                  Caml_builtin_exceptions.invalid_argument,\n                  acc[1]\n                ];\n        \n      }\n    }\n    switch (exit) {\n      case 1 : \n          bufput_acc(b, acc[0]);\n          return $$Buffer.add_string(b, acc[1]);\n      case 2 : \n          bufput_acc(b, acc[0]);\n          return $$Buffer.add_char(b, acc[1]);\n      \n    }\n  };\n}\n\nfunction strput_acc(b, _acc) {\n  while(true) {\n    var acc = _acc;\n    var exit = 0;\n    if (typeof acc === \"number\") {\n      return /* () */0;\n    } else {\n      switch (acc.tag | 0) {\n        case 0 : \n            var s = string_of_formatting_lit(acc[1]);\n            strput_acc(b, acc[0]);\n            return $$Buffer.add_string(b, s);\n        case 1 : \n            var match = acc[1];\n            var p = acc[0];\n            strput_acc(b, p);\n            if (match.tag) {\n              $$Buffer.add_string(b, \"@[\");\n              _acc = match[0];\n              continue ;\n            } else {\n              $$Buffer.add_string(b, \"@{\");\n              _acc = match[0];\n              continue ;\n            }\n        case 2 : \n        case 4 : \n            exit = 1;\n            break;\n        case 3 : \n        case 5 : \n            exit = 2;\n            break;\n        case 6 : \n            strput_acc(b, acc[0]);\n            return $$Buffer.add_string(b, Curry._1(acc[1], /* () */0));\n        case 7 : \n            _acc = acc[0];\n            continue ;\n        case 8 : \n            strput_acc(b, acc[0]);\n            throw [\n                  Caml_builtin_exceptions.invalid_argument,\n                  acc[1]\n                ];\n        \n      }\n    }\n    switch (exit) {\n      case 1 : \n          strput_acc(b, acc[0]);\n          return $$Buffer.add_string(b, acc[1]);\n      case 2 : \n          strput_acc(b, acc[0]);\n          return $$Buffer.add_char(b, acc[1]);\n      \n    }\n  };\n}\n\nfunction failwith_message(param) {\n  var buf = $$Buffer.create(256);\n  var k = function (param, acc) {\n    strput_acc(buf, acc);\n    var s = $$Buffer.contents(buf);\n    throw [\n          Caml_builtin_exceptions.failure,\n          s\n        ];\n  };\n  return make_printf(k, /* () */0, /* End_of_acc */0, param[0]);\n}\n\nfunction open_box_of_string(str) {\n  if (str === \"\") {\n    return /* tuple */[\n            0,\n            /* Pp_box */4\n          ];\n  } else {\n    var len = str.length;\n    var invalid_box = function (param) {\n      return Curry._1(failwith_message(/* Format */[\n                      /* String_literal */Block.__(11, [\n                          \"invalid box description \",\n                          /* Caml_string */Block.__(3, [\n                              /* No_padding */0,\n                              /* End_of_format */0\n                            ])\n                        ]),\n                      \"invalid box description %S\"\n                    ]), str);\n    };\n    var parse_spaces = function (_i) {\n      while(true) {\n        var i = _i;\n        if (i === len) {\n          return i;\n        } else {\n          var match = Caml_string.get(str, i);\n          if (match !== 9) {\n            if (match !== 32) {\n              return i;\n            } else {\n              _i = i + 1 | 0;\n              continue ;\n            }\n          } else {\n            _i = i + 1 | 0;\n            continue ;\n          }\n        }\n      };\n    };\n    var parse_lword = function (i, _j) {\n      while(true) {\n        var j = _j;\n        if (j === len) {\n          return j;\n        } else {\n          var match = Caml_string.get(str, j);\n          if (match > 122 || match < 97) {\n            return j;\n          } else {\n            _j = j + 1 | 0;\n            continue ;\n          }\n        }\n      };\n    };\n    var parse_int = function (i, _j) {\n      while(true) {\n        var j = _j;\n        if (j === len) {\n          return j;\n        } else {\n          var match = Caml_string.get(str, j);\n          if (match >= 48) {\n            if (match >= 58) {\n              return j;\n            } else {\n              _j = j + 1 | 0;\n              continue ;\n            }\n          } else if (match !== 45) {\n            return j;\n          } else {\n            _j = j + 1 | 0;\n            continue ;\n          }\n        }\n      };\n    };\n    var wstart = parse_spaces(0);\n    var wend = parse_lword(wstart, wstart);\n    var box_name = $$String.sub(str, wstart, wend - wstart | 0);\n    var nstart = parse_spaces(wend);\n    var nend = parse_int(nstart, nstart);\n    var indent;\n    if (nstart === nend) {\n      indent = 0;\n    } else {\n      try {\n        indent = Caml_format.caml_int_of_string($$String.sub(str, nstart, nend - nstart | 0));\n      }\n      catch (raw_exn){\n        var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n        if (exn[0] === Caml_builtin_exceptions.failure) {\n          indent = invalid_box(/* () */0);\n        } else {\n          throw exn;\n        }\n      }\n    }\n    var exp_end = parse_spaces(nend);\n    if (exp_end !== len) {\n      invalid_box(/* () */0);\n    }\n    var box_type;\n    switch (box_name) {\n      case \"\" : \n      case \"b\" : \n          box_type = /* Pp_box */4;\n          break;\n      case \"h\" : \n          box_type = /* Pp_hbox */0;\n          break;\n      case \"hov\" : \n          box_type = /* Pp_hovbox */3;\n          break;\n      case \"hv\" : \n          box_type = /* Pp_hvbox */2;\n          break;\n      case \"v\" : \n          box_type = /* Pp_vbox */1;\n          break;\n      default:\n        box_type = invalid_box(/* () */0);\n    }\n    return /* tuple */[\n            indent,\n            box_type\n          ];\n  }\n}\n\nfunction make_padding_fmt_ebb(pad, fmt) {\n  if (typeof pad === \"number\") {\n    return /* Padding_fmt_EBB */[\n            /* No_padding */0,\n            fmt\n          ];\n  } else if (pad.tag) {\n    return /* Padding_fmt_EBB */[\n            /* Arg_padding */Block.__(1, [pad[0]]),\n            fmt\n          ];\n  } else {\n    return /* Padding_fmt_EBB */[\n            /* Lit_padding */Block.__(0, [\n                pad[0],\n                pad[1]\n              ]),\n            fmt\n          ];\n  }\n}\n\nfunction make_precision_fmt_ebb(prec, fmt) {\n  if (typeof prec === \"number\") {\n    if (prec !== 0) {\n      return /* Precision_fmt_EBB */[\n              /* Arg_precision */1,\n              fmt\n            ];\n    } else {\n      return /* Precision_fmt_EBB */[\n              /* No_precision */0,\n              fmt\n            ];\n    }\n  } else {\n    return /* Precision_fmt_EBB */[\n            /* Lit_precision */[prec[0]],\n            fmt\n          ];\n  }\n}\n\nfunction make_padprec_fmt_ebb(pad, prec, fmt) {\n  var match = make_precision_fmt_ebb(prec, fmt);\n  var fmt$prime = match[1];\n  var prec$1 = match[0];\n  if (typeof pad === \"number\") {\n    return /* Padprec_fmt_EBB */[\n            /* No_padding */0,\n            prec$1,\n            fmt$prime\n          ];\n  } else if (pad.tag) {\n    return /* Padprec_fmt_EBB */[\n            /* Arg_padding */Block.__(1, [pad[0]]),\n            prec$1,\n            fmt$prime\n          ];\n  } else {\n    return /* Padprec_fmt_EBB */[\n            /* Lit_padding */Block.__(0, [\n                pad[0],\n                pad[1]\n              ]),\n            prec$1,\n            fmt$prime\n          ];\n  }\n}\n\nfunction fmt_ebb_of_string(legacy_behavior, str) {\n  var legacy_behavior$1 = legacy_behavior !== undefined ? legacy_behavior : true;\n  var invalid_format_message = function (str_ind, msg) {\n    return Curry._3(failwith_message(/* Format */[\n                    /* String_literal */Block.__(11, [\n                        \"invalid format \",\n                        /* Caml_string */Block.__(3, [\n                            /* No_padding */0,\n                            /* String_literal */Block.__(11, [\n                                \": at character number \",\n                                /* Int */Block.__(4, [\n                                    /* Int_d */0,\n                                    /* No_padding */0,\n                                    /* No_precision */0,\n                                    /* String_literal */Block.__(11, [\n                                        \", \",\n                                        /* String */Block.__(2, [\n                                            /* No_padding */0,\n                                            /* End_of_format */0\n                                          ])\n                                      ])\n                                  ])\n                              ])\n                          ])\n                      ]),\n                    \"invalid format %S: at character number %d, %s\"\n                  ]), str, str_ind, msg);\n  };\n  var invalid_format_without = function (str_ind, c, s) {\n    return Curry._4(failwith_message(/* Format */[\n                    /* String_literal */Block.__(11, [\n                        \"invalid format \",\n                        /* Caml_string */Block.__(3, [\n                            /* No_padding */0,\n                            /* String_literal */Block.__(11, [\n                                \": at character number \",\n                                /* Int */Block.__(4, [\n                                    /* Int_d */0,\n                                    /* No_padding */0,\n                                    /* No_precision */0,\n                                    /* String_literal */Block.__(11, [\n                                        \", '\",\n                                        /* Char */Block.__(0, [/* String_literal */Block.__(11, [\n                                                \"' without \",\n                                                /* String */Block.__(2, [\n                                                    /* No_padding */0,\n                                                    /* End_of_format */0\n                                                  ])\n                                              ])])\n                                      ])\n                                  ])\n                              ])\n                          ])\n                      ]),\n                    \"invalid format %S: at character number %d, '%c' without %s\"\n                  ]), str, str_ind, c, s);\n  };\n  var expected_character = function (str_ind, expected, read) {\n    return Curry._4(failwith_message(/* Format */[\n                    /* String_literal */Block.__(11, [\n                        \"invalid format \",\n                        /* Caml_string */Block.__(3, [\n                            /* No_padding */0,\n                            /* String_literal */Block.__(11, [\n                                \": at character number \",\n                                /* Int */Block.__(4, [\n                                    /* Int_d */0,\n                                    /* No_padding */0,\n                                    /* No_precision */0,\n                                    /* String_literal */Block.__(11, [\n                                        \", \",\n                                        /* String */Block.__(2, [\n                                            /* No_padding */0,\n                                            /* String_literal */Block.__(11, [\n                                                \" expected, read \",\n                                                /* Caml_char */Block.__(1, [/* End_of_format */0])\n                                              ])\n                                          ])\n                                      ])\n                                  ])\n                              ])\n                          ])\n                      ]),\n                    \"invalid format %S: at character number %d, %s expected, read %C\"\n                  ]), str, str_ind, expected, read);\n  };\n  var compute_int_conv = function (pct_ind, str_ind, _plus, _sharp, _space, symb) {\n    while(true) {\n      var space = _space;\n      var sharp = _sharp;\n      var plus = _plus;\n      var exit = 0;\n      var exit$1 = 0;\n      if (plus) {\n        if (sharp) {\n          exit$1 = 2;\n        } else if (space) {\n          exit = 1;\n        } else if (symb !== 100) {\n          if (symb !== 105) {\n            exit = 1;\n          } else {\n            return /* Int_pi */4;\n          }\n        } else {\n          return /* Int_pd */1;\n        }\n      } else if (sharp) {\n        if (space) {\n          exit$1 = 2;\n        } else if (symb !== 88) {\n          if (symb !== 111) {\n            if (symb !== 120) {\n              exit$1 = 2;\n            } else {\n              return /* Int_Cx */7;\n            }\n          } else {\n            return /* Int_Co */11;\n          }\n        } else {\n          return /* Int_CX */9;\n        }\n      } else if (space) {\n        if (symb !== 100) {\n          if (symb !== 105) {\n            exit = 1;\n          } else {\n            return /* Int_si */5;\n          }\n        } else {\n          return /* Int_sd */2;\n        }\n      } else {\n        switch (symb) {\n          case 88 : \n              return /* Int_X */8;\n          case 100 : \n              return /* Int_d */0;\n          case 105 : \n              return /* Int_i */3;\n          case 111 : \n              return /* Int_o */10;\n          case 117 : \n              return /* Int_u */12;\n          case 89 : \n          case 90 : \n          case 91 : \n          case 92 : \n          case 93 : \n          case 94 : \n          case 95 : \n          case 96 : \n          case 97 : \n          case 98 : \n          case 99 : \n          case 101 : \n          case 102 : \n          case 103 : \n          case 104 : \n          case 106 : \n          case 107 : \n          case 108 : \n          case 109 : \n          case 110 : \n          case 112 : \n          case 113 : \n          case 114 : \n          case 115 : \n          case 116 : \n          case 118 : \n          case 119 : \n              exit = 1;\n              break;\n          case 120 : \n              return /* Int_x */6;\n          default:\n            exit = 1;\n        }\n      }\n      if (exit$1 === 2) {\n        var exit$2 = 0;\n        switch (symb) {\n          case 88 : \n              if (legacy_behavior$1) {\n                return /* Int_CX */9;\n              } else {\n                exit = 1;\n              }\n              break;\n          case 111 : \n              if (legacy_behavior$1) {\n                return /* Int_Co */11;\n              } else {\n                exit = 1;\n              }\n              break;\n          case 100 : \n          case 105 : \n          case 117 : \n              exit$2 = 3;\n              break;\n          case 89 : \n          case 90 : \n          case 91 : \n          case 92 : \n          case 93 : \n          case 94 : \n          case 95 : \n          case 96 : \n          case 97 : \n          case 98 : \n          case 99 : \n          case 101 : \n          case 102 : \n          case 103 : \n          case 104 : \n          case 106 : \n          case 107 : \n          case 108 : \n          case 109 : \n          case 110 : \n          case 112 : \n          case 113 : \n          case 114 : \n          case 115 : \n          case 116 : \n          case 118 : \n          case 119 : \n              exit = 1;\n              break;\n          case 120 : \n              if (legacy_behavior$1) {\n                return /* Int_Cx */7;\n              } else {\n                exit = 1;\n              }\n              break;\n          default:\n            exit = 1;\n        }\n        if (exit$2 === 3) {\n          if (legacy_behavior$1) {\n            _sharp = false;\n            continue ;\n          } else {\n            return incompatible_flag(pct_ind, str_ind, symb, \"'#'\");\n          }\n        }\n        \n      }\n      if (exit === 1) {\n        if (plus) {\n          if (space) {\n            if (legacy_behavior$1) {\n              _space = false;\n              continue ;\n            } else {\n              return incompatible_flag(pct_ind, str_ind, /* \" \" */32, \"'+'\");\n            }\n          } else if (legacy_behavior$1) {\n            _plus = false;\n            continue ;\n          } else {\n            return incompatible_flag(pct_ind, str_ind, symb, \"'+'\");\n          }\n        } else if (space) {\n          if (legacy_behavior$1) {\n            _space = false;\n            continue ;\n          } else {\n            return incompatible_flag(pct_ind, str_ind, symb, \"' '\");\n          }\n        } else {\n          throw [\n                Caml_builtin_exceptions.assert_failure,\n                /* tuple */[\n                  \"camlinternalFormat.ml\",\n                  2719,\n                  28\n                ]\n              ];\n        }\n      }\n      \n    };\n  };\n  var incompatible_flag = function (pct_ind, str_ind, symb, option) {\n    var subfmt = $$String.sub(str, pct_ind, str_ind - pct_ind | 0);\n    return Curry._5(failwith_message(/* Format */[\n                    /* String_literal */Block.__(11, [\n                        \"invalid format \",\n                        /* Caml_string */Block.__(3, [\n                            /* No_padding */0,\n                            /* String_literal */Block.__(11, [\n                                \": at character number \",\n                                /* Int */Block.__(4, [\n                                    /* Int_d */0,\n                                    /* No_padding */0,\n                                    /* No_precision */0,\n                                    /* String_literal */Block.__(11, [\n                                        \", \",\n                                        /* String */Block.__(2, [\n                                            /* No_padding */0,\n                                            /* String_literal */Block.__(11, [\n                                                \" is incompatible with '\",\n                                                /* Char */Block.__(0, [/* String_literal */Block.__(11, [\n                                                        \"' in sub-format \",\n                                                        /* Caml_string */Block.__(3, [\n                                                            /* No_padding */0,\n                                                            /* End_of_format */0\n                                                          ])\n                                                      ])])\n                                              ])\n                                          ])\n                                      ])\n                                  ])\n                              ])\n                          ])\n                      ]),\n                    \"invalid format %S: at character number %d, %s is incompatible with '%c' in sub-format %S\"\n                  ]), str, pct_ind, option, symb, subfmt);\n  };\n  var parse_positive = function (_str_ind, end_ind, _acc) {\n    while(true) {\n      var acc = _acc;\n      var str_ind = _str_ind;\n      if (str_ind === end_ind) {\n        invalid_format_message(end_ind, \"unexpected end of format\");\n      }\n      var c = Caml_string.get(str, str_ind);\n      if (c > 57 || c < 48) {\n        return /* tuple */[\n                str_ind,\n                acc\n              ];\n      } else {\n        var new_acc = Caml_int32.imul(acc, 10) + (c - /* \"0\" */48 | 0) | 0;\n        _acc = new_acc;\n        _str_ind = str_ind + 1 | 0;\n        continue ;\n      }\n    };\n  };\n  var parse_after_precision = function (pct_ind, str_ind, end_ind, minus, plus, sharp, space, ign, pad, prec) {\n    if (str_ind === end_ind) {\n      invalid_format_message(end_ind, \"unexpected end of format\");\n    }\n    var parse_conv = function (padprec) {\n      return parse_conversion(pct_ind, str_ind + 1 | 0, end_ind, plus, sharp, space, ign, pad, prec, padprec, Caml_string.get(str, str_ind));\n    };\n    if (typeof pad === \"number\") {\n      var exit = 0;\n      if (typeof prec === \"number\" && prec === 0) {\n        return parse_conv(/* No_padding */0);\n      } else {\n        exit = 1;\n      }\n      if (exit === 1) {\n        if (minus) {\n          if (typeof prec === \"number\") {\n            return parse_conv(/* Arg_padding */Block.__(1, [/* Left */0]));\n          } else {\n            return parse_conv(/* Lit_padding */Block.__(0, [\n                          /* Left */0,\n                          prec[0]\n                        ]));\n          }\n        } else if (typeof prec === \"number\") {\n          return parse_conv(/* Arg_padding */Block.__(1, [/* Right */1]));\n        } else {\n          return parse_conv(/* Lit_padding */Block.__(0, [\n                        /* Right */1,\n                        prec[0]\n                      ]));\n        }\n      }\n      \n    } else {\n      return parse_conv(pad);\n    }\n  };\n  var parse_after_padding = function (pct_ind, str_ind, end_ind, minus, plus, sharp, space, ign, pad) {\n    if (str_ind === end_ind) {\n      invalid_format_message(end_ind, \"unexpected end of format\");\n    }\n    var symb = Caml_string.get(str, str_ind);\n    if (symb !== 46) {\n      return parse_conversion(pct_ind, str_ind + 1 | 0, end_ind, plus, sharp, space, ign, pad, /* No_precision */0, pad, symb);\n    } else {\n      var pct_ind$1 = pct_ind;\n      var str_ind$1 = str_ind + 1 | 0;\n      var end_ind$1 = end_ind;\n      var minus$1 = minus;\n      var plus$1 = plus;\n      var sharp$1 = sharp;\n      var space$1 = space;\n      var ign$1 = ign;\n      var pad$1 = pad;\n      if (str_ind$1 === end_ind$1) {\n        invalid_format_message(end_ind$1, \"unexpected end of format\");\n      }\n      var parse_literal = function (minus, str_ind) {\n        var match = parse_positive(str_ind, end_ind$1, 0);\n        return parse_after_precision(pct_ind$1, match[0], end_ind$1, minus, plus$1, sharp$1, space$1, ign$1, pad$1, /* Lit_precision */[match[1]]);\n      };\n      var symb$1 = Caml_string.get(str, str_ind$1);\n      var exit = 0;\n      var exit$1 = 0;\n      if (symb$1 >= 48) {\n        if (symb$1 >= 58) {\n          exit = 1;\n        } else {\n          return parse_literal(minus$1, str_ind$1);\n        }\n      } else if (symb$1 >= 42) {\n        switch (symb$1 - 42 | 0) {\n          case 0 : \n              return parse_after_precision(pct_ind$1, str_ind$1 + 1 | 0, end_ind$1, minus$1, plus$1, sharp$1, space$1, ign$1, pad$1, /* Arg_precision */1);\n          case 1 : \n          case 3 : \n              exit$1 = 2;\n              break;\n          case 2 : \n          case 4 : \n          case 5 : \n              exit = 1;\n              break;\n          \n        }\n      } else {\n        exit = 1;\n      }\n      if (exit$1 === 2) {\n        if (legacy_behavior$1) {\n          return parse_literal(minus$1 || symb$1 === /* \"-\" */45, str_ind$1 + 1 | 0);\n        } else {\n          exit = 1;\n        }\n      }\n      if (exit === 1) {\n        if (legacy_behavior$1) {\n          return parse_after_precision(pct_ind$1, str_ind$1, end_ind$1, minus$1, plus$1, sharp$1, space$1, ign$1, pad$1, /* Lit_precision */[0]);\n        } else {\n          return invalid_format_without(str_ind$1 - 1 | 0, /* \".\" */46, \"precision\");\n        }\n      }\n      \n    }\n  };\n  var parse_literal = function (lit_start, _str_ind, end_ind) {\n    while(true) {\n      var str_ind = _str_ind;\n      if (str_ind === end_ind) {\n        return add_literal(lit_start, str_ind, /* End_of_format */0);\n      } else {\n        var match = Caml_string.get(str, str_ind);\n        if (match !== 37) {\n          if (match !== 64) {\n            _str_ind = str_ind + 1 | 0;\n            continue ;\n          } else {\n            var match$1 = parse_after_at(str_ind + 1 | 0, end_ind);\n            return add_literal(lit_start, str_ind, match$1[0]);\n          }\n        } else {\n          var match$2 = parse_format(str_ind, end_ind);\n          return add_literal(lit_start, str_ind, match$2[0]);\n        }\n      }\n    };\n  };\n  var parse_format = function (pct_ind, end_ind) {\n    var pct_ind$1 = pct_ind;\n    var str_ind = pct_ind + 1 | 0;\n    var end_ind$1 = end_ind;\n    if (str_ind === end_ind$1) {\n      invalid_format_message(end_ind$1, \"unexpected end of format\");\n    }\n    var match = Caml_string.get(str, str_ind);\n    if (match !== 95) {\n      return parse_flags(pct_ind$1, str_ind, end_ind$1, false);\n    } else {\n      return parse_flags(pct_ind$1, str_ind + 1 | 0, end_ind$1, true);\n    }\n  };\n  var parse_after_at = function (str_ind, end_ind) {\n    if (str_ind === end_ind) {\n      return /* Fmt_EBB */[/* Char_literal */Block.__(12, [\n                  /* \"@\" */64,\n                  /* End_of_format */0\n                ])];\n    } else {\n      var c = Caml_string.get(str, str_ind);\n      var exit = 0;\n      if (c >= 65) {\n        if (c >= 94) {\n          switch (c) {\n            case 123 : \n                return parse_tag(true, str_ind + 1 | 0, end_ind);\n            case 124 : \n                exit = 1;\n                break;\n            case 125 : \n                var beg_ind = str_ind + 1 | 0;\n                var match = parse_literal(beg_ind, beg_ind, end_ind);\n                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [\n                            /* Close_tag */1,\n                            match[0]\n                          ])];\n            default:\n              exit = 1;\n          }\n        } else if (c >= 91) {\n          switch (c - 91 | 0) {\n            case 0 : \n                return parse_tag(false, str_ind + 1 | 0, end_ind);\n            case 1 : \n                exit = 1;\n                break;\n            case 2 : \n                var beg_ind$1 = str_ind + 1 | 0;\n                var match$1 = parse_literal(beg_ind$1, beg_ind$1, end_ind);\n                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [\n                            /* Close_box */0,\n                            match$1[0]\n                          ])];\n            \n          }\n        } else {\n          exit = 1;\n        }\n      } else if (c !== 10) {\n        if (c >= 32) {\n          switch (c - 32 | 0) {\n            case 0 : \n                var beg_ind$2 = str_ind + 1 | 0;\n                var match$2 = parse_literal(beg_ind$2, beg_ind$2, end_ind);\n                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [\n                            /* Break */Block.__(0, [\n                                \"@ \",\n                                1,\n                                0\n                              ]),\n                            match$2[0]\n                          ])];\n            case 5 : \n                if ((str_ind + 1 | 0) < end_ind && Caml_string.get(str, str_ind + 1 | 0) === /* \"%\" */37) {\n                  var beg_ind$3 = str_ind + 2 | 0;\n                  var match$3 = parse_literal(beg_ind$3, beg_ind$3, end_ind);\n                  return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [\n                              /* Escaped_percent */6,\n                              match$3[0]\n                            ])];\n                } else {\n                  var match$4 = parse_literal(str_ind, str_ind, end_ind);\n                  return /* Fmt_EBB */[/* Char_literal */Block.__(12, [\n                              /* \"@\" */64,\n                              match$4[0]\n                            ])];\n                }\n            case 12 : \n                var beg_ind$4 = str_ind + 1 | 0;\n                var match$5 = parse_literal(beg_ind$4, beg_ind$4, end_ind);\n                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [\n                            /* Break */Block.__(0, [\n                                \"@,\",\n                                0,\n                                0\n                              ]),\n                            match$5[0]\n                          ])];\n            case 14 : \n                var beg_ind$5 = str_ind + 1 | 0;\n                var match$6 = parse_literal(beg_ind$5, beg_ind$5, end_ind);\n                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [\n                            /* Flush_newline */4,\n                            match$6[0]\n                          ])];\n            case 27 : \n                var str_ind$1 = str_ind + 1 | 0;\n                var end_ind$1 = end_ind;\n                var match$7;\n                try {\n                  if (str_ind$1 === end_ind$1 || Caml_string.get(str, str_ind$1) !== /* \"<\" */60) {\n                    throw Caml_builtin_exceptions.not_found;\n                  }\n                  var str_ind_1 = parse_spaces(str_ind$1 + 1 | 0, end_ind$1);\n                  var match$8 = Caml_string.get(str, str_ind_1);\n                  var exit$1 = 0;\n                  if (match$8 >= 48) {\n                    if (match$8 >= 58) {\n                      throw Caml_builtin_exceptions.not_found;\n                    } else {\n                      exit$1 = 1;\n                    }\n                  } else if (match$8 !== 45) {\n                    throw Caml_builtin_exceptions.not_found;\n                  } else {\n                    exit$1 = 1;\n                  }\n                  if (exit$1 === 1) {\n                    var match$9 = parse_integer(str_ind_1, end_ind$1);\n                    var width = match$9[1];\n                    var str_ind_3 = parse_spaces(match$9[0], end_ind$1);\n                    var match$10 = Caml_string.get(str, str_ind_3);\n                    var switcher = match$10 - 45 | 0;\n                    if (switcher > 12 || switcher < 0) {\n                      if (switcher !== 17) {\n                        throw Caml_builtin_exceptions.not_found;\n                      } else {\n                        var s = $$String.sub(str, str_ind$1 - 2 | 0, (str_ind_3 - str_ind$1 | 0) + 3 | 0);\n                        match$7 = /* tuple */[\n                          str_ind_3 + 1 | 0,\n                          /* Break */Block.__(0, [\n                              s,\n                              width,\n                              0\n                            ])\n                        ];\n                      }\n                    } else if (switcher === 2 || switcher === 1) {\n                      throw Caml_builtin_exceptions.not_found;\n                    } else {\n                      var match$11 = parse_integer(str_ind_3, end_ind$1);\n                      var str_ind_5 = parse_spaces(match$11[0], end_ind$1);\n                      if (Caml_string.get(str, str_ind_5) !== /* \">\" */62) {\n                        throw Caml_builtin_exceptions.not_found;\n                      }\n                      var s$1 = $$String.sub(str, str_ind$1 - 2 | 0, (str_ind_5 - str_ind$1 | 0) + 3 | 0);\n                      match$7 = /* tuple */[\n                        str_ind_5 + 1 | 0,\n                        /* Break */Block.__(0, [\n                            s$1,\n                            width,\n                            match$11[1]\n                          ])\n                      ];\n                    }\n                  }\n                  \n                }\n                catch (raw_exn){\n                  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n                  if (exn === Caml_builtin_exceptions.not_found || exn[0] === Caml_builtin_exceptions.failure) {\n                    match$7 = /* tuple */[\n                      str_ind$1,\n                      /* Break */Block.__(0, [\n                          \"@;\",\n                          1,\n                          0\n                        ])\n                    ];\n                  } else {\n                    throw exn;\n                  }\n                }\n                var next_ind = match$7[0];\n                var match$12 = parse_literal(next_ind, next_ind, end_ind$1);\n                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [\n                            match$7[1],\n                            match$12[0]\n                          ])];\n            case 28 : \n                var str_ind$2 = str_ind + 1 | 0;\n                var end_ind$2 = end_ind;\n                var match$13;\n                try {\n                  var str_ind_1$1 = parse_spaces(str_ind$2, end_ind$2);\n                  var match$14 = Caml_string.get(str, str_ind_1$1);\n                  var exit$2 = 0;\n                  if (match$14 >= 48) {\n                    if (match$14 >= 58) {\n                      match$13 = undefined;\n                    } else {\n                      exit$2 = 1;\n                    }\n                  } else if (match$14 !== 45) {\n                    match$13 = undefined;\n                  } else {\n                    exit$2 = 1;\n                  }\n                  if (exit$2 === 1) {\n                    var match$15 = parse_integer(str_ind_1$1, end_ind$2);\n                    var str_ind_3$1 = parse_spaces(match$15[0], end_ind$2);\n                    if (Caml_string.get(str, str_ind_3$1) !== /* \">\" */62) {\n                      throw Caml_builtin_exceptions.not_found;\n                    }\n                    var s$2 = $$String.sub(str, str_ind$2 - 2 | 0, (str_ind_3$1 - str_ind$2 | 0) + 3 | 0);\n                    match$13 = /* tuple */[\n                      str_ind_3$1 + 1 | 0,\n                      /* Magic_size */Block.__(1, [\n                          s$2,\n                          match$15[1]\n                        ])\n                    ];\n                  }\n                  \n                }\n                catch (raw_exn$1){\n                  var exn$1 = Caml_js_exceptions.internalToOCamlException(raw_exn$1);\n                  if (exn$1 === Caml_builtin_exceptions.not_found || exn$1[0] === Caml_builtin_exceptions.failure) {\n                    match$13 = undefined;\n                  } else {\n                    throw exn$1;\n                  }\n                }\n                if (match$13 !== undefined) {\n                  var match$16 = match$13;\n                  var next_ind$1 = match$16[0];\n                  var match$17 = parse_literal(next_ind$1, next_ind$1, end_ind$2);\n                  return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [\n                              match$16[1],\n                              match$17[0]\n                            ])];\n                } else {\n                  var match$18 = parse_literal(str_ind$2, str_ind$2, end_ind$2);\n                  return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [\n                              /* Scan_indic */Block.__(2, [/* \"<\" */60]),\n                              match$18[0]\n                            ])];\n                }\n            case 1 : \n            case 2 : \n            case 3 : \n            case 4 : \n            case 6 : \n            case 7 : \n            case 8 : \n            case 9 : \n            case 10 : \n            case 11 : \n            case 13 : \n            case 15 : \n            case 16 : \n            case 17 : \n            case 18 : \n            case 19 : \n            case 20 : \n            case 21 : \n            case 22 : \n            case 23 : \n            case 24 : \n            case 25 : \n            case 26 : \n            case 29 : \n            case 30 : \n                exit = 1;\n                break;\n            case 31 : \n                var beg_ind$6 = str_ind + 1 | 0;\n                var match$19 = parse_literal(beg_ind$6, beg_ind$6, end_ind);\n                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [\n                            /* FFlush */2,\n                            match$19[0]\n                          ])];\n            case 32 : \n                var beg_ind$7 = str_ind + 1 | 0;\n                var match$20 = parse_literal(beg_ind$7, beg_ind$7, end_ind);\n                return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [\n                            /* Escaped_at */5,\n                            match$20[0]\n                          ])];\n            \n          }\n        } else {\n          exit = 1;\n        }\n      } else {\n        var beg_ind$8 = str_ind + 1 | 0;\n        var match$21 = parse_literal(beg_ind$8, beg_ind$8, end_ind);\n        return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [\n                    /* Force_newline */3,\n                    match$21[0]\n                  ])];\n      }\n      if (exit === 1) {\n        var beg_ind$9 = str_ind + 1 | 0;\n        var match$22 = parse_literal(beg_ind$9, beg_ind$9, end_ind);\n        return /* Fmt_EBB */[/* Formatting_lit */Block.__(17, [\n                    /* Scan_indic */Block.__(2, [c]),\n                    match$22[0]\n                  ])];\n      }\n      \n    }\n  };\n  var add_literal = function (lit_start, str_ind, fmt) {\n    var size = str_ind - lit_start | 0;\n    if (size !== 0) {\n      if (size !== 1) {\n        return /* Fmt_EBB */[/* String_literal */Block.__(11, [\n                    $$String.sub(str, lit_start, size),\n                    fmt\n                  ])];\n      } else {\n        return /* Fmt_EBB */[/* Char_literal */Block.__(12, [\n                    Caml_string.get(str, lit_start),\n                    fmt\n                  ])];\n      }\n    } else {\n      return /* Fmt_EBB */[fmt];\n    }\n  };\n  var parse_spaces = function (_str_ind, end_ind) {\n    while(true) {\n      var str_ind = _str_ind;\n      if (str_ind === end_ind) {\n        invalid_format_message(end_ind, \"unexpected end of format\");\n      }\n      if (Caml_string.get(str, str_ind) === /* \" \" */32) {\n        _str_ind = str_ind + 1 | 0;\n        continue ;\n      } else {\n        return str_ind;\n      }\n    };\n  };\n  var parse_integer = function (str_ind, end_ind) {\n    if (str_ind === end_ind) {\n      invalid_format_message(end_ind, \"unexpected end of format\");\n    }\n    var match = Caml_string.get(str, str_ind);\n    if (match >= 48) {\n      if (match >= 58) {\n        throw [\n              Caml_builtin_exceptions.assert_failure,\n              /* tuple */[\n                \"camlinternalFormat.ml\",\n                2624,\n                11\n              ]\n            ];\n      } else {\n        return parse_positive(str_ind, end_ind, 0);\n      }\n    } else if (match !== 45) {\n      throw [\n            Caml_builtin_exceptions.assert_failure,\n            /* tuple */[\n              \"camlinternalFormat.ml\",\n              2624,\n              11\n            ]\n          ];\n    } else {\n      if ((str_ind + 1 | 0) === end_ind) {\n        invalid_format_message(end_ind, \"unexpected end of format\");\n      }\n      var c = Caml_string.get(str, str_ind + 1 | 0);\n      if (c > 57 || c < 48) {\n        return expected_character(str_ind + 1 | 0, \"digit\", c);\n      } else {\n        var match$1 = parse_positive(str_ind + 1 | 0, end_ind, 0);\n        return /* tuple */[\n                match$1[0],\n                -match$1[1] | 0\n              ];\n      }\n    }\n  };\n  var compute_float_conv = function (pct_ind, str_ind, _plus, _space, symb) {\n    while(true) {\n      var space = _space;\n      var plus = _plus;\n      if (plus) {\n        if (space) {\n          if (legacy_behavior$1) {\n            _space = false;\n            continue ;\n          } else {\n            return incompatible_flag(pct_ind, str_ind, /* \" \" */32, \"'+'\");\n          }\n        } else {\n          var exit = 0;\n          if (symb >= 72) {\n            switch (symb) {\n              case 101 : \n                  return /* Float_pe */4;\n              case 102 : \n                  return /* Float_pf */1;\n              case 103 : \n                  return /* Float_pg */10;\n              default:\n                exit = 1;\n            }\n          } else if (symb >= 69) {\n            switch (symb - 69 | 0) {\n              case 0 : \n                  return /* Float_pE */7;\n              case 1 : \n                  exit = 1;\n                  break;\n              case 2 : \n                  return /* Float_pG */13;\n              \n            }\n          } else {\n            exit = 1;\n          }\n          if (exit === 1) {\n            if (legacy_behavior$1) {\n              _plus = false;\n              continue ;\n            } else {\n              return incompatible_flag(pct_ind, str_ind, symb, \"'+'\");\n            }\n          }\n          \n        }\n      } else if (space) {\n        var exit$1 = 0;\n        if (symb >= 72) {\n          switch (symb) {\n            case 101 : \n                return /* Float_se */5;\n            case 102 : \n                return /* Float_sf */2;\n            case 103 : \n                return /* Float_sg */11;\n            default:\n              exit$1 = 1;\n          }\n        } else if (symb >= 69) {\n          switch (symb - 69 | 0) {\n            case 0 : \n                return /* Float_sE */8;\n            case 1 : \n                exit$1 = 1;\n                break;\n            case 2 : \n                return /* Float_sG */14;\n            \n          }\n        } else {\n          exit$1 = 1;\n        }\n        if (exit$1 === 1) {\n          if (legacy_behavior$1) {\n            _space = false;\n            continue ;\n          } else {\n            return incompatible_flag(pct_ind, str_ind, symb, \"' '\");\n          }\n        }\n        \n      } else if (symb >= 72) {\n        switch (symb) {\n          case 101 : \n              return /* Float_e */3;\n          case 102 : \n              return /* Float_f */0;\n          case 103 : \n              return /* Float_g */9;\n          default:\n            throw [\n                  Caml_builtin_exceptions.assert_failure,\n                  /* tuple */[\n                    \"camlinternalFormat.ml\",\n                    2747,\n                    25\n                  ]\n                ];\n        }\n      } else if (symb >= 69) {\n        switch (symb - 69 | 0) {\n          case 0 : \n              return /* Float_E */6;\n          case 1 : \n              return /* Float_F */15;\n          case 2 : \n              return /* Float_G */12;\n          \n        }\n      } else {\n        throw [\n              Caml_builtin_exceptions.assert_failure,\n              /* tuple */[\n                \"camlinternalFormat.ml\",\n                2747,\n                25\n              ]\n            ];\n      }\n    };\n  };\n  var search_subformat_end = function (_str_ind, end_ind, c) {\n    while(true) {\n      var str_ind = _str_ind;\n      if (str_ind === end_ind) {\n        Curry._3(failwith_message(/* Format */[\n                  /* String_literal */Block.__(11, [\n                      \"invalid format \",\n                      /* Caml_string */Block.__(3, [\n                          /* No_padding */0,\n                          /* String_literal */Block.__(11, [\n                              \": unclosed sub-format, expected \\\"\",\n                              /* Char_literal */Block.__(12, [\n                                  /* \"%\" */37,\n                                  /* Char */Block.__(0, [/* String_literal */Block.__(11, [\n                                          \"\\\" at character number \",\n                                          /* Int */Block.__(4, [\n                                              /* Int_d */0,\n                                              /* No_padding */0,\n                                              /* No_precision */0,\n                                              /* End_of_format */0\n                                            ])\n                                        ])])\n                                ])\n                            ])\n                        ])\n                    ]),\n                  \"invalid format %S: unclosed sub-format, expected \\\"%%%c\\\" at character number %d\"\n                ]), str, c, end_ind);\n      }\n      var match = Caml_string.get(str, str_ind);\n      if (match !== 37) {\n        _str_ind = str_ind + 1 | 0;\n        continue ;\n      } else {\n        if ((str_ind + 1 | 0) === end_ind) {\n          invalid_format_message(end_ind, \"unexpected end of format\");\n        }\n        if (Caml_string.get(str, str_ind + 1 | 0) === c) {\n          return str_ind;\n        } else {\n          var match$1 = Caml_string.get(str, str_ind + 1 | 0);\n          var exit = 0;\n          if (match$1 >= 95) {\n            if (match$1 >= 123) {\n              if (match$1 >= 126) {\n                exit = 1;\n              } else {\n                switch (match$1 - 123 | 0) {\n                  case 0 : \n                      var sub_end = search_subformat_end(str_ind + 2 | 0, end_ind, /* \"}\" */125);\n                      _str_ind = sub_end + 2 | 0;\n                      continue ;\n                  case 1 : \n                      exit = 1;\n                      break;\n                  case 2 : \n                      return expected_character(str_ind + 1 | 0, \"character ')'\", /* \"}\" */125);\n                  \n                }\n              }\n            } else if (match$1 >= 96) {\n              exit = 1;\n            } else {\n              if ((str_ind + 2 | 0) === end_ind) {\n                invalid_format_message(end_ind, \"unexpected end of format\");\n              }\n              var match$2 = Caml_string.get(str, str_ind + 2 | 0);\n              if (match$2 !== 40) {\n                if (match$2 !== 123) {\n                  _str_ind = str_ind + 3 | 0;\n                  continue ;\n                } else {\n                  var sub_end$1 = search_subformat_end(str_ind + 3 | 0, end_ind, /* \"}\" */125);\n                  _str_ind = sub_end$1 + 2 | 0;\n                  continue ;\n                }\n              } else {\n                var sub_end$2 = search_subformat_end(str_ind + 3 | 0, end_ind, /* \")\" */41);\n                _str_ind = sub_end$2 + 2 | 0;\n                continue ;\n              }\n            }\n          } else if (match$1 !== 40) {\n            if (match$1 !== 41) {\n              exit = 1;\n            } else {\n              return expected_character(str_ind + 1 | 0, \"character '}'\", /* \")\" */41);\n            }\n          } else {\n            var sub_end$3 = search_subformat_end(str_ind + 2 | 0, end_ind, /* \")\" */41);\n            _str_ind = sub_end$3 + 2 | 0;\n            continue ;\n          }\n          if (exit === 1) {\n            _str_ind = str_ind + 2 | 0;\n            continue ;\n          }\n          \n        }\n      }\n    };\n  };\n  var parse_conversion = function (pct_ind, str_ind, end_ind, plus, sharp, space, ign, pad, prec, padprec, symb) {\n    var plus_used = false;\n    var sharp_used = false;\n    var space_used = false;\n    var ign_used = /* record */[/* contents */false];\n    var pad_used = false;\n    var prec_used = /* record */[/* contents */false];\n    var check_no_0 = function (symb, pad) {\n      if (typeof pad === \"number\") {\n        return pad;\n      } else if (pad.tag) {\n        if (pad[0] >= 2) {\n          if (legacy_behavior$1) {\n            return /* Arg_padding */Block.__(1, [/* Right */1]);\n          } else {\n            return incompatible_flag(pct_ind, str_ind, symb, \"0\");\n          }\n        } else {\n          return pad;\n        }\n      } else if (pad[0] >= 2) {\n        if (legacy_behavior$1) {\n          return /* Lit_padding */Block.__(0, [\n                    /* Right */1,\n                    pad[1]\n                  ]);\n        } else {\n          return incompatible_flag(pct_ind, str_ind, symb, \"0\");\n        }\n      } else {\n        return pad;\n      }\n    };\n    var opt_of_pad = function (c, pad) {\n      if (typeof pad === \"number\") {\n        return undefined;\n      } else if (pad.tag) {\n        return incompatible_flag(pct_ind, str_ind, c, \"'*'\");\n      } else {\n        switch (pad[0]) {\n          case 0 : \n              if (legacy_behavior$1) {\n                return pad[1];\n              } else {\n                return incompatible_flag(pct_ind, str_ind, c, \"'-'\");\n              }\n          case 1 : \n              return pad[1];\n          case 2 : \n              if (legacy_behavior$1) {\n                return pad[1];\n              } else {\n                return incompatible_flag(pct_ind, str_ind, c, \"'0'\");\n              }\n          \n        }\n      }\n    };\n    var get_prec_opt = function (param) {\n      prec_used[0] = true;\n      if (typeof prec === \"number\") {\n        if (prec !== 0) {\n          return incompatible_flag(pct_ind, str_ind, /* \"_\" */95, \"'*'\");\n        } else {\n          return undefined;\n        }\n      } else {\n        return prec[0];\n      }\n    };\n    var fmt_result;\n    var exit = 0;\n    var exit$1 = 0;\n    var exit$2 = 0;\n    if (symb >= 124) {\n      exit$1 = 6;\n    } else {\n      switch (symb) {\n        case 33 : \n            var match = parse_literal(str_ind, str_ind, end_ind);\n            fmt_result = /* Fmt_EBB */[/* Flush */Block.__(10, [match[0]])];\n            break;\n        case 40 : \n            var sub_end = search_subformat_end(str_ind, end_ind, /* \")\" */41);\n            var beg_ind = sub_end + 2 | 0;\n            var match$1 = parse_literal(beg_ind, beg_ind, end_ind);\n            var fmt_rest = match$1[0];\n            var match$2 = parse_literal(str_ind, str_ind, sub_end);\n            var sub_fmtty = fmtty_of_fmt(match$2[0]);\n            if (ign_used[0] = true, ign) {\n              pad_used = true;\n              var ignored_000 = opt_of_pad(/* \"_\" */95, pad);\n              var ignored = /* Ignored_format_subst */Block.__(8, [\n                  ignored_000,\n                  sub_fmtty\n                ]);\n              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                    ignored,\n                    fmt_rest\n                  ])];\n            } else {\n              pad_used = true;\n              fmt_result = /* Fmt_EBB */[/* Format_subst */Block.__(14, [\n                    opt_of_pad(/* \"(\" */40, pad),\n                    sub_fmtty,\n                    fmt_rest\n                  ])];\n            }\n            break;\n        case 44 : \n            fmt_result = parse_literal(str_ind, str_ind, end_ind);\n            break;\n        case 37 : \n        case 64 : \n            exit$1 = 4;\n            break;\n        case 67 : \n            var match$3 = parse_literal(str_ind, str_ind, end_ind);\n            var fmt_rest$1 = match$3[0];\n            fmt_result = (ign_used[0] = true, ign) ? /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                    /* Ignored_caml_char */1,\n                    fmt_rest$1\n                  ])] : /* Fmt_EBB */[/* Caml_char */Block.__(1, [fmt_rest$1])];\n            break;\n        case 78 : \n            var match$4 = parse_literal(str_ind, str_ind, end_ind);\n            var fmt_rest$2 = match$4[0];\n            if (ign_used[0] = true, ign) {\n              var ignored$1 = /* Ignored_scan_get_counter */Block.__(10, [/* Token_counter */2]);\n              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                    ignored$1,\n                    fmt_rest$2\n                  ])];\n            } else {\n              fmt_result = /* Fmt_EBB */[/* Scan_get_counter */Block.__(21, [\n                    /* Token_counter */2,\n                    fmt_rest$2\n                  ])];\n            }\n            break;\n        case 83 : \n            pad_used = true;\n            var pad$1 = check_no_0(symb, padprec);\n            var match$5 = parse_literal(str_ind, str_ind, end_ind);\n            var fmt_rest$3 = match$5[0];\n            if (ign_used[0] = true, ign) {\n              pad_used = true;\n              var ignored$2 = /* Ignored_caml_string */Block.__(1, [opt_of_pad(/* \"_\" */95, padprec)]);\n              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                    ignored$2,\n                    fmt_rest$3\n                  ])];\n            } else {\n              var match$6 = make_padding_fmt_ebb(pad$1, fmt_rest$3);\n              fmt_result = /* Fmt_EBB */[/* Caml_string */Block.__(3, [\n                    match$6[0],\n                    match$6[1]\n                  ])];\n            }\n            break;\n        case 91 : \n            var match$7 = parse_char_set(str_ind, end_ind);\n            var char_set = match$7[1];\n            var next_ind = match$7[0];\n            var match$8 = parse_literal(next_ind, next_ind, end_ind);\n            var fmt_rest$4 = match$8[0];\n            if (ign_used[0] = true, ign) {\n              pad_used = true;\n              var ignored_000$1 = opt_of_pad(/* \"_\" */95, pad);\n              var ignored$3 = /* Ignored_scan_char_set */Block.__(9, [\n                  ignored_000$1,\n                  char_set\n                ]);\n              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                    ignored$3,\n                    fmt_rest$4\n                  ])];\n            } else {\n              pad_used = true;\n              fmt_result = /* Fmt_EBB */[/* Scan_char_set */Block.__(20, [\n                    opt_of_pad(/* \"[\" */91, pad),\n                    char_set,\n                    fmt_rest$4\n                  ])];\n            }\n            break;\n        case 32 : \n        case 35 : \n        case 43 : \n        case 45 : \n        case 95 : \n            exit$1 = 5;\n            break;\n        case 97 : \n            var match$9 = parse_literal(str_ind, str_ind, end_ind);\n            fmt_result = /* Fmt_EBB */[/* Alpha */Block.__(15, [match$9[0]])];\n            break;\n        case 66 : \n        case 98 : \n            exit$1 = 3;\n            break;\n        case 99 : \n            var char_format = function (fmt_rest) {\n              if (ign_used[0] = true, ign) {\n                return /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                            /* Ignored_char */0,\n                            fmt_rest\n                          ])];\n              } else {\n                return /* Fmt_EBB */[/* Char */Block.__(0, [fmt_rest])];\n              }\n            };\n            var scan_format = function (fmt_rest) {\n              if (ign_used[0] = true, ign) {\n                return /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                            /* Ignored_scan_next_char */4,\n                            fmt_rest\n                          ])];\n              } else {\n                return /* Fmt_EBB */[/* Scan_next_char */Block.__(22, [fmt_rest])];\n              }\n            };\n            var match$10 = parse_literal(str_ind, str_ind, end_ind);\n            var fmt_rest$5 = match$10[0];\n            pad_used = true;\n            var match$11 = opt_of_pad(/* \"c\" */99, pad);\n            fmt_result = match$11 !== undefined ? (\n                match$11 !== 0 ? (\n                    legacy_behavior$1 ? char_format(fmt_rest$5) : invalid_format_message(str_ind, \"non-zero widths are unsupported for %c conversions\")\n                  ) : scan_format(fmt_rest$5)\n              ) : char_format(fmt_rest$5);\n            break;\n        case 69 : \n        case 70 : \n        case 71 : \n        case 101 : \n        case 102 : \n        case 103 : \n            exit$1 = 2;\n            break;\n        case 76 : \n        case 108 : \n        case 110 : \n            exit$2 = 8;\n            break;\n        case 114 : \n            var match$12 = parse_literal(str_ind, str_ind, end_ind);\n            var fmt_rest$6 = match$12[0];\n            fmt_result = (ign_used[0] = true, ign) ? /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                    /* Ignored_reader */3,\n                    fmt_rest$6\n                  ])] : /* Fmt_EBB */[/* Reader */Block.__(19, [fmt_rest$6])];\n            break;\n        case 115 : \n            pad_used = true;\n            var pad$2 = check_no_0(symb, padprec);\n            var match$13 = parse_literal(str_ind, str_ind, end_ind);\n            var fmt_rest$7 = match$13[0];\n            if (ign_used[0] = true, ign) {\n              pad_used = true;\n              var ignored$4 = /* Ignored_string */Block.__(0, [opt_of_pad(/* \"_\" */95, padprec)]);\n              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                    ignored$4,\n                    fmt_rest$7\n                  ])];\n            } else {\n              var match$14 = make_padding_fmt_ebb(pad$2, fmt_rest$7);\n              fmt_result = /* Fmt_EBB */[/* String */Block.__(2, [\n                    match$14[0],\n                    match$14[1]\n                  ])];\n            }\n            break;\n        case 116 : \n            var match$15 = parse_literal(str_ind, str_ind, end_ind);\n            fmt_result = /* Fmt_EBB */[/* Theta */Block.__(16, [match$15[0]])];\n            break;\n        case 88 : \n        case 100 : \n        case 105 : \n        case 111 : \n        case 117 : \n        case 120 : \n            exit$2 = 7;\n            break;\n        case 0 : \n        case 1 : \n        case 2 : \n        case 3 : \n        case 4 : \n        case 5 : \n        case 6 : \n        case 7 : \n        case 8 : \n        case 9 : \n        case 10 : \n        case 11 : \n        case 12 : \n        case 13 : \n        case 14 : \n        case 15 : \n        case 16 : \n        case 17 : \n        case 18 : \n        case 19 : \n        case 20 : \n        case 21 : \n        case 22 : \n        case 23 : \n        case 24 : \n        case 25 : \n        case 26 : \n        case 27 : \n        case 28 : \n        case 29 : \n        case 30 : \n        case 31 : \n        case 34 : \n        case 36 : \n        case 38 : \n        case 39 : \n        case 41 : \n        case 42 : \n        case 46 : \n        case 47 : \n        case 48 : \n        case 49 : \n        case 50 : \n        case 51 : \n        case 52 : \n        case 53 : \n        case 54 : \n        case 55 : \n        case 56 : \n        case 57 : \n        case 58 : \n        case 59 : \n        case 60 : \n        case 61 : \n        case 62 : \n        case 63 : \n        case 65 : \n        case 68 : \n        case 72 : \n        case 73 : \n        case 74 : \n        case 75 : \n        case 77 : \n        case 79 : \n        case 80 : \n        case 81 : \n        case 82 : \n        case 84 : \n        case 85 : \n        case 86 : \n        case 87 : \n        case 89 : \n        case 90 : \n        case 92 : \n        case 93 : \n        case 94 : \n        case 96 : \n        case 104 : \n        case 106 : \n        case 107 : \n        case 109 : \n        case 112 : \n        case 113 : \n        case 118 : \n        case 119 : \n        case 121 : \n        case 122 : \n            exit$1 = 6;\n            break;\n        case 123 : \n            var sub_end$1 = search_subformat_end(str_ind, end_ind, /* \"}\" */125);\n            var match$16 = parse_literal(str_ind, str_ind, sub_end$1);\n            var beg_ind$1 = sub_end$1 + 2 | 0;\n            var match$17 = parse_literal(beg_ind$1, beg_ind$1, end_ind);\n            var fmt_rest$8 = match$17[0];\n            var sub_fmtty$1 = fmtty_of_fmt(match$16[0]);\n            if (ign_used[0] = true, ign) {\n              pad_used = true;\n              var ignored_000$2 = opt_of_pad(/* \"_\" */95, pad);\n              var ignored$5 = /* Ignored_format_arg */Block.__(7, [\n                  ignored_000$2,\n                  sub_fmtty$1\n                ]);\n              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                    ignored$5,\n                    fmt_rest$8\n                  ])];\n            } else {\n              pad_used = true;\n              fmt_result = /* Fmt_EBB */[/* Format_arg */Block.__(13, [\n                    opt_of_pad(/* \"{\" */123, pad),\n                    sub_fmtty$1,\n                    fmt_rest$8\n                  ])];\n            }\n            break;\n        \n      }\n    }\n    switch (exit$2) {\n      case 7 : \n          plus_used = true;\n          sharp_used = true;\n          space_used = true;\n          var iconv = compute_int_conv(pct_ind, str_ind, plus, sharp, space, symb);\n          var match$18 = parse_literal(str_ind, str_ind, end_ind);\n          var fmt_rest$9 = match$18[0];\n          if (ign_used[0] = true, ign) {\n            pad_used = true;\n            var ignored_001 = opt_of_pad(/* \"_\" */95, pad);\n            var ignored$6 = /* Ignored_int */Block.__(2, [\n                iconv,\n                ignored_001\n              ]);\n            fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                  ignored$6,\n                  fmt_rest$9\n                ])];\n          } else {\n            pad_used = true;\n            prec_used[0] = true;\n            var pad$3;\n            var exit$3 = 0;\n            if (typeof prec === \"number\" && prec === 0) {\n              pad$3 = pad;\n            } else {\n              exit$3 = 9;\n            }\n            if (exit$3 === 9) {\n              pad$3 = typeof pad === \"number\" ? /* No_padding */0 : (\n                  pad.tag ? (\n                      pad[0] >= 2 ? (\n                          legacy_behavior$1 ? /* Arg_padding */Block.__(1, [/* Right */1]) : incompatible_flag(pct_ind, str_ind, /* \"0\" */48, \"precision\")\n                        ) : pad\n                    ) : (\n                      pad[0] >= 2 ? (\n                          legacy_behavior$1 ? /* Lit_padding */Block.__(0, [\n                                /* Right */1,\n                                pad[1]\n                              ]) : incompatible_flag(pct_ind, str_ind, /* \"0\" */48, \"precision\")\n                        ) : pad\n                    )\n                );\n            }\n            var match$19 = make_padprec_fmt_ebb(pad$3, (prec_used[0] = true, prec), fmt_rest$9);\n            fmt_result = /* Fmt_EBB */[/* Int */Block.__(4, [\n                  iconv,\n                  match$19[0],\n                  match$19[1],\n                  match$19[2]\n                ])];\n          }\n          break;\n      case 8 : \n          if (str_ind === end_ind || !is_int_base(Caml_string.get(str, str_ind))) {\n            var match$20 = parse_literal(str_ind, str_ind, end_ind);\n            var fmt_rest$10 = match$20[0];\n            var counter = counter_of_char(symb);\n            if (ign_used[0] = true, ign) {\n              var ignored$7 = /* Ignored_scan_get_counter */Block.__(10, [counter]);\n              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                    ignored$7,\n                    fmt_rest$10\n                  ])];\n            } else {\n              fmt_result = /* Fmt_EBB */[/* Scan_get_counter */Block.__(21, [\n                    counter,\n                    fmt_rest$10\n                  ])];\n            }\n          } else {\n            exit$1 = 6;\n          }\n          break;\n      \n    }\n    switch (exit$1) {\n      case 2 : \n          plus_used = true;\n          space_used = true;\n          var fconv = compute_float_conv(pct_ind, str_ind, plus, space, symb);\n          var match$21 = parse_literal(str_ind, str_ind, end_ind);\n          var fmt_rest$11 = match$21[0];\n          if (ign_used[0] = true, ign) {\n            pad_used = true;\n            var ignored_000$3 = opt_of_pad(/* \"_\" */95, pad);\n            var ignored_001$1 = get_prec_opt(/* () */0);\n            var ignored$8 = /* Ignored_float */Block.__(6, [\n                ignored_000$3,\n                ignored_001$1\n              ]);\n            fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                  ignored$8,\n                  fmt_rest$11\n                ])];\n          } else {\n            pad_used = true;\n            var match$22 = make_padprec_fmt_ebb(pad, (prec_used[0] = true, prec), fmt_rest$11);\n            fmt_result = /* Fmt_EBB */[/* Float */Block.__(8, [\n                  fconv,\n                  match$22[0],\n                  match$22[1],\n                  match$22[2]\n                ])];\n          }\n          break;\n      case 3 : \n          var match$23 = parse_literal(str_ind, str_ind, end_ind);\n          var fmt_rest$12 = match$23[0];\n          fmt_result = (ign_used[0] = true, ign) ? /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                  /* Ignored_bool */2,\n                  fmt_rest$12\n                ])] : /* Fmt_EBB */[/* Bool */Block.__(9, [fmt_rest$12])];\n          break;\n      case 4 : \n          var match$24 = parse_literal(str_ind, str_ind, end_ind);\n          fmt_result = /* Fmt_EBB */[/* Char_literal */Block.__(12, [\n                symb,\n                match$24[0]\n              ])];\n          break;\n      case 5 : \n          fmt_result = Curry._3(failwith_message(/* Format */[\n                    /* String_literal */Block.__(11, [\n                        \"invalid format \",\n                        /* Caml_string */Block.__(3, [\n                            /* No_padding */0,\n                            /* String_literal */Block.__(11, [\n                                \": at character number \",\n                                /* Int */Block.__(4, [\n                                    /* Int_d */0,\n                                    /* No_padding */0,\n                                    /* No_precision */0,\n                                    /* String_literal */Block.__(11, [\n                                        \", flag \",\n                                        /* Caml_char */Block.__(1, [/* String_literal */Block.__(11, [\n                                                \" is only allowed after the '\",\n                                                /* Char_literal */Block.__(12, [\n                                                    /* \"%\" */37,\n                                                    /* String_literal */Block.__(11, [\n                                                        \"', before padding and precision\",\n                                                        /* End_of_format */0\n                                                      ])\n                                                  ])\n                                              ])])\n                                      ])\n                                  ])\n                              ])\n                          ])\n                      ]),\n                    \"invalid format %S: at character number %d, flag %C is only allowed after the '%%', before padding and precision\"\n                  ]), str, pct_ind, symb);\n          break;\n      case 6 : \n          if (symb >= 108) {\n            if (symb >= 111) {\n              exit = 1;\n            } else {\n              switch (symb - 108 | 0) {\n                case 0 : \n                    plus_used = true;\n                    sharp_used = true;\n                    space_used = true;\n                    var iconv$1 = compute_int_conv(pct_ind, str_ind + 1 | 0, plus, sharp, space, Caml_string.get(str, str_ind));\n                    var beg_ind$2 = str_ind + 1 | 0;\n                    var match$25 = parse_literal(beg_ind$2, beg_ind$2, end_ind);\n                    var fmt_rest$13 = match$25[0];\n                    if (ign_used[0] = true, ign) {\n                      pad_used = true;\n                      var ignored_001$2 = opt_of_pad(/* \"_\" */95, pad);\n                      var ignored$9 = /* Ignored_int32 */Block.__(3, [\n                          iconv$1,\n                          ignored_001$2\n                        ]);\n                      fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                            ignored$9,\n                            fmt_rest$13\n                          ])];\n                    } else {\n                      pad_used = true;\n                      var match$26 = make_padprec_fmt_ebb(pad, (prec_used[0] = true, prec), fmt_rest$13);\n                      fmt_result = /* Fmt_EBB */[/* Int32 */Block.__(5, [\n                            iconv$1,\n                            match$26[0],\n                            match$26[1],\n                            match$26[2]\n                          ])];\n                    }\n                    break;\n                case 1 : \n                    exit = 1;\n                    break;\n                case 2 : \n                    plus_used = true;\n                    sharp_used = true;\n                    space_used = true;\n                    var iconv$2 = compute_int_conv(pct_ind, str_ind + 1 | 0, plus, sharp, space, Caml_string.get(str, str_ind));\n                    var beg_ind$3 = str_ind + 1 | 0;\n                    var match$27 = parse_literal(beg_ind$3, beg_ind$3, end_ind);\n                    var fmt_rest$14 = match$27[0];\n                    if (ign_used[0] = true, ign) {\n                      pad_used = true;\n                      var ignored_001$3 = opt_of_pad(/* \"_\" */95, pad);\n                      var ignored$10 = /* Ignored_nativeint */Block.__(4, [\n                          iconv$2,\n                          ignored_001$3\n                        ]);\n                      fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                            ignored$10,\n                            fmt_rest$14\n                          ])];\n                    } else {\n                      pad_used = true;\n                      var match$28 = make_padprec_fmt_ebb(pad, (prec_used[0] = true, prec), fmt_rest$14);\n                      fmt_result = /* Fmt_EBB */[/* Nativeint */Block.__(6, [\n                            iconv$2,\n                            match$28[0],\n                            match$28[1],\n                            match$28[2]\n                          ])];\n                    }\n                    break;\n                \n              }\n            }\n          } else if (symb !== 76) {\n            exit = 1;\n          } else {\n            plus_used = true;\n            sharp_used = true;\n            space_used = true;\n            var iconv$3 = compute_int_conv(pct_ind, str_ind + 1 | 0, plus, sharp, space, Caml_string.get(str, str_ind));\n            var beg_ind$4 = str_ind + 1 | 0;\n            var match$29 = parse_literal(beg_ind$4, beg_ind$4, end_ind);\n            var fmt_rest$15 = match$29[0];\n            if (ign_used[0] = true, ign) {\n              pad_used = true;\n              var ignored_001$4 = opt_of_pad(/* \"_\" */95, pad);\n              var ignored$11 = /* Ignored_int64 */Block.__(5, [\n                  iconv$3,\n                  ignored_001$4\n                ]);\n              fmt_result = /* Fmt_EBB */[/* Ignored_param */Block.__(23, [\n                    ignored$11,\n                    fmt_rest$15\n                  ])];\n            } else {\n              pad_used = true;\n              var match$30 = make_padprec_fmt_ebb(pad, (prec_used[0] = true, prec), fmt_rest$15);\n              fmt_result = /* Fmt_EBB */[/* Int64 */Block.__(7, [\n                    iconv$3,\n                    match$30[0],\n                    match$30[1],\n                    match$30[2]\n                  ])];\n            }\n          }\n          break;\n      \n    }\n    if (exit === 1) {\n      fmt_result = Curry._3(failwith_message(/* Format */[\n                /* String_literal */Block.__(11, [\n                    \"invalid format \",\n                    /* Caml_string */Block.__(3, [\n                        /* No_padding */0,\n                        /* String_literal */Block.__(11, [\n                            \": at character number \",\n                            /* Int */Block.__(4, [\n                                /* Int_d */0,\n                                /* No_padding */0,\n                                /* No_precision */0,\n                                /* String_literal */Block.__(11, [\n                                    \", invalid conversion \\\"\",\n                                    /* Char_literal */Block.__(12, [\n                                        /* \"%\" */37,\n                                        /* Char */Block.__(0, [/* Char_literal */Block.__(12, [\n                                                /* \"\\\"\" */34,\n                                                /* End_of_format */0\n                                              ])])\n                                      ])\n                                  ])\n                              ])\n                          ])\n                      ])\n                  ]),\n                \"invalid format %S: at character number %d, invalid conversion \\\"%%%c\\\"\"\n              ]), str, str_ind - 1 | 0, symb);\n    }\n    if (!legacy_behavior$1) {\n      if (!plus_used && plus) {\n        incompatible_flag(pct_ind, str_ind, symb, \"'+'\");\n      }\n      if (!sharp_used && sharp) {\n        incompatible_flag(pct_ind, str_ind, symb, \"'#'\");\n      }\n      if (!space_used && space) {\n        incompatible_flag(pct_ind, str_ind, symb, \"' '\");\n      }\n      if (!pad_used && Caml_obj.caml_notequal(/* Padding_EBB */[pad], /* Padding_EBB */[/* No_padding */0])) {\n        incompatible_flag(pct_ind, str_ind, symb, \"`padding'\");\n      }\n      if (!prec_used[0] && Caml_obj.caml_notequal(/* Precision_EBB */[prec], /* Precision_EBB */[/* No_precision */0])) {\n        incompatible_flag(pct_ind, str_ind, ign ? /* \"_\" */95 : symb, \"`precision'\");\n      }\n      if (ign && plus) {\n        incompatible_flag(pct_ind, str_ind, /* \"_\" */95, \"'+'\");\n      }\n      \n    }\n    if (!ign_used[0] && ign) {\n      var exit$4 = 0;\n      if (symb >= 38) {\n        if (symb !== 44) {\n          if (symb !== 64) {\n            exit$4 = 1;\n          } else if (!legacy_behavior$1) {\n            exit$4 = 1;\n          }\n          \n        } else if (!legacy_behavior$1) {\n          exit$4 = 1;\n        }\n        \n      } else if (symb !== 33) {\n        if (symb >= 37) {\n          if (!legacy_behavior$1) {\n            exit$4 = 1;\n          }\n          \n        } else {\n          exit$4 = 1;\n        }\n      } else if (!legacy_behavior$1) {\n        exit$4 = 1;\n      }\n      if (exit$4 === 1) {\n        incompatible_flag(pct_ind, str_ind, symb, \"'_'\");\n      }\n      \n    }\n    return fmt_result;\n  };\n  var parse_flags = function (pct_ind, str_ind, end_ind, ign) {\n    var zero = /* record */[/* contents */false];\n    var minus = /* record */[/* contents */false];\n    var plus = /* record */[/* contents */false];\n    var space = /* record */[/* contents */false];\n    var sharp = /* record */[/* contents */false];\n    var set_flag = function (str_ind, flag) {\n      if (flag[0] && !legacy_behavior$1) {\n        Curry._3(failwith_message(/* Format */[\n                  /* String_literal */Block.__(11, [\n                      \"invalid format \",\n                      /* Caml_string */Block.__(3, [\n                          /* No_padding */0,\n                          /* String_literal */Block.__(11, [\n                              \": at character number \",\n                              /* Int */Block.__(4, [\n                                  /* Int_d */0,\n                                  /* No_padding */0,\n                                  /* No_precision */0,\n                                  /* String_literal */Block.__(11, [\n                                      \", duplicate flag \",\n                                      /* Caml_char */Block.__(1, [/* End_of_format */0])\n                                    ])\n                                ])\n                            ])\n                        ])\n                    ]),\n                  \"invalid format %S: at character number %d, duplicate flag %C\"\n                ]), str, str_ind, Caml_string.get(str, str_ind));\n      }\n      flag[0] = true;\n      return /* () */0;\n    };\n    var _str_ind = str_ind;\n    while(true) {\n      var str_ind$1 = _str_ind;\n      if (str_ind$1 === end_ind) {\n        invalid_format_message(end_ind, \"unexpected end of format\");\n      }\n      var match = Caml_string.get(str, str_ind$1);\n      var exit = 0;\n      switch (match) {\n        case 32 : \n            set_flag(str_ind$1, space);\n            _str_ind = str_ind$1 + 1 | 0;\n            continue ;\n        case 35 : \n            set_flag(str_ind$1, sharp);\n            _str_ind = str_ind$1 + 1 | 0;\n            continue ;\n        case 43 : \n            set_flag(str_ind$1, plus);\n            _str_ind = str_ind$1 + 1 | 0;\n            continue ;\n        case 45 : \n            set_flag(str_ind$1, minus);\n            _str_ind = str_ind$1 + 1 | 0;\n            continue ;\n        case 33 : \n        case 34 : \n        case 36 : \n        case 37 : \n        case 38 : \n        case 39 : \n        case 40 : \n        case 41 : \n        case 42 : \n        case 44 : \n        case 46 : \n        case 47 : \n            exit = 1;\n            break;\n        case 48 : \n            set_flag(str_ind$1, zero);\n            _str_ind = str_ind$1 + 1 | 0;\n            continue ;\n        default:\n          exit = 1;\n      }\n      if (exit === 1) {\n        var pct_ind$1 = pct_ind;\n        var str_ind$2 = str_ind$1;\n        var end_ind$1 = end_ind;\n        var zero$1 = zero[0];\n        var minus$1 = minus[0];\n        var plus$1 = plus[0];\n        var sharp$1 = sharp[0];\n        var space$1 = space[0];\n        var ign$1 = ign;\n        if (str_ind$2 === end_ind$1) {\n          invalid_format_message(end_ind$1, \"unexpected end of format\");\n        }\n        var padty = zero$1 ? (\n            minus$1 ? (\n                legacy_behavior$1 ? /* Left */0 : incompatible_flag(pct_ind$1, str_ind$2, /* \"-\" */45, \"0\")\n              ) : /* Zeros */2\n          ) : (\n            minus$1 ? /* Left */0 : /* Right */1\n          );\n        var match$1 = Caml_string.get(str, str_ind$2);\n        var exit$1 = 0;\n        if (match$1 >= 48) {\n          if (match$1 >= 58) {\n            exit$1 = 1;\n          } else {\n            var match$2 = parse_positive(str_ind$2, end_ind$1, 0);\n            return parse_after_padding(pct_ind$1, match$2[0], end_ind$1, minus$1, plus$1, sharp$1, space$1, ign$1, /* Lit_padding */Block.__(0, [\n                          padty,\n                          match$2[1]\n                        ]));\n          }\n        } else if (match$1 !== 42) {\n          exit$1 = 1;\n        } else {\n          return parse_after_padding(pct_ind$1, str_ind$2 + 1 | 0, end_ind$1, minus$1, plus$1, sharp$1, space$1, ign$1, /* Arg_padding */Block.__(1, [padty]));\n        }\n        if (exit$1 === 1) {\n          switch (padty) {\n            case 0 : \n                if (!legacy_behavior$1) {\n                  invalid_format_without(str_ind$2 - 1 | 0, /* \"-\" */45, \"padding\");\n                }\n                return parse_after_padding(pct_ind$1, str_ind$2, end_ind$1, minus$1, plus$1, sharp$1, space$1, ign$1, /* No_padding */0);\n            case 1 : \n                return parse_after_padding(pct_ind$1, str_ind$2, end_ind$1, minus$1, plus$1, sharp$1, space$1, ign$1, /* No_padding */0);\n            case 2 : \n                return parse_after_padding(pct_ind$1, str_ind$2, end_ind$1, minus$1, plus$1, sharp$1, space$1, ign$1, /* Lit_padding */Block.__(0, [\n                              /* Right */1,\n                              0\n                            ]));\n            \n          }\n        }\n        \n      }\n      \n    };\n  };\n  var is_int_base = function (symb) {\n    switch (symb) {\n      case 89 : \n      case 90 : \n      case 91 : \n      case 92 : \n      case 93 : \n      case 94 : \n      case 95 : \n      case 96 : \n      case 97 : \n      case 98 : \n      case 99 : \n      case 101 : \n      case 102 : \n      case 103 : \n      case 104 : \n      case 106 : \n      case 107 : \n      case 108 : \n      case 109 : \n      case 110 : \n      case 112 : \n      case 113 : \n      case 114 : \n      case 115 : \n      case 116 : \n      case 118 : \n      case 119 : \n          return false;\n      case 88 : \n      case 100 : \n      case 105 : \n      case 111 : \n      case 117 : \n      case 120 : \n          return true;\n      default:\n        return false;\n    }\n  };\n  var counter_of_char = function (symb) {\n    var exit = 0;\n    if (symb >= 108) {\n      if (symb >= 111) {\n        exit = 1;\n      } else {\n        switch (symb - 108 | 0) {\n          case 0 : \n              return /* Line_counter */0;\n          case 1 : \n              exit = 1;\n              break;\n          case 2 : \n              return /* Char_counter */1;\n          \n        }\n      }\n    } else if (symb !== 76) {\n      exit = 1;\n    } else {\n      return /* Token_counter */2;\n    }\n    if (exit === 1) {\n      throw [\n            Caml_builtin_exceptions.assert_failure,\n            /* tuple */[\n              \"camlinternalFormat.ml\",\n              2686,\n              34\n            ]\n          ];\n    }\n    \n  };\n  var parse_char_set = function (str_ind, end_ind) {\n    if (str_ind === end_ind) {\n      invalid_format_message(end_ind, \"unexpected end of format\");\n    }\n    var char_set = Bytes.make(32, /* \"\\000\" */0);\n    var add_range = function (c, c$prime) {\n      for(var i = c; i <= c$prime; ++i){\n        add_in_char_set(char_set, Pervasives.char_of_int(i));\n      }\n      return /* () */0;\n    };\n    var fail_single_percent = function (str_ind) {\n      return Curry._2(failwith_message(/* Format */[\n                      /* String_literal */Block.__(11, [\n                          \"invalid format \",\n                          /* Caml_string */Block.__(3, [\n                              /* No_padding */0,\n                              /* String_literal */Block.__(11, [\n                                  \": '\",\n                                  /* Char_literal */Block.__(12, [\n                                      /* \"%\" */37,\n                                      /* String_literal */Block.__(11, [\n                                          \"' alone is not accepted in character sets, use \",\n                                          /* Char_literal */Block.__(12, [\n                                              /* \"%\" */37,\n                                              /* Char_literal */Block.__(12, [\n                                                  /* \"%\" */37,\n                                                  /* String_literal */Block.__(11, [\n                                                      \" instead at position \",\n                                                      /* Int */Block.__(4, [\n                                                          /* Int_d */0,\n                                                          /* No_padding */0,\n                                                          /* No_precision */0,\n                                                          /* Char_literal */Block.__(12, [\n                                                              /* \".\" */46,\n                                                              /* End_of_format */0\n                                                            ])\n                                                        ])\n                                                    ])\n                                                ])\n                                            ])\n                                        ])\n                                    ])\n                                ])\n                            ])\n                        ]),\n                      \"invalid format %S: '%%' alone is not accepted in character sets, use %%%% instead at position %d.\"\n                    ]), str, str_ind);\n    };\n    var parse_char_set_after_char = function (_str_ind, end_ind, _c) {\n      while(true) {\n        var c = _c;\n        var str_ind = _str_ind;\n        if (str_ind === end_ind) {\n          invalid_format_message(end_ind, \"unexpected end of format\");\n        }\n        var c$prime = Caml_string.get(str, str_ind);\n        var exit = 0;\n        var exit$1 = 0;\n        if (c$prime >= 46) {\n          if (c$prime !== 64) {\n            if (c$prime !== 93) {\n              exit = 1;\n            } else {\n              add_in_char_set(char_set, c);\n              return str_ind + 1 | 0;\n            }\n          } else {\n            exit$1 = 2;\n          }\n        } else if (c$prime !== 37) {\n          if (c$prime >= 45) {\n            var str_ind$1 = str_ind + 1 | 0;\n            var end_ind$1 = end_ind;\n            var c$1 = c;\n            if (str_ind$1 === end_ind$1) {\n              invalid_format_message(end_ind$1, \"unexpected end of format\");\n            }\n            var c$prime$1 = Caml_string.get(str, str_ind$1);\n            if (c$prime$1 !== 37) {\n              if (c$prime$1 !== 93) {\n                add_range(c$1, c$prime$1);\n                return parse_char_set_content(str_ind$1 + 1 | 0, end_ind$1);\n              } else {\n                add_in_char_set(char_set, c$1);\n                add_in_char_set(char_set, /* \"-\" */45);\n                return str_ind$1 + 1 | 0;\n              }\n            } else {\n              if ((str_ind$1 + 1 | 0) === end_ind$1) {\n                invalid_format_message(end_ind$1, \"unexpected end of format\");\n              }\n              var c$prime$2 = Caml_string.get(str, str_ind$1 + 1 | 0);\n              var exit$2 = 0;\n              if (c$prime$2 !== 37 && c$prime$2 !== 64) {\n                return fail_single_percent(str_ind$1);\n              } else {\n                exit$2 = 1;\n              }\n              if (exit$2 === 1) {\n                add_range(c$1, c$prime$2);\n                return parse_char_set_content(str_ind$1 + 2 | 0, end_ind$1);\n              }\n              \n            }\n          } else {\n            exit = 1;\n          }\n        } else {\n          exit$1 = 2;\n        }\n        if (exit$1 === 2) {\n          if (c === /* \"%\" */37) {\n            add_in_char_set(char_set, c$prime);\n            return parse_char_set_content(str_ind + 1 | 0, end_ind);\n          } else {\n            exit = 1;\n          }\n        }\n        if (exit === 1) {\n          if (c === /* \"%\" */37) {\n            fail_single_percent(str_ind);\n          }\n          add_in_char_set(char_set, c);\n          _c = c$prime;\n          _str_ind = str_ind + 1 | 0;\n          continue ;\n        }\n        \n      };\n    };\n    var parse_char_set_content = function (_str_ind, end_ind) {\n      while(true) {\n        var str_ind = _str_ind;\n        if (str_ind === end_ind) {\n          invalid_format_message(end_ind, \"unexpected end of format\");\n        }\n        var c = Caml_string.get(str, str_ind);\n        if (c !== 45) {\n          if (c !== 93) {\n            return parse_char_set_after_char(str_ind + 1 | 0, end_ind, c);\n          } else {\n            return str_ind + 1 | 0;\n          }\n        } else {\n          add_in_char_set(char_set, /* \"-\" */45);\n          _str_ind = str_ind + 1 | 0;\n          continue ;\n        }\n      };\n    };\n    var parse_char_set_start = function (str_ind, end_ind) {\n      if (str_ind === end_ind) {\n        invalid_format_message(end_ind, \"unexpected end of format\");\n      }\n      var c = Caml_string.get(str, str_ind);\n      return parse_char_set_after_char(str_ind + 1 | 0, end_ind, c);\n    };\n    if (str_ind === end_ind) {\n      invalid_format_message(end_ind, \"unexpected end of format\");\n    }\n    var match = Caml_string.get(str, str_ind);\n    var match$1 = match !== 94 ? /* tuple */[\n        str_ind,\n        false\n      ] : /* tuple */[\n        str_ind + 1 | 0,\n        true\n      ];\n    var next_ind = parse_char_set_start(match$1[0], end_ind);\n    var char_set$1 = Bytes.to_string(char_set);\n    return /* tuple */[\n            next_ind,\n            match$1[1] ? rev_char_set(char_set$1) : char_set$1\n          ];\n  };\n  var check_open_box = function (fmt) {\n    if (typeof fmt === \"number\" || !(fmt.tag === 11 && typeof fmt[1] === \"number\")) {\n      return /* () */0;\n    } else {\n      try {\n        open_box_of_string(fmt[0]);\n        return /* () */0;\n      }\n      catch (raw_exn){\n        var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);\n        if (exn[0] === Caml_builtin_exceptions.failure) {\n          return /* () */0;\n        } else {\n          throw exn;\n        }\n      }\n    }\n  };\n  var parse_tag = function (is_open_tag, str_ind, end_ind) {\n    try {\n      if (str_ind === end_ind) {\n        throw Caml_builtin_exceptions.not_found;\n      }\n      var match = Caml_string.get(str, str_ind);\n      if (match !== 60) {\n        throw Caml_builtin_exceptions.not_found;\n      } else {\n        var ind = $$String.index_from(str, str_ind + 1 | 0, /* \">\" */62);\n        if (ind >= end_ind) {\n          throw Caml_builtin_exceptions.not_found;\n        }\n        var sub_str = $$String.sub(str, str_ind, (ind - str_ind | 0) + 1 | 0);\n        var beg_ind = ind + 1 | 0;\n        var match$1 = parse_literal(beg_ind, beg_ind, end_ind);\n        var match$2 = parse_literal(str_ind, str_ind, ind + 1 | 0);\n        var sub_fmt = match$2[0];\n        var sub_format = /* Format */[\n          sub_fmt,\n          sub_str\n        ];\n        var formatting = is_open_tag ? /* Open_tag */Block.__(0, [sub_format]) : (check_open_box(sub_fmt), /* Open_box */Block.__(1, [sub_format]));\n        return /* Fmt_EBB */[/* Formatting_gen */Block.__(18, [\n                    formatting,\n                    match$1[0]\n                  ])];\n      }\n    }\n    catch (exn){\n      if (exn === Caml_builtin_exceptions.not_found) {\n        var match$3 = parse_literal(str_ind, str_ind, end_ind);\n        var sub_format$1 = /* Format */[\n          /* End_of_format */0,\n          \"\"\n        ];\n        var formatting$1 = is_open_tag ? /* Open_tag */Block.__(0, [sub_format$1]) : /* Open_box */Block.__(1, [sub_format$1]);\n        return /* Fmt_EBB */[/* Formatting_gen */Block.__(18, [\n                    formatting$1,\n                    match$3[0]\n                  ])];\n      } else {\n        throw exn;\n      }\n    }\n  };\n  return parse_literal(0, 0, str.length);\n}\n\nfunction format_of_string_fmtty(str, fmtty) {\n  var match = fmt_ebb_of_string(undefined, str);\n  try {\n    return /* Format */[\n            type_format(match[0], fmtty),\n            str\n          ];\n  }\n  catch (exn){\n    if (exn === Type_mismatch) {\n      return Curry._2(failwith_message(/* Format */[\n                      /* String_literal */Block.__(11, [\n                          \"bad input: format type mismatch between \",\n                          /* Caml_string */Block.__(3, [\n                              /* No_padding */0,\n                              /* String_literal */Block.__(11, [\n                                  \" and \",\n                                  /* Caml_string */Block.__(3, [\n                                      /* No_padding */0,\n                                      /* End_of_format */0\n                                    ])\n                                ])\n                            ])\n                        ]),\n                      \"bad input: format type mismatch between %S and %S\"\n                    ]), str, string_of_fmtty(fmtty));\n    } else {\n      throw exn;\n    }\n  }\n}\n\nfunction format_of_string_format(str, param) {\n  var match = fmt_ebb_of_string(undefined, str);\n  try {\n    return /* Format */[\n            type_format(match[0], fmtty_of_fmt(param[0])),\n            str\n          ];\n  }\n  catch (exn){\n    if (exn === Type_mismatch) {\n      return Curry._2(failwith_message(/* Format */[\n                      /* String_literal */Block.__(11, [\n                          \"bad input: format type mismatch between \",\n                          /* Caml_string */Block.__(3, [\n                              /* No_padding */0,\n                              /* String_literal */Block.__(11, [\n                                  \" and \",\n                                  /* Caml_string */Block.__(3, [\n                                      /* No_padding */0,\n                                      /* End_of_format */0\n                                    ])\n                                ])\n                            ])\n                        ]),\n                      \"bad input: format type mismatch between %S and %S\"\n                    ]), str, param[1]);\n    } else {\n      throw exn;\n    }\n  }\n}\n\nexports.is_in_char_set = is_in_char_set;\nexports.rev_char_set = rev_char_set;\nexports.create_char_set = create_char_set;\nexports.add_in_char_set = add_in_char_set;\nexports.freeze_char_set = freeze_char_set;\nexports.param_format_of_ignored_format = param_format_of_ignored_format;\nexports.make_printf = make_printf;\nexports.output_acc = output_acc;\nexports.bufput_acc = bufput_acc;\nexports.strput_acc = strput_acc;\nexports.type_format = type_format;\nexports.fmt_ebb_of_string = fmt_ebb_of_string;\nexports.format_of_string_fmtty = format_of_string_fmtty;\nexports.format_of_string_format = format_of_string_format;\nexports.char_of_iconv = char_of_iconv;\nexports.string_of_formatting_lit = string_of_formatting_lit;\nexports.string_of_formatting_gen = string_of_formatting_gen;\nexports.string_of_fmtty = string_of_fmtty;\nexports.string_of_fmt = string_of_fmt;\nexports.open_box_of_string = open_box_of_string;\nexports.symm = symm;\nexports.trans = trans;\nexports.recast = recast;\n/* No side effect */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/camlinternalFormat.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/camlinternalFormatBasics.js":
/*!*********************************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/camlinternalFormatBasics.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Block = __webpack_require__(/*! ./block.js */ \"./node_modules/bs-platform/lib/js/block.js\");\n\nfunction erase_rel(param) {\n  if (typeof param === \"number\") {\n    return /* End_of_fmtty */0;\n  } else {\n    switch (param.tag | 0) {\n      case 0 : \n          return /* Char_ty */Block.__(0, [erase_rel(param[0])]);\n      case 1 : \n          return /* String_ty */Block.__(1, [erase_rel(param[0])]);\n      case 2 : \n          return /* Int_ty */Block.__(2, [erase_rel(param[0])]);\n      case 3 : \n          return /* Int32_ty */Block.__(3, [erase_rel(param[0])]);\n      case 4 : \n          return /* Nativeint_ty */Block.__(4, [erase_rel(param[0])]);\n      case 5 : \n          return /* Int64_ty */Block.__(5, [erase_rel(param[0])]);\n      case 6 : \n          return /* Float_ty */Block.__(6, [erase_rel(param[0])]);\n      case 7 : \n          return /* Bool_ty */Block.__(7, [erase_rel(param[0])]);\n      case 8 : \n          return /* Format_arg_ty */Block.__(8, [\n                    param[0],\n                    erase_rel(param[1])\n                  ]);\n      case 9 : \n          var ty1 = param[0];\n          return /* Format_subst_ty */Block.__(9, [\n                    ty1,\n                    ty1,\n                    erase_rel(param[2])\n                  ]);\n      case 10 : \n          return /* Alpha_ty */Block.__(10, [erase_rel(param[0])]);\n      case 11 : \n          return /* Theta_ty */Block.__(11, [erase_rel(param[0])]);\n      case 12 : \n          return /* Any_ty */Block.__(12, [erase_rel(param[0])]);\n      case 13 : \n          return /* Reader_ty */Block.__(13, [erase_rel(param[0])]);\n      case 14 : \n          return /* Ignored_reader_ty */Block.__(14, [erase_rel(param[0])]);\n      \n    }\n  }\n}\n\nfunction concat_fmtty(fmtty1, fmtty2) {\n  if (typeof fmtty1 === \"number\") {\n    return fmtty2;\n  } else {\n    switch (fmtty1.tag | 0) {\n      case 0 : \n          return /* Char_ty */Block.__(0, [concat_fmtty(fmtty1[0], fmtty2)]);\n      case 1 : \n          return /* String_ty */Block.__(1, [concat_fmtty(fmtty1[0], fmtty2)]);\n      case 2 : \n          return /* Int_ty */Block.__(2, [concat_fmtty(fmtty1[0], fmtty2)]);\n      case 3 : \n          return /* Int32_ty */Block.__(3, [concat_fmtty(fmtty1[0], fmtty2)]);\n      case 4 : \n          return /* Nativeint_ty */Block.__(4, [concat_fmtty(fmtty1[0], fmtty2)]);\n      case 5 : \n          return /* Int64_ty */Block.__(5, [concat_fmtty(fmtty1[0], fmtty2)]);\n      case 6 : \n          return /* Float_ty */Block.__(6, [concat_fmtty(fmtty1[0], fmtty2)]);\n      case 7 : \n          return /* Bool_ty */Block.__(7, [concat_fmtty(fmtty1[0], fmtty2)]);\n      case 8 : \n          return /* Format_arg_ty */Block.__(8, [\n                    fmtty1[0],\n                    concat_fmtty(fmtty1[1], fmtty2)\n                  ]);\n      case 9 : \n          return /* Format_subst_ty */Block.__(9, [\n                    fmtty1[0],\n                    fmtty1[1],\n                    concat_fmtty(fmtty1[2], fmtty2)\n                  ]);\n      case 10 : \n          return /* Alpha_ty */Block.__(10, [concat_fmtty(fmtty1[0], fmtty2)]);\n      case 11 : \n          return /* Theta_ty */Block.__(11, [concat_fmtty(fmtty1[0], fmtty2)]);\n      case 12 : \n          return /* Any_ty */Block.__(12, [concat_fmtty(fmtty1[0], fmtty2)]);\n      case 13 : \n          return /* Reader_ty */Block.__(13, [concat_fmtty(fmtty1[0], fmtty2)]);\n      case 14 : \n          return /* Ignored_reader_ty */Block.__(14, [concat_fmtty(fmtty1[0], fmtty2)]);\n      \n    }\n  }\n}\n\nfunction concat_fmt(fmt1, fmt2) {\n  if (typeof fmt1 === \"number\") {\n    return fmt2;\n  } else {\n    switch (fmt1.tag | 0) {\n      case 0 : \n          return /* Char */Block.__(0, [concat_fmt(fmt1[0], fmt2)]);\n      case 1 : \n          return /* Caml_char */Block.__(1, [concat_fmt(fmt1[0], fmt2)]);\n      case 2 : \n          return /* String */Block.__(2, [\n                    fmt1[0],\n                    concat_fmt(fmt1[1], fmt2)\n                  ]);\n      case 3 : \n          return /* Caml_string */Block.__(3, [\n                    fmt1[0],\n                    concat_fmt(fmt1[1], fmt2)\n                  ]);\n      case 4 : \n          return /* Int */Block.__(4, [\n                    fmt1[0],\n                    fmt1[1],\n                    fmt1[2],\n                    concat_fmt(fmt1[3], fmt2)\n                  ]);\n      case 5 : \n          return /* Int32 */Block.__(5, [\n                    fmt1[0],\n                    fmt1[1],\n                    fmt1[2],\n                    concat_fmt(fmt1[3], fmt2)\n                  ]);\n      case 6 : \n          return /* Nativeint */Block.__(6, [\n                    fmt1[0],\n                    fmt1[1],\n                    fmt1[2],\n                    concat_fmt(fmt1[3], fmt2)\n                  ]);\n      case 7 : \n          return /* Int64 */Block.__(7, [\n                    fmt1[0],\n                    fmt1[1],\n                    fmt1[2],\n                    concat_fmt(fmt1[3], fmt2)\n                  ]);\n      case 8 : \n          return /* Float */Block.__(8, [\n                    fmt1[0],\n                    fmt1[1],\n                    fmt1[2],\n                    concat_fmt(fmt1[3], fmt2)\n                  ]);\n      case 9 : \n          return /* Bool */Block.__(9, [concat_fmt(fmt1[0], fmt2)]);\n      case 10 : \n          return /* Flush */Block.__(10, [concat_fmt(fmt1[0], fmt2)]);\n      case 11 : \n          return /* String_literal */Block.__(11, [\n                    fmt1[0],\n                    concat_fmt(fmt1[1], fmt2)\n                  ]);\n      case 12 : \n          return /* Char_literal */Block.__(12, [\n                    fmt1[0],\n                    concat_fmt(fmt1[1], fmt2)\n                  ]);\n      case 13 : \n          return /* Format_arg */Block.__(13, [\n                    fmt1[0],\n                    fmt1[1],\n                    concat_fmt(fmt1[2], fmt2)\n                  ]);\n      case 14 : \n          return /* Format_subst */Block.__(14, [\n                    fmt1[0],\n                    fmt1[1],\n                    concat_fmt(fmt1[2], fmt2)\n                  ]);\n      case 15 : \n          return /* Alpha */Block.__(15, [concat_fmt(fmt1[0], fmt2)]);\n      case 16 : \n          return /* Theta */Block.__(16, [concat_fmt(fmt1[0], fmt2)]);\n      case 17 : \n          return /* Formatting_lit */Block.__(17, [\n                    fmt1[0],\n                    concat_fmt(fmt1[1], fmt2)\n                  ]);\n      case 18 : \n          return /* Formatting_gen */Block.__(18, [\n                    fmt1[0],\n                    concat_fmt(fmt1[1], fmt2)\n                  ]);\n      case 19 : \n          return /* Reader */Block.__(19, [concat_fmt(fmt1[0], fmt2)]);\n      case 20 : \n          return /* Scan_char_set */Block.__(20, [\n                    fmt1[0],\n                    fmt1[1],\n                    concat_fmt(fmt1[2], fmt2)\n                  ]);\n      case 21 : \n          return /* Scan_get_counter */Block.__(21, [\n                    fmt1[0],\n                    concat_fmt(fmt1[1], fmt2)\n                  ]);\n      case 22 : \n          return /* Scan_next_char */Block.__(22, [concat_fmt(fmt1[0], fmt2)]);\n      case 23 : \n          return /* Ignored_param */Block.__(23, [\n                    fmt1[0],\n                    concat_fmt(fmt1[1], fmt2)\n                  ]);\n      case 24 : \n          return /* Custom */Block.__(24, [\n                    fmt1[0],\n                    fmt1[1],\n                    concat_fmt(fmt1[2], fmt2)\n                  ]);\n      \n    }\n  }\n}\n\nexports.concat_fmtty = concat_fmtty;\nexports.erase_rel = erase_rel;\nexports.concat_fmt = concat_fmt;\n/* No side effect */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/camlinternalFormatBasics.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/char.js":
/*!*************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/char.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Caml_bytes = __webpack_require__(/*! ./caml_bytes.js */ \"./node_modules/bs-platform/lib/js/caml_bytes.js\");\nvar Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions.js */ \"./node_modules/bs-platform/lib/js/caml_builtin_exceptions.js\");\n\nfunction chr(n) {\n  if (n < 0 || n > 255) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"Char.chr\"\n        ];\n  } else {\n    return n;\n  }\n}\n\nfunction escaped(c) {\n  var exit = 0;\n  if (c >= 40) {\n    if (c !== 92) {\n      exit = c >= 127 ? 1 : 2;\n    } else {\n      return \"\\\\\\\\\";\n    }\n  } else if (c >= 32) {\n    if (c >= 39) {\n      return \"\\\\'\";\n    } else {\n      exit = 2;\n    }\n  } else if (c >= 14) {\n    exit = 1;\n  } else {\n    switch (c) {\n      case 8 : \n          return \"\\\\b\";\n      case 9 : \n          return \"\\\\t\";\n      case 10 : \n          return \"\\\\n\";\n      case 0 : \n      case 1 : \n      case 2 : \n      case 3 : \n      case 4 : \n      case 5 : \n      case 6 : \n      case 7 : \n      case 11 : \n      case 12 : \n          exit = 1;\n          break;\n      case 13 : \n          return \"\\\\r\";\n      \n    }\n  }\n  switch (exit) {\n    case 1 : \n        var s = [\n          0,\n          0,\n          0,\n          0\n        ];\n        s[0] = /* \"\\\\\" */92;\n        s[1] = 48 + (c / 100 | 0) | 0;\n        s[2] = 48 + (c / 10 | 0) % 10 | 0;\n        s[3] = 48 + c % 10 | 0;\n        return Caml_bytes.bytes_to_string(s);\n    case 2 : \n        var s$1 = [0];\n        s$1[0] = c;\n        return Caml_bytes.bytes_to_string(s$1);\n    \n  }\n}\n\nfunction lowercase(c) {\n  if (c >= /* \"A\" */65 && c <= /* \"Z\" */90 || c >= /* \"\\192\" */192 && c <= /* \"\\214\" */214 || c >= /* \"\\216\" */216 && c <= /* \"\\222\" */222) {\n    return c + 32 | 0;\n  } else {\n    return c;\n  }\n}\n\nfunction uppercase(c) {\n  if (c >= /* \"a\" */97 && c <= /* \"z\" */122 || c >= /* \"\\224\" */224 && c <= /* \"\\246\" */246 || c >= /* \"\\248\" */248 && c <= /* \"\\254\" */254) {\n    return c - 32 | 0;\n  } else {\n    return c;\n  }\n}\n\nfunction compare(c1, c2) {\n  return c1 - c2 | 0;\n}\n\nexports.chr = chr;\nexports.escaped = escaped;\nexports.lowercase = lowercase;\nexports.uppercase = uppercase;\nexports.compare = compare;\n/* No side effect */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/char.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/curry.js":
/*!**************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/curry.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Caml_array = __webpack_require__(/*! ./caml_array.js */ \"./node_modules/bs-platform/lib/js/caml_array.js\");\n\nfunction app(_f, _args) {\n  while(true) {\n    var args = _args;\n    var f = _f;\n    var arity = f.length;\n    var len = args.length;\n    var d = arity - len | 0;\n    if (d === 0) {\n      return f.apply(null, args);\n    } else if (d < 0) {\n      _args = Caml_array.caml_array_sub(args, arity, -d | 0);\n      _f = f.apply(null, Caml_array.caml_array_sub(args, 0, arity));\n      continue ;\n    } else {\n      return (function(f,args){\n      return function (x) {\n        return app(f, args.concat(/* array */[x]));\n      }\n      }(f,args));\n    }\n  };\n}\n\nfunction curry_1(o, a0, arity) {\n  switch (arity) {\n    case 1 : \n        return o(a0);\n    case 2 : \n        return (function (param) {\n            return o(a0, param);\n          });\n    case 3 : \n        return (function (param, param$1) {\n            return o(a0, param, param$1);\n          });\n    case 4 : \n        return (function (param, param$1, param$2) {\n            return o(a0, param, param$1, param$2);\n          });\n    case 5 : \n        return (function (param, param$1, param$2, param$3) {\n            return o(a0, param, param$1, param$2, param$3);\n          });\n    case 6 : \n        return (function (param, param$1, param$2, param$3, param$4) {\n            return o(a0, param, param$1, param$2, param$3, param$4);\n          });\n    case 7 : \n        return (function (param, param$1, param$2, param$3, param$4, param$5) {\n            return o(a0, param, param$1, param$2, param$3, param$4, param$5);\n          });\n    default:\n      return app(o, /* array */[a0]);\n  }\n}\n\nfunction _1(o, a0) {\n  var arity = o.length;\n  if (arity === 1) {\n    return o(a0);\n  } else {\n    return curry_1(o, a0, arity);\n  }\n}\n\nfunction __1(o) {\n  var arity = o.length;\n  if (arity === 1) {\n    return o;\n  } else {\n    return (function (a0) {\n        return _1(o, a0);\n      });\n  }\n}\n\nfunction curry_2(o, a0, a1, arity) {\n  switch (arity) {\n    case 1 : \n        return app(o(a0), /* array */[a1]);\n    case 2 : \n        return o(a0, a1);\n    case 3 : \n        return (function (param) {\n            return o(a0, a1, param);\n          });\n    case 4 : \n        return (function (param, param$1) {\n            return o(a0, a1, param, param$1);\n          });\n    case 5 : \n        return (function (param, param$1, param$2) {\n            return o(a0, a1, param, param$1, param$2);\n          });\n    case 6 : \n        return (function (param, param$1, param$2, param$3) {\n            return o(a0, a1, param, param$1, param$2, param$3);\n          });\n    case 7 : \n        return (function (param, param$1, param$2, param$3, param$4) {\n            return o(a0, a1, param, param$1, param$2, param$3, param$4);\n          });\n    default:\n      return app(o, /* array */[\n                  a0,\n                  a1\n                ]);\n  }\n}\n\nfunction _2(o, a0, a1) {\n  var arity = o.length;\n  if (arity === 2) {\n    return o(a0, a1);\n  } else {\n    return curry_2(o, a0, a1, arity);\n  }\n}\n\nfunction __2(o) {\n  var arity = o.length;\n  if (arity === 2) {\n    return o;\n  } else {\n    return (function (a0, a1) {\n        return _2(o, a0, a1);\n      });\n  }\n}\n\nfunction curry_3(o, a0, a1, a2, arity) {\n  switch (arity) {\n    case 1 : \n        return app(o(a0), /* array */[\n                    a1,\n                    a2\n                  ]);\n    case 2 : \n        return app(o(a0, a1), /* array */[a2]);\n    case 3 : \n        return o(a0, a1, a2);\n    case 4 : \n        return (function (param) {\n            return o(a0, a1, a2, param);\n          });\n    case 5 : \n        return (function (param, param$1) {\n            return o(a0, a1, a2, param, param$1);\n          });\n    case 6 : \n        return (function (param, param$1, param$2) {\n            return o(a0, a1, a2, param, param$1, param$2);\n          });\n    case 7 : \n        return (function (param, param$1, param$2, param$3) {\n            return o(a0, a1, a2, param, param$1, param$2, param$3);\n          });\n    default:\n      return app(o, /* array */[\n                  a0,\n                  a1,\n                  a2\n                ]);\n  }\n}\n\nfunction _3(o, a0, a1, a2) {\n  var arity = o.length;\n  if (arity === 3) {\n    return o(a0, a1, a2);\n  } else {\n    return curry_3(o, a0, a1, a2, arity);\n  }\n}\n\nfunction __3(o) {\n  var arity = o.length;\n  if (arity === 3) {\n    return o;\n  } else {\n    return (function (a0, a1, a2) {\n        return _3(o, a0, a1, a2);\n      });\n  }\n}\n\nfunction curry_4(o, a0, a1, a2, a3, arity) {\n  switch (arity) {\n    case 1 : \n        return app(o(a0), /* array */[\n                    a1,\n                    a2,\n                    a3\n                  ]);\n    case 2 : \n        return app(o(a0, a1), /* array */[\n                    a2,\n                    a3\n                  ]);\n    case 3 : \n        return app(o(a0, a1, a2), /* array */[a3]);\n    case 4 : \n        return o(a0, a1, a2, a3);\n    case 5 : \n        return (function (param) {\n            return o(a0, a1, a2, a3, param);\n          });\n    case 6 : \n        return (function (param, param$1) {\n            return o(a0, a1, a2, a3, param, param$1);\n          });\n    case 7 : \n        return (function (param, param$1, param$2) {\n            return o(a0, a1, a2, a3, param, param$1, param$2);\n          });\n    default:\n      return app(o, /* array */[\n                  a0,\n                  a1,\n                  a2,\n                  a3\n                ]);\n  }\n}\n\nfunction _4(o, a0, a1, a2, a3) {\n  var arity = o.length;\n  if (arity === 4) {\n    return o(a0, a1, a2, a3);\n  } else {\n    return curry_4(o, a0, a1, a2, a3, arity);\n  }\n}\n\nfunction __4(o) {\n  var arity = o.length;\n  if (arity === 4) {\n    return o;\n  } else {\n    return (function (a0, a1, a2, a3) {\n        return _4(o, a0, a1, a2, a3);\n      });\n  }\n}\n\nfunction curry_5(o, a0, a1, a2, a3, a4, arity) {\n  switch (arity) {\n    case 1 : \n        return app(o(a0), /* array */[\n                    a1,\n                    a2,\n                    a3,\n                    a4\n                  ]);\n    case 2 : \n        return app(o(a0, a1), /* array */[\n                    a2,\n                    a3,\n                    a4\n                  ]);\n    case 3 : \n        return app(o(a0, a1, a2), /* array */[\n                    a3,\n                    a4\n                  ]);\n    case 4 : \n        return app(o(a0, a1, a2, a3), /* array */[a4]);\n    case 5 : \n        return o(a0, a1, a2, a3, a4);\n    case 6 : \n        return (function (param) {\n            return o(a0, a1, a2, a3, a4, param);\n          });\n    case 7 : \n        return (function (param, param$1) {\n            return o(a0, a1, a2, a3, a4, param, param$1);\n          });\n    default:\n      return app(o, /* array */[\n                  a0,\n                  a1,\n                  a2,\n                  a3,\n                  a4\n                ]);\n  }\n}\n\nfunction _5(o, a0, a1, a2, a3, a4) {\n  var arity = o.length;\n  if (arity === 5) {\n    return o(a0, a1, a2, a3, a4);\n  } else {\n    return curry_5(o, a0, a1, a2, a3, a4, arity);\n  }\n}\n\nfunction __5(o) {\n  var arity = o.length;\n  if (arity === 5) {\n    return o;\n  } else {\n    return (function (a0, a1, a2, a3, a4) {\n        return _5(o, a0, a1, a2, a3, a4);\n      });\n  }\n}\n\nfunction curry_6(o, a0, a1, a2, a3, a4, a5, arity) {\n  switch (arity) {\n    case 1 : \n        return app(o(a0), /* array */[\n                    a1,\n                    a2,\n                    a3,\n                    a4,\n                    a5\n                  ]);\n    case 2 : \n        return app(o(a0, a1), /* array */[\n                    a2,\n                    a3,\n                    a4,\n                    a5\n                  ]);\n    case 3 : \n        return app(o(a0, a1, a2), /* array */[\n                    a3,\n                    a4,\n                    a5\n                  ]);\n    case 4 : \n        return app(o(a0, a1, a2, a3), /* array */[\n                    a4,\n                    a5\n                  ]);\n    case 5 : \n        return app(o(a0, a1, a2, a3, a4), /* array */[a5]);\n    case 6 : \n        return o(a0, a1, a2, a3, a4, a5);\n    case 7 : \n        return (function (param) {\n            return o(a0, a1, a2, a3, a4, a5, param);\n          });\n    default:\n      return app(o, /* array */[\n                  a0,\n                  a1,\n                  a2,\n                  a3,\n                  a4,\n                  a5\n                ]);\n  }\n}\n\nfunction _6(o, a0, a1, a2, a3, a4, a5) {\n  var arity = o.length;\n  if (arity === 6) {\n    return o(a0, a1, a2, a3, a4, a5);\n  } else {\n    return curry_6(o, a0, a1, a2, a3, a4, a5, arity);\n  }\n}\n\nfunction __6(o) {\n  var arity = o.length;\n  if (arity === 6) {\n    return o;\n  } else {\n    return (function (a0, a1, a2, a3, a4, a5) {\n        return _6(o, a0, a1, a2, a3, a4, a5);\n      });\n  }\n}\n\nfunction curry_7(o, a0, a1, a2, a3, a4, a5, a6, arity) {\n  switch (arity) {\n    case 1 : \n        return app(o(a0), /* array */[\n                    a1,\n                    a2,\n                    a3,\n                    a4,\n                    a5,\n                    a6\n                  ]);\n    case 2 : \n        return app(o(a0, a1), /* array */[\n                    a2,\n                    a3,\n                    a4,\n                    a5,\n                    a6\n                  ]);\n    case 3 : \n        return app(o(a0, a1, a2), /* array */[\n                    a3,\n                    a4,\n                    a5,\n                    a6\n                  ]);\n    case 4 : \n        return app(o(a0, a1, a2, a3), /* array */[\n                    a4,\n                    a5,\n                    a6\n                  ]);\n    case 5 : \n        return app(o(a0, a1, a2, a3, a4), /* array */[\n                    a5,\n                    a6\n                  ]);\n    case 6 : \n        return app(o(a0, a1, a2, a3, a4, a5), /* array */[a6]);\n    case 7 : \n        return o(a0, a1, a2, a3, a4, a5, a6);\n    default:\n      return app(o, /* array */[\n                  a0,\n                  a1,\n                  a2,\n                  a3,\n                  a4,\n                  a5,\n                  a6\n                ]);\n  }\n}\n\nfunction _7(o, a0, a1, a2, a3, a4, a5, a6) {\n  var arity = o.length;\n  if (arity === 7) {\n    return o(a0, a1, a2, a3, a4, a5, a6);\n  } else {\n    return curry_7(o, a0, a1, a2, a3, a4, a5, a6, arity);\n  }\n}\n\nfunction __7(o) {\n  var arity = o.length;\n  if (arity === 7) {\n    return o;\n  } else {\n    return (function (a0, a1, a2, a3, a4, a5, a6) {\n        return _7(o, a0, a1, a2, a3, a4, a5, a6);\n      });\n  }\n}\n\nfunction curry_8(o, a0, a1, a2, a3, a4, a5, a6, a7, arity) {\n  switch (arity) {\n    case 1 : \n        return app(o(a0), /* array */[\n                    a1,\n                    a2,\n                    a3,\n                    a4,\n                    a5,\n                    a6,\n                    a7\n                  ]);\n    case 2 : \n        return app(o(a0, a1), /* array */[\n                    a2,\n                    a3,\n                    a4,\n                    a5,\n                    a6,\n                    a7\n                  ]);\n    case 3 : \n        return app(o(a0, a1, a2), /* array */[\n                    a3,\n                    a4,\n                    a5,\n                    a6,\n                    a7\n                  ]);\n    case 4 : \n        return app(o(a0, a1, a2, a3), /* array */[\n                    a4,\n                    a5,\n                    a6,\n                    a7\n                  ]);\n    case 5 : \n        return app(o(a0, a1, a2, a3, a4), /* array */[\n                    a5,\n                    a6,\n                    a7\n                  ]);\n    case 6 : \n        return app(o(a0, a1, a2, a3, a4, a5), /* array */[\n                    a6,\n                    a7\n                  ]);\n    case 7 : \n        return app(o(a0, a1, a2, a3, a4, a5, a6), /* array */[a7]);\n    default:\n      return app(o, /* array */[\n                  a0,\n                  a1,\n                  a2,\n                  a3,\n                  a4,\n                  a5,\n                  a6,\n                  a7\n                ]);\n  }\n}\n\nfunction _8(o, a0, a1, a2, a3, a4, a5, a6, a7) {\n  var arity = o.length;\n  if (arity === 8) {\n    return o(a0, a1, a2, a3, a4, a5, a6, a7);\n  } else {\n    return curry_8(o, a0, a1, a2, a3, a4, a5, a6, a7, arity);\n  }\n}\n\nfunction __8(o) {\n  var arity = o.length;\n  if (arity === 8) {\n    return o;\n  } else {\n    return (function (a0, a1, a2, a3, a4, a5, a6, a7) {\n        return _8(o, a0, a1, a2, a3, a4, a5, a6, a7);\n      });\n  }\n}\n\nexports.app = app;\nexports.curry_1 = curry_1;\nexports._1 = _1;\nexports.__1 = __1;\nexports.curry_2 = curry_2;\nexports._2 = _2;\nexports.__2 = __2;\nexports.curry_3 = curry_3;\nexports._3 = _3;\nexports.__3 = __3;\nexports.curry_4 = curry_4;\nexports._4 = _4;\nexports.__4 = __4;\nexports.curry_5 = curry_5;\nexports._5 = _5;\nexports.__5 = __5;\nexports.curry_6 = curry_6;\nexports._6 = _6;\nexports.__6 = __6;\nexports.curry_7 = curry_7;\nexports._7 = _7;\nexports.__7 = __7;\nexports.curry_8 = curry_8;\nexports._8 = _8;\nexports.__8 = __8;\n/* No side effect */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/curry.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/js_int.js":
/*!***************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/js_int.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n\nfunction equal(x, y) {\n  return x === y;\n}\n\nvar max = 2147483647;\n\nvar min = -2147483648;\n\nexports.equal = equal;\nexports.max = max;\nexports.min = min;\n/* No side effect */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/js_int.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/js_math.js":
/*!****************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/js_math.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Js_int = __webpack_require__(/*! ./js_int.js */ \"./node_modules/bs-platform/lib/js/js_int.js\");\n\nfunction unsafe_ceil(prim) {\n  return Math.ceil(prim);\n}\n\nfunction ceil_int(f) {\n  if (f > Js_int.max) {\n    return Js_int.max;\n  } else if (f < Js_int.min) {\n    return Js_int.min;\n  } else {\n    return Math.ceil(f);\n  }\n}\n\nfunction unsafe_floor(prim) {\n  return Math.floor(prim);\n}\n\nfunction floor_int(f) {\n  if (f > Js_int.max) {\n    return Js_int.max;\n  } else if (f < Js_int.min) {\n    return Js_int.min;\n  } else {\n    return Math.floor(f);\n  }\n}\n\nfunction random_int(min, max) {\n  return floor_int(Math.random() * (max - min | 0)) + min | 0;\n}\n\nvar ceil = ceil_int;\n\nvar floor = floor_int;\n\nexports.unsafe_ceil = unsafe_ceil;\nexports.ceil_int = ceil_int;\nexports.ceil = ceil;\nexports.unsafe_floor = unsafe_floor;\nexports.floor_int = floor_int;\nexports.floor = floor;\nexports.random_int = random_int;\n/* No side effect */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/js_math.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/js_option.js":
/*!******************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/js_option.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Caml_option = __webpack_require__(/*! ./caml_option.js */ \"./node_modules/bs-platform/lib/js/caml_option.js\");\n\nfunction some(x) {\n  return Caml_option.some(x);\n}\n\nfunction isSome(param) {\n  return param !== undefined;\n}\n\nfunction isSomeValue(eq, v, x) {\n  if (x !== undefined) {\n    return eq(v, Caml_option.valFromOption(x));\n  } else {\n    return false;\n  }\n}\n\nfunction isNone(param) {\n  return param === undefined;\n}\n\nfunction getExn(x) {\n  if (x !== undefined) {\n    return Caml_option.valFromOption(x);\n  } else {\n    throw new Error(\"getExn\");\n  }\n}\n\nfunction equal(eq, a, b) {\n  if (a !== undefined) {\n    if (b !== undefined) {\n      return eq(Caml_option.valFromOption(a), Caml_option.valFromOption(b));\n    } else {\n      return false;\n    }\n  } else {\n    return b === undefined;\n  }\n}\n\nfunction andThen(f, x) {\n  if (x !== undefined) {\n    return f(Caml_option.valFromOption(x));\n  }\n  \n}\n\nfunction map(f, x) {\n  if (x !== undefined) {\n    return Caml_option.some(f(Caml_option.valFromOption(x)));\n  }\n  \n}\n\nfunction getWithDefault(a, x) {\n  if (x !== undefined) {\n    return Caml_option.valFromOption(x);\n  } else {\n    return a;\n  }\n}\n\nfunction filter(f, x) {\n  if (x !== undefined) {\n    var x$1 = Caml_option.valFromOption(x);\n    if (f(x$1)) {\n      return Caml_option.some(x$1);\n    } else {\n      return undefined;\n    }\n  }\n  \n}\n\nfunction firstSome(a, b) {\n  if (a !== undefined) {\n    return a;\n  } else if (b !== undefined) {\n    return b;\n  } else {\n    return undefined;\n  }\n}\n\nvar $$default = getWithDefault;\n\nexports.some = some;\nexports.isSome = isSome;\nexports.isSomeValue = isSomeValue;\nexports.isNone = isNone;\nexports.getExn = getExn;\nexports.equal = equal;\nexports.andThen = andThen;\nexports.map = map;\nexports.getWithDefault = getWithDefault;\nexports.$$default = $$default;\nexports.default = $$default;\nexports.__esModule = true;\nexports.filter = filter;\nexports.firstSome = firstSome;\n/* No side effect */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/js_option.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/list.js":
/*!*************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/list.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Curry = __webpack_require__(/*! ./curry.js */ \"./node_modules/bs-platform/lib/js/curry.js\");\nvar Caml_obj = __webpack_require__(/*! ./caml_obj.js */ \"./node_modules/bs-platform/lib/js/caml_obj.js\");\nvar Pervasives = __webpack_require__(/*! ./pervasives.js */ \"./node_modules/bs-platform/lib/js/pervasives.js\");\nvar Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions.js */ \"./node_modules/bs-platform/lib/js/caml_builtin_exceptions.js\");\n\nfunction length(l) {\n  var _len = 0;\n  var _param = l;\n  while(true) {\n    var param = _param;\n    var len = _len;\n    if (param) {\n      _param = param[1];\n      _len = len + 1 | 0;\n      continue ;\n    } else {\n      return len;\n    }\n  };\n}\n\nfunction hd(param) {\n  if (param) {\n    return param[0];\n  } else {\n    throw [\n          Caml_builtin_exceptions.failure,\n          \"hd\"\n        ];\n  }\n}\n\nfunction tl(param) {\n  if (param) {\n    return param[1];\n  } else {\n    throw [\n          Caml_builtin_exceptions.failure,\n          \"tl\"\n        ];\n  }\n}\n\nfunction nth(l, n) {\n  if (n < 0) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"List.nth\"\n        ];\n  } else {\n    var _l = l;\n    var _n = n;\n    while(true) {\n      var n$1 = _n;\n      var l$1 = _l;\n      if (l$1) {\n        if (n$1 === 0) {\n          return l$1[0];\n        } else {\n          _n = n$1 - 1 | 0;\n          _l = l$1[1];\n          continue ;\n        }\n      } else {\n        throw [\n              Caml_builtin_exceptions.failure,\n              \"nth\"\n            ];\n      }\n    };\n  }\n}\n\nfunction rev_append(_l1, _l2) {\n  while(true) {\n    var l2 = _l2;\n    var l1 = _l1;\n    if (l1) {\n      _l2 = /* :: */[\n        l1[0],\n        l2\n      ];\n      _l1 = l1[1];\n      continue ;\n    } else {\n      return l2;\n    }\n  };\n}\n\nfunction rev(l) {\n  return rev_append(l, /* [] */0);\n}\n\nfunction flatten(param) {\n  if (param) {\n    return Pervasives.$at(param[0], flatten(param[1]));\n  } else {\n    return /* [] */0;\n  }\n}\n\nfunction map(f, param) {\n  if (param) {\n    var r = Curry._1(f, param[0]);\n    return /* :: */[\n            r,\n            map(f, param[1])\n          ];\n  } else {\n    return /* [] */0;\n  }\n}\n\nfunction mapi(i, f, param) {\n  if (param) {\n    var r = Curry._2(f, i, param[0]);\n    return /* :: */[\n            r,\n            mapi(i + 1 | 0, f, param[1])\n          ];\n  } else {\n    return /* [] */0;\n  }\n}\n\nfunction mapi$1(f, l) {\n  return mapi(0, f, l);\n}\n\nfunction rev_map(f, l) {\n  var _accu = /* [] */0;\n  var _param = l;\n  while(true) {\n    var param = _param;\n    var accu = _accu;\n    if (param) {\n      _param = param[1];\n      _accu = /* :: */[\n        Curry._1(f, param[0]),\n        accu\n      ];\n      continue ;\n    } else {\n      return accu;\n    }\n  };\n}\n\nfunction iter(f, _param) {\n  while(true) {\n    var param = _param;\n    if (param) {\n      Curry._1(f, param[0]);\n      _param = param[1];\n      continue ;\n    } else {\n      return /* () */0;\n    }\n  };\n}\n\nfunction iteri(f, l) {\n  var _i = 0;\n  var f$1 = f;\n  var _param = l;\n  while(true) {\n    var param = _param;\n    var i = _i;\n    if (param) {\n      Curry._2(f$1, i, param[0]);\n      _param = param[1];\n      _i = i + 1 | 0;\n      continue ;\n    } else {\n      return /* () */0;\n    }\n  };\n}\n\nfunction fold_left(f, _accu, _l) {\n  while(true) {\n    var l = _l;\n    var accu = _accu;\n    if (l) {\n      _l = l[1];\n      _accu = Curry._2(f, accu, l[0]);\n      continue ;\n    } else {\n      return accu;\n    }\n  };\n}\n\nfunction fold_right(f, l, accu) {\n  if (l) {\n    return Curry._2(f, l[0], fold_right(f, l[1], accu));\n  } else {\n    return accu;\n  }\n}\n\nfunction map2(f, l1, l2) {\n  if (l1) {\n    if (l2) {\n      var r = Curry._2(f, l1[0], l2[0]);\n      return /* :: */[\n              r,\n              map2(f, l1[1], l2[1])\n            ];\n    } else {\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"List.map2\"\n          ];\n    }\n  } else if (l2) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"List.map2\"\n        ];\n  } else {\n    return /* [] */0;\n  }\n}\n\nfunction rev_map2(f, l1, l2) {\n  var _accu = /* [] */0;\n  var _l1 = l1;\n  var _l2 = l2;\n  while(true) {\n    var l2$1 = _l2;\n    var l1$1 = _l1;\n    var accu = _accu;\n    if (l1$1) {\n      if (l2$1) {\n        _l2 = l2$1[1];\n        _l1 = l1$1[1];\n        _accu = /* :: */[\n          Curry._2(f, l1$1[0], l2$1[0]),\n          accu\n        ];\n        continue ;\n      } else {\n        throw [\n              Caml_builtin_exceptions.invalid_argument,\n              \"List.rev_map2\"\n            ];\n      }\n    } else if (l2$1) {\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"List.rev_map2\"\n          ];\n    } else {\n      return accu;\n    }\n  };\n}\n\nfunction iter2(f, _l1, _l2) {\n  while(true) {\n    var l2 = _l2;\n    var l1 = _l1;\n    if (l1) {\n      if (l2) {\n        Curry._2(f, l1[0], l2[0]);\n        _l2 = l2[1];\n        _l1 = l1[1];\n        continue ;\n      } else {\n        throw [\n              Caml_builtin_exceptions.invalid_argument,\n              \"List.iter2\"\n            ];\n      }\n    } else if (l2) {\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"List.iter2\"\n          ];\n    } else {\n      return /* () */0;\n    }\n  };\n}\n\nfunction fold_left2(f, _accu, _l1, _l2) {\n  while(true) {\n    var l2 = _l2;\n    var l1 = _l1;\n    var accu = _accu;\n    if (l1) {\n      if (l2) {\n        _l2 = l2[1];\n        _l1 = l1[1];\n        _accu = Curry._3(f, accu, l1[0], l2[0]);\n        continue ;\n      } else {\n        throw [\n              Caml_builtin_exceptions.invalid_argument,\n              \"List.fold_left2\"\n            ];\n      }\n    } else if (l2) {\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"List.fold_left2\"\n          ];\n    } else {\n      return accu;\n    }\n  };\n}\n\nfunction fold_right2(f, l1, l2, accu) {\n  if (l1) {\n    if (l2) {\n      return Curry._3(f, l1[0], l2[0], fold_right2(f, l1[1], l2[1], accu));\n    } else {\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"List.fold_right2\"\n          ];\n    }\n  } else if (l2) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"List.fold_right2\"\n        ];\n  } else {\n    return accu;\n  }\n}\n\nfunction for_all(p, _param) {\n  while(true) {\n    var param = _param;\n    if (param) {\n      if (Curry._1(p, param[0])) {\n        _param = param[1];\n        continue ;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  };\n}\n\nfunction exists(p, _param) {\n  while(true) {\n    var param = _param;\n    if (param) {\n      if (Curry._1(p, param[0])) {\n        return true;\n      } else {\n        _param = param[1];\n        continue ;\n      }\n    } else {\n      return false;\n    }\n  };\n}\n\nfunction for_all2(p, _l1, _l2) {\n  while(true) {\n    var l2 = _l2;\n    var l1 = _l1;\n    if (l1) {\n      if (l2) {\n        if (Curry._2(p, l1[0], l2[0])) {\n          _l2 = l2[1];\n          _l1 = l1[1];\n          continue ;\n        } else {\n          return false;\n        }\n      } else {\n        throw [\n              Caml_builtin_exceptions.invalid_argument,\n              \"List.for_all2\"\n            ];\n      }\n    } else if (l2) {\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"List.for_all2\"\n          ];\n    } else {\n      return true;\n    }\n  };\n}\n\nfunction exists2(p, _l1, _l2) {\n  while(true) {\n    var l2 = _l2;\n    var l1 = _l1;\n    if (l1) {\n      if (l2) {\n        if (Curry._2(p, l1[0], l2[0])) {\n          return true;\n        } else {\n          _l2 = l2[1];\n          _l1 = l1[1];\n          continue ;\n        }\n      } else {\n        throw [\n              Caml_builtin_exceptions.invalid_argument,\n              \"List.exists2\"\n            ];\n      }\n    } else if (l2) {\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"List.exists2\"\n          ];\n    } else {\n      return false;\n    }\n  };\n}\n\nfunction mem(x, _param) {\n  while(true) {\n    var param = _param;\n    if (param) {\n      if (Caml_obj.caml_equal(param[0], x)) {\n        return true;\n      } else {\n        _param = param[1];\n        continue ;\n      }\n    } else {\n      return false;\n    }\n  };\n}\n\nfunction memq(x, _param) {\n  while(true) {\n    var param = _param;\n    if (param) {\n      if (param[0] === x) {\n        return true;\n      } else {\n        _param = param[1];\n        continue ;\n      }\n    } else {\n      return false;\n    }\n  };\n}\n\nfunction assoc(x, _param) {\n  while(true) {\n    var param = _param;\n    if (param) {\n      var match = param[0];\n      if (Caml_obj.caml_equal(match[0], x)) {\n        return match[1];\n      } else {\n        _param = param[1];\n        continue ;\n      }\n    } else {\n      throw Caml_builtin_exceptions.not_found;\n    }\n  };\n}\n\nfunction assq(x, _param) {\n  while(true) {\n    var param = _param;\n    if (param) {\n      var match = param[0];\n      if (match[0] === x) {\n        return match[1];\n      } else {\n        _param = param[1];\n        continue ;\n      }\n    } else {\n      throw Caml_builtin_exceptions.not_found;\n    }\n  };\n}\n\nfunction mem_assoc(x, _param) {\n  while(true) {\n    var param = _param;\n    if (param) {\n      if (Caml_obj.caml_equal(param[0][0], x)) {\n        return true;\n      } else {\n        _param = param[1];\n        continue ;\n      }\n    } else {\n      return false;\n    }\n  };\n}\n\nfunction mem_assq(x, _param) {\n  while(true) {\n    var param = _param;\n    if (param) {\n      if (param[0][0] === x) {\n        return true;\n      } else {\n        _param = param[1];\n        continue ;\n      }\n    } else {\n      return false;\n    }\n  };\n}\n\nfunction remove_assoc(x, param) {\n  if (param) {\n    var l = param[1];\n    var pair = param[0];\n    if (Caml_obj.caml_equal(pair[0], x)) {\n      return l;\n    } else {\n      return /* :: */[\n              pair,\n              remove_assoc(x, l)\n            ];\n    }\n  } else {\n    return /* [] */0;\n  }\n}\n\nfunction remove_assq(x, param) {\n  if (param) {\n    var l = param[1];\n    var pair = param[0];\n    if (pair[0] === x) {\n      return l;\n    } else {\n      return /* :: */[\n              pair,\n              remove_assq(x, l)\n            ];\n    }\n  } else {\n    return /* [] */0;\n  }\n}\n\nfunction find(p, _param) {\n  while(true) {\n    var param = _param;\n    if (param) {\n      var x = param[0];\n      if (Curry._1(p, x)) {\n        return x;\n      } else {\n        _param = param[1];\n        continue ;\n      }\n    } else {\n      throw Caml_builtin_exceptions.not_found;\n    }\n  };\n}\n\nfunction find_all(p) {\n  return (function (param) {\n      var _accu = /* [] */0;\n      var _param = param;\n      while(true) {\n        var param$1 = _param;\n        var accu = _accu;\n        if (param$1) {\n          var l = param$1[1];\n          var x = param$1[0];\n          if (Curry._1(p, x)) {\n            _param = l;\n            _accu = /* :: */[\n              x,\n              accu\n            ];\n            continue ;\n          } else {\n            _param = l;\n            continue ;\n          }\n        } else {\n          return rev_append(accu, /* [] */0);\n        }\n      };\n    });\n}\n\nfunction partition(p, l) {\n  var _yes = /* [] */0;\n  var _no = /* [] */0;\n  var _param = l;\n  while(true) {\n    var param = _param;\n    var no = _no;\n    var yes = _yes;\n    if (param) {\n      var l$1 = param[1];\n      var x = param[0];\n      if (Curry._1(p, x)) {\n        _param = l$1;\n        _yes = /* :: */[\n          x,\n          yes\n        ];\n        continue ;\n      } else {\n        _param = l$1;\n        _no = /* :: */[\n          x,\n          no\n        ];\n        continue ;\n      }\n    } else {\n      return /* tuple */[\n              rev_append(yes, /* [] */0),\n              rev_append(no, /* [] */0)\n            ];\n    }\n  };\n}\n\nfunction split(param) {\n  if (param) {\n    var match = param[0];\n    var match$1 = split(param[1]);\n    return /* tuple */[\n            /* :: */[\n              match[0],\n              match$1[0]\n            ],\n            /* :: */[\n              match[1],\n              match$1[1]\n            ]\n          ];\n  } else {\n    return /* tuple */[\n            /* [] */0,\n            /* [] */0\n          ];\n  }\n}\n\nfunction combine(l1, l2) {\n  if (l1) {\n    if (l2) {\n      return /* :: */[\n              /* tuple */[\n                l1[0],\n                l2[0]\n              ],\n              combine(l1[1], l2[1])\n            ];\n    } else {\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"List.combine\"\n          ];\n    }\n  } else if (l2) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"List.combine\"\n        ];\n  } else {\n    return /* [] */0;\n  }\n}\n\nfunction merge(cmp, l1, l2) {\n  if (l1) {\n    if (l2) {\n      var h2 = l2[0];\n      var h1 = l1[0];\n      if (Curry._2(cmp, h1, h2) <= 0) {\n        return /* :: */[\n                h1,\n                merge(cmp, l1[1], l2)\n              ];\n      } else {\n        return /* :: */[\n                h2,\n                merge(cmp, l1, l2[1])\n              ];\n      }\n    } else {\n      return l1;\n    }\n  } else {\n    return l2;\n  }\n}\n\nfunction chop(_k, _l) {\n  while(true) {\n    var l = _l;\n    var k = _k;\n    if (k === 0) {\n      return l;\n    } else if (l) {\n      _l = l[1];\n      _k = k - 1 | 0;\n      continue ;\n    } else {\n      throw [\n            Caml_builtin_exceptions.assert_failure,\n            /* tuple */[\n              \"list.ml\",\n              223,\n              11\n            ]\n          ];\n    }\n  };\n}\n\nfunction stable_sort(cmp, l) {\n  var sort = function (n, l) {\n    var exit = 0;\n    if (n !== 2) {\n      if (n !== 3 || !l) {\n        exit = 1;\n      } else {\n        var match = l[1];\n        if (match) {\n          var match$1 = match[1];\n          if (match$1) {\n            var x3 = match$1[0];\n            var x2 = match[0];\n            var x1 = l[0];\n            if (Curry._2(cmp, x1, x2) <= 0) {\n              if (Curry._2(cmp, x2, x3) <= 0) {\n                return /* :: */[\n                        x1,\n                        /* :: */[\n                          x2,\n                          /* :: */[\n                            x3,\n                            /* [] */0\n                          ]\n                        ]\n                      ];\n              } else if (Curry._2(cmp, x1, x3) <= 0) {\n                return /* :: */[\n                        x1,\n                        /* :: */[\n                          x3,\n                          /* :: */[\n                            x2,\n                            /* [] */0\n                          ]\n                        ]\n                      ];\n              } else {\n                return /* :: */[\n                        x3,\n                        /* :: */[\n                          x1,\n                          /* :: */[\n                            x2,\n                            /* [] */0\n                          ]\n                        ]\n                      ];\n              }\n            } else if (Curry._2(cmp, x1, x3) <= 0) {\n              return /* :: */[\n                      x2,\n                      /* :: */[\n                        x1,\n                        /* :: */[\n                          x3,\n                          /* [] */0\n                        ]\n                      ]\n                    ];\n            } else if (Curry._2(cmp, x2, x3) <= 0) {\n              return /* :: */[\n                      x2,\n                      /* :: */[\n                        x3,\n                        /* :: */[\n                          x1,\n                          /* [] */0\n                        ]\n                      ]\n                    ];\n            } else {\n              return /* :: */[\n                      x3,\n                      /* :: */[\n                        x2,\n                        /* :: */[\n                          x1,\n                          /* [] */0\n                        ]\n                      ]\n                    ];\n            }\n          } else {\n            exit = 1;\n          }\n        } else {\n          exit = 1;\n        }\n      }\n    } else if (l) {\n      var match$2 = l[1];\n      if (match$2) {\n        var x2$1 = match$2[0];\n        var x1$1 = l[0];\n        if (Curry._2(cmp, x1$1, x2$1) <= 0) {\n          return /* :: */[\n                  x1$1,\n                  /* :: */[\n                    x2$1,\n                    /* [] */0\n                  ]\n                ];\n        } else {\n          return /* :: */[\n                  x2$1,\n                  /* :: */[\n                    x1$1,\n                    /* [] */0\n                  ]\n                ];\n        }\n      } else {\n        exit = 1;\n      }\n    } else {\n      exit = 1;\n    }\n    if (exit === 1) {\n      var n1 = (n >> 1);\n      var n2 = n - n1 | 0;\n      var l2 = chop(n1, l);\n      var s1 = rev_sort(n1, l);\n      var s2 = rev_sort(n2, l2);\n      var _l1 = s1;\n      var _l2 = s2;\n      var _accu = /* [] */0;\n      while(true) {\n        var accu = _accu;\n        var l2$1 = _l2;\n        var l1 = _l1;\n        if (l1) {\n          if (l2$1) {\n            var h2 = l2$1[0];\n            var h1 = l1[0];\n            if (Curry._2(cmp, h1, h2) > 0) {\n              _accu = /* :: */[\n                h1,\n                accu\n              ];\n              _l1 = l1[1];\n              continue ;\n            } else {\n              _accu = /* :: */[\n                h2,\n                accu\n              ];\n              _l2 = l2$1[1];\n              continue ;\n            }\n          } else {\n            return rev_append(l1, accu);\n          }\n        } else {\n          return rev_append(l2$1, accu);\n        }\n      };\n    }\n    \n  };\n  var rev_sort = function (n, l) {\n    var exit = 0;\n    if (n !== 2) {\n      if (n !== 3 || !l) {\n        exit = 1;\n      } else {\n        var match = l[1];\n        if (match) {\n          var match$1 = match[1];\n          if (match$1) {\n            var x3 = match$1[0];\n            var x2 = match[0];\n            var x1 = l[0];\n            if (Curry._2(cmp, x1, x2) > 0) {\n              if (Curry._2(cmp, x2, x3) > 0) {\n                return /* :: */[\n                        x1,\n                        /* :: */[\n                          x2,\n                          /* :: */[\n                            x3,\n                            /* [] */0\n                          ]\n                        ]\n                      ];\n              } else if (Curry._2(cmp, x1, x3) > 0) {\n                return /* :: */[\n                        x1,\n                        /* :: */[\n                          x3,\n                          /* :: */[\n                            x2,\n                            /* [] */0\n                          ]\n                        ]\n                      ];\n              } else {\n                return /* :: */[\n                        x3,\n                        /* :: */[\n                          x1,\n                          /* :: */[\n                            x2,\n                            /* [] */0\n                          ]\n                        ]\n                      ];\n              }\n            } else if (Curry._2(cmp, x1, x3) > 0) {\n              return /* :: */[\n                      x2,\n                      /* :: */[\n                        x1,\n                        /* :: */[\n                          x3,\n                          /* [] */0\n                        ]\n                      ]\n                    ];\n            } else if (Curry._2(cmp, x2, x3) > 0) {\n              return /* :: */[\n                      x2,\n                      /* :: */[\n                        x3,\n                        /* :: */[\n                          x1,\n                          /* [] */0\n                        ]\n                      ]\n                    ];\n            } else {\n              return /* :: */[\n                      x3,\n                      /* :: */[\n                        x2,\n                        /* :: */[\n                          x1,\n                          /* [] */0\n                        ]\n                      ]\n                    ];\n            }\n          } else {\n            exit = 1;\n          }\n        } else {\n          exit = 1;\n        }\n      }\n    } else if (l) {\n      var match$2 = l[1];\n      if (match$2) {\n        var x2$1 = match$2[0];\n        var x1$1 = l[0];\n        if (Curry._2(cmp, x1$1, x2$1) > 0) {\n          return /* :: */[\n                  x1$1,\n                  /* :: */[\n                    x2$1,\n                    /* [] */0\n                  ]\n                ];\n        } else {\n          return /* :: */[\n                  x2$1,\n                  /* :: */[\n                    x1$1,\n                    /* [] */0\n                  ]\n                ];\n        }\n      } else {\n        exit = 1;\n      }\n    } else {\n      exit = 1;\n    }\n    if (exit === 1) {\n      var n1 = (n >> 1);\n      var n2 = n - n1 | 0;\n      var l2 = chop(n1, l);\n      var s1 = sort(n1, l);\n      var s2 = sort(n2, l2);\n      var _l1 = s1;\n      var _l2 = s2;\n      var _accu = /* [] */0;\n      while(true) {\n        var accu = _accu;\n        var l2$1 = _l2;\n        var l1 = _l1;\n        if (l1) {\n          if (l2$1) {\n            var h2 = l2$1[0];\n            var h1 = l1[0];\n            if (Curry._2(cmp, h1, h2) <= 0) {\n              _accu = /* :: */[\n                h1,\n                accu\n              ];\n              _l1 = l1[1];\n              continue ;\n            } else {\n              _accu = /* :: */[\n                h2,\n                accu\n              ];\n              _l2 = l2$1[1];\n              continue ;\n            }\n          } else {\n            return rev_append(l1, accu);\n          }\n        } else {\n          return rev_append(l2$1, accu);\n        }\n      };\n    }\n    \n  };\n  var len = length(l);\n  if (len < 2) {\n    return l;\n  } else {\n    return sort(len, l);\n  }\n}\n\nfunction sort_uniq(cmp, l) {\n  var sort = function (n, l) {\n    var exit = 0;\n    if (n !== 2) {\n      if (n !== 3 || !l) {\n        exit = 1;\n      } else {\n        var match = l[1];\n        if (match) {\n          var match$1 = match[1];\n          if (match$1) {\n            var x3 = match$1[0];\n            var x2 = match[0];\n            var x1 = l[0];\n            var c = Curry._2(cmp, x1, x2);\n            if (c === 0) {\n              var c$1 = Curry._2(cmp, x2, x3);\n              if (c$1 === 0) {\n                return /* :: */[\n                        x2,\n                        /* [] */0\n                      ];\n              } else if (c$1 < 0) {\n                return /* :: */[\n                        x2,\n                        /* :: */[\n                          x3,\n                          /* [] */0\n                        ]\n                      ];\n              } else {\n                return /* :: */[\n                        x3,\n                        /* :: */[\n                          x2,\n                          /* [] */0\n                        ]\n                      ];\n              }\n            } else if (c < 0) {\n              var c$2 = Curry._2(cmp, x2, x3);\n              if (c$2 === 0) {\n                return /* :: */[\n                        x1,\n                        /* :: */[\n                          x2,\n                          /* [] */0\n                        ]\n                      ];\n              } else if (c$2 < 0) {\n                return /* :: */[\n                        x1,\n                        /* :: */[\n                          x2,\n                          /* :: */[\n                            x3,\n                            /* [] */0\n                          ]\n                        ]\n                      ];\n              } else {\n                var c$3 = Curry._2(cmp, x1, x3);\n                if (c$3 === 0) {\n                  return /* :: */[\n                          x1,\n                          /* :: */[\n                            x2,\n                            /* [] */0\n                          ]\n                        ];\n                } else if (c$3 < 0) {\n                  return /* :: */[\n                          x1,\n                          /* :: */[\n                            x3,\n                            /* :: */[\n                              x2,\n                              /* [] */0\n                            ]\n                          ]\n                        ];\n                } else {\n                  return /* :: */[\n                          x3,\n                          /* :: */[\n                            x1,\n                            /* :: */[\n                              x2,\n                              /* [] */0\n                            ]\n                          ]\n                        ];\n                }\n              }\n            } else {\n              var c$4 = Curry._2(cmp, x1, x3);\n              if (c$4 === 0) {\n                return /* :: */[\n                        x2,\n                        /* :: */[\n                          x1,\n                          /* [] */0\n                        ]\n                      ];\n              } else if (c$4 < 0) {\n                return /* :: */[\n                        x2,\n                        /* :: */[\n                          x1,\n                          /* :: */[\n                            x3,\n                            /* [] */0\n                          ]\n                        ]\n                      ];\n              } else {\n                var c$5 = Curry._2(cmp, x2, x3);\n                if (c$5 === 0) {\n                  return /* :: */[\n                          x2,\n                          /* :: */[\n                            x1,\n                            /* [] */0\n                          ]\n                        ];\n                } else if (c$5 < 0) {\n                  return /* :: */[\n                          x2,\n                          /* :: */[\n                            x3,\n                            /* :: */[\n                              x1,\n                              /* [] */0\n                            ]\n                          ]\n                        ];\n                } else {\n                  return /* :: */[\n                          x3,\n                          /* :: */[\n                            x2,\n                            /* :: */[\n                              x1,\n                              /* [] */0\n                            ]\n                          ]\n                        ];\n                }\n              }\n            }\n          } else {\n            exit = 1;\n          }\n        } else {\n          exit = 1;\n        }\n      }\n    } else if (l) {\n      var match$2 = l[1];\n      if (match$2) {\n        var x2$1 = match$2[0];\n        var x1$1 = l[0];\n        var c$6 = Curry._2(cmp, x1$1, x2$1);\n        if (c$6 === 0) {\n          return /* :: */[\n                  x1$1,\n                  /* [] */0\n                ];\n        } else if (c$6 < 0) {\n          return /* :: */[\n                  x1$1,\n                  /* :: */[\n                    x2$1,\n                    /* [] */0\n                  ]\n                ];\n        } else {\n          return /* :: */[\n                  x2$1,\n                  /* :: */[\n                    x1$1,\n                    /* [] */0\n                  ]\n                ];\n        }\n      } else {\n        exit = 1;\n      }\n    } else {\n      exit = 1;\n    }\n    if (exit === 1) {\n      var n1 = (n >> 1);\n      var n2 = n - n1 | 0;\n      var l2 = chop(n1, l);\n      var s1 = rev_sort(n1, l);\n      var s2 = rev_sort(n2, l2);\n      var _l1 = s1;\n      var _l2 = s2;\n      var _accu = /* [] */0;\n      while(true) {\n        var accu = _accu;\n        var l2$1 = _l2;\n        var l1 = _l1;\n        if (l1) {\n          if (l2$1) {\n            var t2 = l2$1[1];\n            var h2 = l2$1[0];\n            var t1 = l1[1];\n            var h1 = l1[0];\n            var c$7 = Curry._2(cmp, h1, h2);\n            if (c$7 === 0) {\n              _accu = /* :: */[\n                h1,\n                accu\n              ];\n              _l2 = t2;\n              _l1 = t1;\n              continue ;\n            } else if (c$7 > 0) {\n              _accu = /* :: */[\n                h1,\n                accu\n              ];\n              _l1 = t1;\n              continue ;\n            } else {\n              _accu = /* :: */[\n                h2,\n                accu\n              ];\n              _l2 = t2;\n              continue ;\n            }\n          } else {\n            return rev_append(l1, accu);\n          }\n        } else {\n          return rev_append(l2$1, accu);\n        }\n      };\n    }\n    \n  };\n  var rev_sort = function (n, l) {\n    var exit = 0;\n    if (n !== 2) {\n      if (n !== 3 || !l) {\n        exit = 1;\n      } else {\n        var match = l[1];\n        if (match) {\n          var match$1 = match[1];\n          if (match$1) {\n            var x3 = match$1[0];\n            var x2 = match[0];\n            var x1 = l[0];\n            var c = Curry._2(cmp, x1, x2);\n            if (c === 0) {\n              var c$1 = Curry._2(cmp, x2, x3);\n              if (c$1 === 0) {\n                return /* :: */[\n                        x2,\n                        /* [] */0\n                      ];\n              } else if (c$1 > 0) {\n                return /* :: */[\n                        x2,\n                        /* :: */[\n                          x3,\n                          /* [] */0\n                        ]\n                      ];\n              } else {\n                return /* :: */[\n                        x3,\n                        /* :: */[\n                          x2,\n                          /* [] */0\n                        ]\n                      ];\n              }\n            } else if (c > 0) {\n              var c$2 = Curry._2(cmp, x2, x3);\n              if (c$2 === 0) {\n                return /* :: */[\n                        x1,\n                        /* :: */[\n                          x2,\n                          /* [] */0\n                        ]\n                      ];\n              } else if (c$2 > 0) {\n                return /* :: */[\n                        x1,\n                        /* :: */[\n                          x2,\n                          /* :: */[\n                            x3,\n                            /* [] */0\n                          ]\n                        ]\n                      ];\n              } else {\n                var c$3 = Curry._2(cmp, x1, x3);\n                if (c$3 === 0) {\n                  return /* :: */[\n                          x1,\n                          /* :: */[\n                            x2,\n                            /* [] */0\n                          ]\n                        ];\n                } else if (c$3 > 0) {\n                  return /* :: */[\n                          x1,\n                          /* :: */[\n                            x3,\n                            /* :: */[\n                              x2,\n                              /* [] */0\n                            ]\n                          ]\n                        ];\n                } else {\n                  return /* :: */[\n                          x3,\n                          /* :: */[\n                            x1,\n                            /* :: */[\n                              x2,\n                              /* [] */0\n                            ]\n                          ]\n                        ];\n                }\n              }\n            } else {\n              var c$4 = Curry._2(cmp, x1, x3);\n              if (c$4 === 0) {\n                return /* :: */[\n                        x2,\n                        /* :: */[\n                          x1,\n                          /* [] */0\n                        ]\n                      ];\n              } else if (c$4 > 0) {\n                return /* :: */[\n                        x2,\n                        /* :: */[\n                          x1,\n                          /* :: */[\n                            x3,\n                            /* [] */0\n                          ]\n                        ]\n                      ];\n              } else {\n                var c$5 = Curry._2(cmp, x2, x3);\n                if (c$5 === 0) {\n                  return /* :: */[\n                          x2,\n                          /* :: */[\n                            x1,\n                            /* [] */0\n                          ]\n                        ];\n                } else if (c$5 > 0) {\n                  return /* :: */[\n                          x2,\n                          /* :: */[\n                            x3,\n                            /* :: */[\n                              x1,\n                              /* [] */0\n                            ]\n                          ]\n                        ];\n                } else {\n                  return /* :: */[\n                          x3,\n                          /* :: */[\n                            x2,\n                            /* :: */[\n                              x1,\n                              /* [] */0\n                            ]\n                          ]\n                        ];\n                }\n              }\n            }\n          } else {\n            exit = 1;\n          }\n        } else {\n          exit = 1;\n        }\n      }\n    } else if (l) {\n      var match$2 = l[1];\n      if (match$2) {\n        var x2$1 = match$2[0];\n        var x1$1 = l[0];\n        var c$6 = Curry._2(cmp, x1$1, x2$1);\n        if (c$6 === 0) {\n          return /* :: */[\n                  x1$1,\n                  /* [] */0\n                ];\n        } else if (c$6 > 0) {\n          return /* :: */[\n                  x1$1,\n                  /* :: */[\n                    x2$1,\n                    /* [] */0\n                  ]\n                ];\n        } else {\n          return /* :: */[\n                  x2$1,\n                  /* :: */[\n                    x1$1,\n                    /* [] */0\n                  ]\n                ];\n        }\n      } else {\n        exit = 1;\n      }\n    } else {\n      exit = 1;\n    }\n    if (exit === 1) {\n      var n1 = (n >> 1);\n      var n2 = n - n1 | 0;\n      var l2 = chop(n1, l);\n      var s1 = sort(n1, l);\n      var s2 = sort(n2, l2);\n      var _l1 = s1;\n      var _l2 = s2;\n      var _accu = /* [] */0;\n      while(true) {\n        var accu = _accu;\n        var l2$1 = _l2;\n        var l1 = _l1;\n        if (l1) {\n          if (l2$1) {\n            var t2 = l2$1[1];\n            var h2 = l2$1[0];\n            var t1 = l1[1];\n            var h1 = l1[0];\n            var c$7 = Curry._2(cmp, h1, h2);\n            if (c$7 === 0) {\n              _accu = /* :: */[\n                h1,\n                accu\n              ];\n              _l2 = t2;\n              _l1 = t1;\n              continue ;\n            } else if (c$7 < 0) {\n              _accu = /* :: */[\n                h1,\n                accu\n              ];\n              _l1 = t1;\n              continue ;\n            } else {\n              _accu = /* :: */[\n                h2,\n                accu\n              ];\n              _l2 = t2;\n              continue ;\n            }\n          } else {\n            return rev_append(l1, accu);\n          }\n        } else {\n          return rev_append(l2$1, accu);\n        }\n      };\n    }\n    \n  };\n  var len = length(l);\n  if (len < 2) {\n    return l;\n  } else {\n    return sort(len, l);\n  }\n}\n\nvar append = Pervasives.$at;\n\nvar concat = flatten;\n\nvar filter = find_all;\n\nvar sort = stable_sort;\n\nvar fast_sort = stable_sort;\n\nexports.length = length;\nexports.hd = hd;\nexports.tl = tl;\nexports.nth = nth;\nexports.rev = rev;\nexports.append = append;\nexports.rev_append = rev_append;\nexports.concat = concat;\nexports.flatten = flatten;\nexports.iter = iter;\nexports.iteri = iteri;\nexports.map = map;\nexports.mapi = mapi$1;\nexports.rev_map = rev_map;\nexports.fold_left = fold_left;\nexports.fold_right = fold_right;\nexports.iter2 = iter2;\nexports.map2 = map2;\nexports.rev_map2 = rev_map2;\nexports.fold_left2 = fold_left2;\nexports.fold_right2 = fold_right2;\nexports.for_all = for_all;\nexports.exists = exists;\nexports.for_all2 = for_all2;\nexports.exists2 = exists2;\nexports.mem = mem;\nexports.memq = memq;\nexports.find = find;\nexports.filter = filter;\nexports.find_all = find_all;\nexports.partition = partition;\nexports.assoc = assoc;\nexports.assq = assq;\nexports.mem_assoc = mem_assoc;\nexports.mem_assq = mem_assq;\nexports.remove_assoc = remove_assoc;\nexports.remove_assq = remove_assq;\nexports.split = split;\nexports.combine = combine;\nexports.sort = sort;\nexports.stable_sort = stable_sort;\nexports.fast_sort = fast_sort;\nexports.sort_uniq = sort_uniq;\nexports.merge = merge;\n/* No side effect */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/list.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/pervasives.js":
/*!*******************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/pervasives.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Curry = __webpack_require__(/*! ./curry.js */ \"./node_modules/bs-platform/lib/js/curry.js\");\nvar Caml_io = __webpack_require__(/*! ./caml_io.js */ \"./node_modules/bs-platform/lib/js/caml_io.js\");\nvar Caml_sys = __webpack_require__(/*! ./caml_sys.js */ \"./node_modules/bs-platform/lib/js/caml_sys.js\");\nvar Caml_bytes = __webpack_require__(/*! ./caml_bytes.js */ \"./node_modules/bs-platform/lib/js/caml_bytes.js\");\nvar Caml_format = __webpack_require__(/*! ./caml_format.js */ \"./node_modules/bs-platform/lib/js/caml_format.js\");\nvar Caml_string = __webpack_require__(/*! ./caml_string.js */ \"./node_modules/bs-platform/lib/js/caml_string.js\");\nvar Caml_exceptions = __webpack_require__(/*! ./caml_exceptions.js */ \"./node_modules/bs-platform/lib/js/caml_exceptions.js\");\nvar Caml_missing_polyfill = __webpack_require__(/*! ./caml_missing_polyfill.js */ \"./node_modules/bs-platform/lib/js/caml_missing_polyfill.js\");\nvar Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions.js */ \"./node_modules/bs-platform/lib/js/caml_builtin_exceptions.js\");\nvar CamlinternalFormatBasics = __webpack_require__(/*! ./camlinternalFormatBasics.js */ \"./node_modules/bs-platform/lib/js/camlinternalFormatBasics.js\");\n\nfunction failwith(s) {\n  throw [\n        Caml_builtin_exceptions.failure,\n        s\n      ];\n}\n\nfunction invalid_arg(s) {\n  throw [\n        Caml_builtin_exceptions.invalid_argument,\n        s\n      ];\n}\n\nvar Exit = Caml_exceptions.create(\"Pervasives.Exit\");\n\nfunction abs(x) {\n  if (x >= 0) {\n    return x;\n  } else {\n    return -x | 0;\n  }\n}\n\nfunction lnot(x) {\n  return x ^ -1;\n}\n\nvar min_int = -2147483648;\n\nfunction classify_float(x) {\n  if (isFinite(x)) {\n    if (Math.abs(x) >= 2.2250738585072014e-308) {\n      return /* FP_normal */0;\n    } else if (x !== 0) {\n      return /* FP_subnormal */1;\n    } else {\n      return /* FP_zero */2;\n    }\n  } else if (isNaN(x)) {\n    return /* FP_nan */4;\n  } else {\n    return /* FP_infinite */3;\n  }\n}\n\nfunction char_of_int(n) {\n  if (n < 0 || n > 255) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"char_of_int\"\n        ];\n  } else {\n    return n;\n  }\n}\n\nfunction string_of_bool(b) {\n  if (b) {\n    return \"true\";\n  } else {\n    return \"false\";\n  }\n}\n\nfunction bool_of_string(param) {\n  switch (param) {\n    case \"false\" : \n        return false;\n    case \"true\" : \n        return true;\n    default:\n      throw [\n            Caml_builtin_exceptions.invalid_argument,\n            \"bool_of_string\"\n          ];\n  }\n}\n\nfunction valid_float_lexem(s) {\n  var l = s.length;\n  var _i = 0;\n  while(true) {\n    var i = _i;\n    if (i >= l) {\n      return s + \".\";\n    } else {\n      var match = Caml_string.get(s, i);\n      if (match >= 48) {\n        if (match >= 58) {\n          return s;\n        } else {\n          _i = i + 1 | 0;\n          continue ;\n        }\n      } else if (match !== 45) {\n        return s;\n      } else {\n        _i = i + 1 | 0;\n        continue ;\n      }\n    }\n  };\n}\n\nfunction string_of_float(f) {\n  return valid_float_lexem(Caml_format.caml_format_float(\"%.12g\", f));\n}\n\nfunction $at(l1, l2) {\n  if (l1) {\n    return /* :: */[\n            l1[0],\n            $at(l1[1], l2)\n          ];\n  } else {\n    return l2;\n  }\n}\n\nvar stdin = Caml_io.stdin;\n\nvar stdout = Caml_io.stdout;\n\nvar stderr = Caml_io.stderr;\n\nfunction open_out_gen(mode, perm, name) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_open_descriptor_out\");\n}\n\nfunction open_out(name) {\n  return open_out_gen(/* :: */[\n              /* Open_wronly */1,\n              /* :: */[\n                /* Open_creat */3,\n                /* :: */[\n                  /* Open_trunc */4,\n                  /* :: */[\n                    /* Open_text */7,\n                    /* [] */0\n                  ]\n                ]\n              ]\n            ], 438, name);\n}\n\nfunction open_out_bin(name) {\n  return open_out_gen(/* :: */[\n              /* Open_wronly */1,\n              /* :: */[\n                /* Open_creat */3,\n                /* :: */[\n                  /* Open_trunc */4,\n                  /* :: */[\n                    /* Open_binary */6,\n                    /* [] */0\n                  ]\n                ]\n              ]\n            ], 438, name);\n}\n\nfunction flush_all(param) {\n  var _param = Caml_io.caml_ml_out_channels_list(/* () */0);\n  while(true) {\n    var param$1 = _param;\n    if (param$1) {\n      try {\n        Caml_io.caml_ml_flush(param$1[0]);\n      }\n      catch (exn){\n        \n      }\n      _param = param$1[1];\n      continue ;\n    } else {\n      return /* () */0;\n    }\n  };\n}\n\nfunction output_bytes(oc, s) {\n  return Caml_io.caml_ml_output(oc, s, 0, s.length);\n}\n\nfunction output_string(oc, s) {\n  return Caml_io.caml_ml_output(oc, s, 0, s.length);\n}\n\nfunction output(oc, s, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"output\"\n        ];\n  } else {\n    return Caml_io.caml_ml_output(oc, s, ofs, len);\n  }\n}\n\nfunction output_substring(oc, s, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"output_substring\"\n        ];\n  } else {\n    return Caml_io.caml_ml_output(oc, s, ofs, len);\n  }\n}\n\nfunction output_value(chan, v) {\n  return Caml_missing_polyfill.not_implemented(\"caml_output_value\");\n}\n\nfunction close_out(oc) {\n  Caml_io.caml_ml_flush(oc);\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_close_channel\");\n}\n\nfunction close_out_noerr(oc) {\n  try {\n    Caml_io.caml_ml_flush(oc);\n  }\n  catch (exn){\n    \n  }\n  try {\n    return Caml_missing_polyfill.not_implemented(\"caml_ml_close_channel\");\n  }\n  catch (exn$1){\n    return /* () */0;\n  }\n}\n\nfunction open_in_gen(mode, perm, name) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_open_descriptor_in\");\n}\n\nfunction open_in(name) {\n  return open_in_gen(/* :: */[\n              /* Open_rdonly */0,\n              /* :: */[\n                /* Open_text */7,\n                /* [] */0\n              ]\n            ], 0, name);\n}\n\nfunction open_in_bin(name) {\n  return open_in_gen(/* :: */[\n              /* Open_rdonly */0,\n              /* :: */[\n                /* Open_binary */6,\n                /* [] */0\n              ]\n            ], 0, name);\n}\n\nfunction input(ic, s, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"input\"\n        ];\n  } else {\n    return Caml_missing_polyfill.not_implemented(\"caml_ml_input\");\n  }\n}\n\nfunction unsafe_really_input(ic, s, _ofs, _len) {\n  while(true) {\n    var len = _len;\n    var ofs = _ofs;\n    if (len <= 0) {\n      return /* () */0;\n    } else {\n      var r = Caml_missing_polyfill.not_implemented(\"caml_ml_input\");\n      if (r === 0) {\n        throw Caml_builtin_exceptions.end_of_file;\n      } else {\n        _len = len - r | 0;\n        _ofs = ofs + r | 0;\n        continue ;\n      }\n    }\n  };\n}\n\nfunction really_input(ic, s, ofs, len) {\n  if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"really_input\"\n        ];\n  } else {\n    return unsafe_really_input(ic, s, ofs, len);\n  }\n}\n\nfunction really_input_string(ic, len) {\n  var s = Caml_bytes.caml_create_bytes(len);\n  really_input(ic, s, 0, len);\n  return Caml_bytes.bytes_to_string(s);\n}\n\nfunction input_line(chan) {\n  var build_result = function (buf, _pos, _param) {\n    while(true) {\n      var param = _param;\n      var pos = _pos;\n      if (param) {\n        var hd = param[0];\n        var len = hd.length;\n        Caml_bytes.caml_blit_bytes(hd, 0, buf, pos - len | 0, len);\n        _param = param[1];\n        _pos = pos - len | 0;\n        continue ;\n      } else {\n        return buf;\n      }\n    };\n  };\n  var scan = function (_accu, _len) {\n    while(true) {\n      var len = _len;\n      var accu = _accu;\n      var n = Caml_missing_polyfill.not_implemented(\"caml_ml_input_scan_line\");\n      if (n === 0) {\n        if (accu) {\n          return build_result(Caml_bytes.caml_create_bytes(len), len, accu);\n        } else {\n          throw Caml_builtin_exceptions.end_of_file;\n        }\n      } else if (n > 0) {\n        var res = Caml_bytes.caml_create_bytes(n - 1 | 0);\n        Caml_missing_polyfill.not_implemented(\"caml_ml_input\");\n        Caml_missing_polyfill.not_implemented(\"caml_ml_input_char\");\n        if (accu) {\n          var len$1 = (len + n | 0) - 1 | 0;\n          return build_result(Caml_bytes.caml_create_bytes(len$1), len$1, /* :: */[\n                      res,\n                      accu\n                    ]);\n        } else {\n          return res;\n        }\n      } else {\n        var beg = Caml_bytes.caml_create_bytes(-n | 0);\n        Caml_missing_polyfill.not_implemented(\"caml_ml_input\");\n        _len = len - n | 0;\n        _accu = /* :: */[\n          beg,\n          accu\n        ];\n        continue ;\n      }\n    };\n  };\n  return Caml_bytes.bytes_to_string(scan(/* [] */0, 0));\n}\n\nfunction close_in_noerr(ic) {\n  try {\n    return Caml_missing_polyfill.not_implemented(\"caml_ml_close_channel\");\n  }\n  catch (exn){\n    return /* () */0;\n  }\n}\n\nfunction print_char(c) {\n  return Caml_io.caml_ml_output_char(stdout, c);\n}\n\nfunction print_string(s) {\n  return output_string(stdout, s);\n}\n\nfunction print_bytes(s) {\n  return output_bytes(stdout, s);\n}\n\nfunction print_int(i) {\n  return output_string(stdout, String(i));\n}\n\nfunction print_float(f) {\n  return output_string(stdout, valid_float_lexem(Caml_format.caml_format_float(\"%.12g\", f)));\n}\n\nfunction print_newline(param) {\n  Caml_io.caml_ml_output_char(stdout, /* \"\\n\" */10);\n  return Caml_io.caml_ml_flush(stdout);\n}\n\nfunction prerr_char(c) {\n  return Caml_io.caml_ml_output_char(stderr, c);\n}\n\nfunction prerr_string(s) {\n  return output_string(stderr, s);\n}\n\nfunction prerr_bytes(s) {\n  return output_bytes(stderr, s);\n}\n\nfunction prerr_int(i) {\n  return output_string(stderr, String(i));\n}\n\nfunction prerr_float(f) {\n  return output_string(stderr, valid_float_lexem(Caml_format.caml_format_float(\"%.12g\", f)));\n}\n\nfunction prerr_newline(param) {\n  Caml_io.caml_ml_output_char(stderr, /* \"\\n\" */10);\n  return Caml_io.caml_ml_flush(stderr);\n}\n\nfunction read_line(param) {\n  Caml_io.caml_ml_flush(stdout);\n  return input_line(stdin);\n}\n\nfunction read_int(param) {\n  return Caml_format.caml_int_of_string((Caml_io.caml_ml_flush(stdout), input_line(stdin)));\n}\n\nfunction read_float(param) {\n  return Caml_format.caml_float_of_string((Caml_io.caml_ml_flush(stdout), input_line(stdin)));\n}\n\nfunction string_of_format(param) {\n  return param[1];\n}\n\nfunction $caret$caret(param, param$1) {\n  return /* Format */[\n          CamlinternalFormatBasics.concat_fmt(param[0], param$1[0]),\n          param[1] + (\"%,\" + param$1[1])\n        ];\n}\n\nvar exit_function = /* record */[/* contents */flush_all];\n\nfunction at_exit(f) {\n  var g = exit_function[0];\n  exit_function[0] = (function (param) {\n      Curry._1(f, /* () */0);\n      return Curry._1(g, /* () */0);\n    });\n  return /* () */0;\n}\n\nfunction do_at_exit(param) {\n  return Curry._1(exit_function[0], /* () */0);\n}\n\nfunction exit(retcode) {\n  do_at_exit(/* () */0);\n  return Caml_sys.caml_sys_exit(retcode);\n}\n\nvar max_int = 2147483647;\n\nvar epsilon_float = 2.220446049250313e-16;\n\nvar flush = Caml_io.caml_ml_flush;\n\nvar output_char = Caml_io.caml_ml_output_char;\n\nvar output_byte = Caml_io.caml_ml_output_char;\n\nfunction output_binary_int(prim, prim$1) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_output_int\");\n}\n\nfunction seek_out(prim, prim$1) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_seek_out\");\n}\n\nfunction pos_out(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_pos_out\");\n}\n\nfunction out_channel_length(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_channel_size\");\n}\n\nfunction set_binary_mode_out(prim, prim$1) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_set_binary_mode\");\n}\n\nfunction input_char(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_input_char\");\n}\n\nfunction input_byte(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_input_char\");\n}\n\nfunction input_binary_int(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_input_int\");\n}\n\nfunction input_value(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_input_value\");\n}\n\nfunction seek_in(prim, prim$1) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_seek_in\");\n}\n\nfunction pos_in(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_pos_in\");\n}\n\nfunction in_channel_length(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_channel_size\");\n}\n\nfunction close_in(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_close_channel\");\n}\n\nfunction set_binary_mode_in(prim, prim$1) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_set_binary_mode\");\n}\n\nfunction LargeFile_000(prim, prim$1) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_seek_out_64\");\n}\n\nfunction LargeFile_001(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_pos_out_64\");\n}\n\nfunction LargeFile_002(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_channel_size_64\");\n}\n\nfunction LargeFile_003(prim, prim$1) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_seek_in_64\");\n}\n\nfunction LargeFile_004(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_pos_in_64\");\n}\n\nfunction LargeFile_005(prim) {\n  return Caml_missing_polyfill.not_implemented(\"caml_ml_channel_size_64\");\n}\n\nvar LargeFile = [\n  LargeFile_000,\n  LargeFile_001,\n  LargeFile_002,\n  LargeFile_003,\n  LargeFile_004,\n  LargeFile_005\n];\n\nexports.invalid_arg = invalid_arg;\nexports.failwith = failwith;\nexports.Exit = Exit;\nexports.abs = abs;\nexports.max_int = max_int;\nexports.min_int = min_int;\nexports.lnot = lnot;\nexports.epsilon_float = epsilon_float;\nexports.classify_float = classify_float;\nexports.char_of_int = char_of_int;\nexports.string_of_bool = string_of_bool;\nexports.bool_of_string = bool_of_string;\nexports.string_of_float = string_of_float;\nexports.$at = $at;\nexports.stdin = stdin;\nexports.stdout = stdout;\nexports.stderr = stderr;\nexports.print_char = print_char;\nexports.print_string = print_string;\nexports.print_bytes = print_bytes;\nexports.print_int = print_int;\nexports.print_float = print_float;\nexports.print_newline = print_newline;\nexports.prerr_char = prerr_char;\nexports.prerr_string = prerr_string;\nexports.prerr_bytes = prerr_bytes;\nexports.prerr_int = prerr_int;\nexports.prerr_float = prerr_float;\nexports.prerr_newline = prerr_newline;\nexports.read_line = read_line;\nexports.read_int = read_int;\nexports.read_float = read_float;\nexports.open_out = open_out;\nexports.open_out_bin = open_out_bin;\nexports.open_out_gen = open_out_gen;\nexports.flush = flush;\nexports.flush_all = flush_all;\nexports.output_char = output_char;\nexports.output_string = output_string;\nexports.output_bytes = output_bytes;\nexports.output = output;\nexports.output_substring = output_substring;\nexports.output_byte = output_byte;\nexports.output_binary_int = output_binary_int;\nexports.output_value = output_value;\nexports.seek_out = seek_out;\nexports.pos_out = pos_out;\nexports.out_channel_length = out_channel_length;\nexports.close_out = close_out;\nexports.close_out_noerr = close_out_noerr;\nexports.set_binary_mode_out = set_binary_mode_out;\nexports.open_in = open_in;\nexports.open_in_bin = open_in_bin;\nexports.open_in_gen = open_in_gen;\nexports.input_char = input_char;\nexports.input_line = input_line;\nexports.input = input;\nexports.really_input = really_input;\nexports.really_input_string = really_input_string;\nexports.input_byte = input_byte;\nexports.input_binary_int = input_binary_int;\nexports.input_value = input_value;\nexports.seek_in = seek_in;\nexports.pos_in = pos_in;\nexports.in_channel_length = in_channel_length;\nexports.close_in = close_in;\nexports.close_in_noerr = close_in_noerr;\nexports.set_binary_mode_in = set_binary_mode_in;\nexports.LargeFile = LargeFile;\nexports.string_of_format = string_of_format;\nexports.$caret$caret = $caret$caret;\nexports.exit = exit;\nexports.at_exit = at_exit;\nexports.valid_float_lexem = valid_float_lexem;\nexports.unsafe_really_input = unsafe_really_input;\nexports.do_at_exit = do_at_exit;\n/* No side effect */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/pervasives.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/printf.js":
/*!***************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/printf.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Curry = __webpack_require__(/*! ./curry.js */ \"./node_modules/bs-platform/lib/js/curry.js\");\nvar $$Buffer = __webpack_require__(/*! ./buffer.js */ \"./node_modules/bs-platform/lib/js/buffer.js\");\nvar Pervasives = __webpack_require__(/*! ./pervasives.js */ \"./node_modules/bs-platform/lib/js/pervasives.js\");\nvar CamlinternalFormat = __webpack_require__(/*! ./camlinternalFormat.js */ \"./node_modules/bs-platform/lib/js/camlinternalFormat.js\");\n\nfunction kfprintf(k, o, param) {\n  return CamlinternalFormat.make_printf((function (o, acc) {\n                CamlinternalFormat.output_acc(o, acc);\n                return Curry._1(k, o);\n              }), o, /* End_of_acc */0, param[0]);\n}\n\nfunction kbprintf(k, b, param) {\n  return CamlinternalFormat.make_printf((function (b, acc) {\n                CamlinternalFormat.bufput_acc(b, acc);\n                return Curry._1(k, b);\n              }), b, /* End_of_acc */0, param[0]);\n}\n\nfunction ikfprintf(k, oc, param) {\n  return CamlinternalFormat.make_printf((function (oc, param) {\n                return Curry._1(k, oc);\n              }), oc, /* End_of_acc */0, param[0]);\n}\n\nfunction fprintf(oc, fmt) {\n  return kfprintf((function (prim) {\n                return /* () */0;\n              }), oc, fmt);\n}\n\nfunction bprintf(b, fmt) {\n  return kbprintf((function (prim) {\n                return /* () */0;\n              }), b, fmt);\n}\n\nfunction ifprintf(oc, fmt) {\n  return ikfprintf((function (prim) {\n                return /* () */0;\n              }), oc, fmt);\n}\n\nfunction printf(fmt) {\n  return fprintf(Pervasives.stdout, fmt);\n}\n\nfunction eprintf(fmt) {\n  return fprintf(Pervasives.stderr, fmt);\n}\n\nfunction ksprintf(k, param) {\n  var k$prime = function (param, acc) {\n    var buf = $$Buffer.create(64);\n    CamlinternalFormat.strput_acc(buf, acc);\n    return Curry._1(k, $$Buffer.contents(buf));\n  };\n  return CamlinternalFormat.make_printf(k$prime, /* () */0, /* End_of_acc */0, param[0]);\n}\n\nfunction sprintf(fmt) {\n  return ksprintf((function (s) {\n                return s;\n              }), fmt);\n}\n\nvar kprintf = ksprintf;\n\nexports.fprintf = fprintf;\nexports.printf = printf;\nexports.eprintf = eprintf;\nexports.sprintf = sprintf;\nexports.bprintf = bprintf;\nexports.ifprintf = ifprintf;\nexports.kfprintf = kfprintf;\nexports.ikfprintf = ikfprintf;\nexports.ksprintf = ksprintf;\nexports.kbprintf = kbprintf;\nexports.kprintf = kprintf;\n/* No side effect */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/printf.js?");

/***/ }),

/***/ "./node_modules/bs-platform/lib/js/string.js":
/*!***************************************************!*\
  !*** ./node_modules/bs-platform/lib/js/string.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar List = __webpack_require__(/*! ./list.js */ \"./node_modules/bs-platform/lib/js/list.js\");\nvar Bytes = __webpack_require__(/*! ./bytes.js */ \"./node_modules/bs-platform/lib/js/bytes.js\");\nvar Caml_bytes = __webpack_require__(/*! ./caml_bytes.js */ \"./node_modules/bs-platform/lib/js/caml_bytes.js\");\nvar Caml_int32 = __webpack_require__(/*! ./caml_int32.js */ \"./node_modules/bs-platform/lib/js/caml_int32.js\");\nvar Caml_primitive = __webpack_require__(/*! ./caml_primitive.js */ \"./node_modules/bs-platform/lib/js/caml_primitive.js\");\nvar Caml_builtin_exceptions = __webpack_require__(/*! ./caml_builtin_exceptions.js */ \"./node_modules/bs-platform/lib/js/caml_builtin_exceptions.js\");\n\nfunction make(n, c) {\n  return Caml_bytes.bytes_to_string(Bytes.make(n, c));\n}\n\nfunction init(n, f) {\n  return Caml_bytes.bytes_to_string(Bytes.init(n, f));\n}\n\nfunction copy(s) {\n  return Caml_bytes.bytes_to_string(Bytes.copy(Caml_bytes.bytes_of_string(s)));\n}\n\nfunction sub(s, ofs, len) {\n  return Caml_bytes.bytes_to_string(Bytes.sub(Caml_bytes.bytes_of_string(s), ofs, len));\n}\n\nfunction concat(sep, l) {\n  if (l) {\n    var hd = l[0];\n    var num = /* record */[/* contents */0];\n    var len = /* record */[/* contents */0];\n    List.iter((function (s) {\n            num[0] = num[0] + 1 | 0;\n            len[0] = len[0] + s.length | 0;\n            return /* () */0;\n          }), l);\n    var r = Caml_bytes.caml_create_bytes(len[0] + Caml_int32.imul(sep.length, num[0] - 1 | 0) | 0);\n    Caml_bytes.caml_blit_string(hd, 0, r, 0, hd.length);\n    var pos = /* record */[/* contents */hd.length];\n    List.iter((function (s) {\n            Caml_bytes.caml_blit_string(sep, 0, r, pos[0], sep.length);\n            pos[0] = pos[0] + sep.length | 0;\n            Caml_bytes.caml_blit_string(s, 0, r, pos[0], s.length);\n            pos[0] = pos[0] + s.length | 0;\n            return /* () */0;\n          }), l[1]);\n    return Caml_bytes.bytes_to_string(r);\n  } else {\n    return \"\";\n  }\n}\n\nfunction iter(f, s) {\n  return Bytes.iter(f, Caml_bytes.bytes_of_string(s));\n}\n\nfunction iteri(f, s) {\n  return Bytes.iteri(f, Caml_bytes.bytes_of_string(s));\n}\n\nfunction map(f, s) {\n  return Caml_bytes.bytes_to_string(Bytes.map(f, Caml_bytes.bytes_of_string(s)));\n}\n\nfunction mapi(f, s) {\n  return Caml_bytes.bytes_to_string(Bytes.mapi(f, Caml_bytes.bytes_of_string(s)));\n}\n\nfunction is_space(param) {\n  var switcher = param - 9 | 0;\n  if (switcher > 4 || switcher < 0) {\n    return switcher === 23;\n  } else {\n    return switcher !== 2;\n  }\n}\n\nfunction trim(s) {\n  if (s === \"\" || !(is_space(s.charCodeAt(0)) || is_space(s.charCodeAt(s.length - 1 | 0)))) {\n    return s;\n  } else {\n    return Caml_bytes.bytes_to_string(Bytes.trim(Caml_bytes.bytes_of_string(s)));\n  }\n}\n\nfunction escaped(s) {\n  var needs_escape = function (_i) {\n    while(true) {\n      var i = _i;\n      if (i >= s.length) {\n        return false;\n      } else {\n        var match = s.charCodeAt(i);\n        if (match >= 32) {\n          var switcher = match - 34 | 0;\n          if (switcher > 58 || switcher < 0) {\n            if (switcher >= 93) {\n              return true;\n            } else {\n              _i = i + 1 | 0;\n              continue ;\n            }\n          } else if (switcher > 57 || switcher < 1) {\n            return true;\n          } else {\n            _i = i + 1 | 0;\n            continue ;\n          }\n        } else {\n          return true;\n        }\n      }\n    };\n  };\n  if (needs_escape(0)) {\n    return Caml_bytes.bytes_to_string(Bytes.escaped(Caml_bytes.bytes_of_string(s)));\n  } else {\n    return s;\n  }\n}\n\nfunction index_rec(s, lim, _i, c) {\n  while(true) {\n    var i = _i;\n    if (i >= lim) {\n      throw Caml_builtin_exceptions.not_found;\n    } else if (s.charCodeAt(i) === c) {\n      return i;\n    } else {\n      _i = i + 1 | 0;\n      continue ;\n    }\n  };\n}\n\nfunction index(s, c) {\n  return index_rec(s, s.length, 0, c);\n}\n\nfunction index_from(s, i, c) {\n  var l = s.length;\n  if (i < 0 || i > l) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"String.index_from / Bytes.index_from\"\n        ];\n  } else {\n    return index_rec(s, l, i, c);\n  }\n}\n\nfunction rindex_rec(s, _i, c) {\n  while(true) {\n    var i = _i;\n    if (i < 0) {\n      throw Caml_builtin_exceptions.not_found;\n    } else if (s.charCodeAt(i) === c) {\n      return i;\n    } else {\n      _i = i - 1 | 0;\n      continue ;\n    }\n  };\n}\n\nfunction rindex(s, c) {\n  return rindex_rec(s, s.length - 1 | 0, c);\n}\n\nfunction rindex_from(s, i, c) {\n  if (i < -1 || i >= s.length) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"String.rindex_from / Bytes.rindex_from\"\n        ];\n  } else {\n    return rindex_rec(s, i, c);\n  }\n}\n\nfunction contains_from(s, i, c) {\n  var l = s.length;\n  if (i < 0 || i > l) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"String.contains_from / Bytes.contains_from\"\n        ];\n  } else {\n    try {\n      index_rec(s, l, i, c);\n      return true;\n    }\n    catch (exn){\n      if (exn === Caml_builtin_exceptions.not_found) {\n        return false;\n      } else {\n        throw exn;\n      }\n    }\n  }\n}\n\nfunction contains(s, c) {\n  return contains_from(s, 0, c);\n}\n\nfunction rcontains_from(s, i, c) {\n  if (i < 0 || i >= s.length) {\n    throw [\n          Caml_builtin_exceptions.invalid_argument,\n          \"String.rcontains_from / Bytes.rcontains_from\"\n        ];\n  } else {\n    try {\n      rindex_rec(s, i, c);\n      return true;\n    }\n    catch (exn){\n      if (exn === Caml_builtin_exceptions.not_found) {\n        return false;\n      } else {\n        throw exn;\n      }\n    }\n  }\n}\n\nfunction uppercase(s) {\n  return Caml_bytes.bytes_to_string(Bytes.uppercase(Caml_bytes.bytes_of_string(s)));\n}\n\nfunction lowercase(s) {\n  return Caml_bytes.bytes_to_string(Bytes.lowercase(Caml_bytes.bytes_of_string(s)));\n}\n\nfunction capitalize(s) {\n  return Caml_bytes.bytes_to_string(Bytes.capitalize(Caml_bytes.bytes_of_string(s)));\n}\n\nfunction uncapitalize(s) {\n  return Caml_bytes.bytes_to_string(Bytes.uncapitalize(Caml_bytes.bytes_of_string(s)));\n}\n\nvar compare = Caml_primitive.caml_string_compare;\n\nvar fill = Bytes.fill;\n\nvar blit = Bytes.blit_string;\n\nexports.make = make;\nexports.init = init;\nexports.copy = copy;\nexports.sub = sub;\nexports.fill = fill;\nexports.blit = blit;\nexports.concat = concat;\nexports.iter = iter;\nexports.iteri = iteri;\nexports.map = map;\nexports.mapi = mapi;\nexports.trim = trim;\nexports.escaped = escaped;\nexports.index = index;\nexports.rindex = rindex;\nexports.index_from = index_from;\nexports.rindex_from = rindex_from;\nexports.contains = contains;\nexports.contains_from = contains_from;\nexports.rcontains_from = rcontains_from;\nexports.uppercase = uppercase;\nexports.lowercase = lowercase;\nexports.capitalize = capitalize;\nexports.uncapitalize = uncapitalize;\nexports.compare = compare;\n/* No side effect */\n\n\n//# sourceURL=webpack:///./node_modules/bs-platform/lib/js/string.js?");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack:///./node_modules/process/browser.js?");

/***/ })

/******/ });