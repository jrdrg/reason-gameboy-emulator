// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/lib/js/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Cpu$GameboyEmulator = require("../src/Cpu.bs.js");

Jest.describe("Cpu registers", (function (param) {
        Jest.describe("8-bit registers", (function (param) {
                Jest.test("A", (function (param) {
                        var partial_arg = 3;
                        var cpu = (function (eta) {
                              var param = undefined;
                              var param$1 = undefined;
                              var param$2 = undefined;
                              var param$3 = undefined;
                              var param$4 = undefined;
                              var param$5 = undefined;
                              var param$6 = undefined;
                              var param$7 = eta;
                              return Cpu$GameboyEmulator.setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                            })(Cpu$GameboyEmulator.make(/* () */0));
                        return Jest.Expect[/* toBe */2](3, Jest.Expect[/* expect */0](cpu[/* registers */2][/* a */0]));
                      }));
                Jest.test("B", (function (param) {
                        var eta = Cpu$GameboyEmulator.make(/* () */0);
                        var cpu = Curry._7((function (param) {
                                  return Curry._2(Cpu$GameboyEmulator.setRegisters, param, 3);
                                })(undefined), undefined, undefined, undefined, undefined, undefined, undefined, eta);
                        return Jest.Expect[/* toBe */2](3, Jest.Expect[/* expect */0](cpu[/* registers */2][/* b */1]));
                      }));
                Jest.test("C", (function (param) {
                        var eta = Cpu$GameboyEmulator.make(/* () */0);
                        var cpu = Curry._6((function (param, param$1) {
                                  return Curry._3(Cpu$GameboyEmulator.setRegisters, param, param$1, 3);
                                })(undefined, undefined), undefined, undefined, undefined, undefined, undefined, eta);
                        return Jest.Expect[/* toBe */2](3, Jest.Expect[/* expect */0](cpu[/* registers */2][/* c */2]));
                      }));
                Jest.test("D", (function (param) {
                        var eta = Cpu$GameboyEmulator.make(/* () */0);
                        var cpu = Curry._5((function (param, param$1, param$2) {
                                  return Curry._4(Cpu$GameboyEmulator.setRegisters, param, param$1, param$2, 3);
                                })(undefined, undefined, undefined), undefined, undefined, undefined, undefined, eta);
                        return Jest.Expect[/* toBe */2](3, Jest.Expect[/* expect */0](cpu[/* registers */2][/* d */3]));
                      }));
                Jest.test("E", (function (param) {
                        var eta = Cpu$GameboyEmulator.make(/* () */0);
                        var cpu = Curry._4((function (param, param$1, param$2, param$3) {
                                  return Curry._5(Cpu$GameboyEmulator.setRegisters, param, param$1, param$2, param$3, 3);
                                })(undefined, undefined, undefined, undefined), undefined, undefined, undefined, eta);
                        return Jest.Expect[/* toBe */2](3, Jest.Expect[/* expect */0](cpu[/* registers */2][/* e */4]));
                      }));
                Jest.test("H", (function (param) {
                        var eta = Cpu$GameboyEmulator.make(/* () */0);
                        var cpu = Curry._3((function (param, param$1, param$2, param$3, param$4) {
                                  return Curry._6(Cpu$GameboyEmulator.setRegisters, param, param$1, param$2, param$3, param$4, 3);
                                })(undefined, undefined, undefined, undefined, undefined), undefined, undefined, eta);
                        return Jest.Expect[/* toBe */2](3, Jest.Expect[/* expect */0](cpu[/* registers */2][/* h */5]));
                      }));
                return Jest.test("L", (function (param) {
                              var eta = Cpu$GameboyEmulator.make(/* () */0);
                              var cpu = Curry._2((function (param, param$1, param$2, param$3, param$4, param$5) {
                                        return Curry._7(Cpu$GameboyEmulator.setRegisters, param, param$1, param$2, param$3, param$4, param$5, 3);
                                      })(undefined, undefined, undefined, undefined, undefined, undefined), undefined, eta);
                              return Jest.Expect[/* toBe */2](3, Jest.Expect[/* expect */0](cpu[/* registers */2][/* l */6]));
                            }));
              }));
        return Jest.describe("16-bit registers", (function (param) {
                      Jest.test("AF", (function (param) {
                              var cpu = Cpu$GameboyEmulator.writeRegister16(/* AF */0, 10, Cpu$GameboyEmulator.make(/* () */0));
                              return Jest.Expect[/* toBe */2](10, Jest.Expect[/* expect */0](Cpu$GameboyEmulator.rAf(cpu)));
                            }));
                      Jest.test("BC", (function (param) {
                              var cpu = Cpu$GameboyEmulator.writeRegister16(/* BC */1, 10, Cpu$GameboyEmulator.make(/* () */0));
                              return Jest.Expect[/* toBe */2](10, Jest.Expect[/* expect */0](Cpu$GameboyEmulator.rBc(cpu)));
                            }));
                      Jest.test("DE", (function (param) {
                              var cpu = Cpu$GameboyEmulator.writeRegister16(/* DE */2, 10, Cpu$GameboyEmulator.make(/* () */0));
                              return Jest.Expect[/* toBe */2](10, Jest.Expect[/* expect */0](Cpu$GameboyEmulator.rDe(cpu)));
                            }));
                      return Jest.test("HL", (function (param) {
                                    var cpu = Cpu$GameboyEmulator.writeRegister16(/* HL */3, 10, Cpu$GameboyEmulator.make(/* () */0));
                                    return Jest.Expect[/* toBe */2](10, Jest.Expect[/* expect */0](Cpu$GameboyEmulator.rHl(cpu)));
                                  }));
                    }));
      }));

/*  Not a pure module */
