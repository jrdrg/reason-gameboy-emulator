// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/lib/js/src/jest.js");
var Cpu$GameboyEmulator = require("../src/Cpu.bs.js");

Jest.describe("Cpu registers", (function (param) {
        Jest.describe("8-bit registers", (function (param) {
                Jest.test("A", (function (param) {
                        var cpu = Cpu$GameboyEmulator.wA(3, Cpu$GameboyEmulator.make(/* () */0));
                        return Jest.Expect.toBe(3, Jest.Expect.expect(cpu[/* registers */3][/* a */0]));
                      }));
                Jest.test("B", (function (param) {
                        var cpu = Cpu$GameboyEmulator.wB(3, Cpu$GameboyEmulator.make(/* () */0));
                        return Jest.Expect.toBe(3, Jest.Expect.expect(cpu[/* registers */3][/* b */1]));
                      }));
                Jest.test("C", (function (param) {
                        var cpu = Cpu$GameboyEmulator.wC(3, Cpu$GameboyEmulator.make(/* () */0));
                        return Jest.Expect.toBe(3, Jest.Expect.expect(cpu[/* registers */3][/* c */2]));
                      }));
                Jest.test("D", (function (param) {
                        var cpu = Cpu$GameboyEmulator.wD(3, Cpu$GameboyEmulator.make(/* () */0));
                        return Jest.Expect.toBe(3, Jest.Expect.expect(cpu[/* registers */3][/* d */3]));
                      }));
                Jest.test("E", (function (param) {
                        var cpu = Cpu$GameboyEmulator.wE(3, Cpu$GameboyEmulator.make(/* () */0));
                        return Jest.Expect.toBe(3, Jest.Expect.expect(cpu[/* registers */3][/* e */4]));
                      }));
                Jest.test("H", (function (param) {
                        var cpu = Cpu$GameboyEmulator.wH(3, Cpu$GameboyEmulator.make(/* () */0));
                        return Jest.Expect.toBe(3, Jest.Expect.expect(cpu[/* registers */3][/* h */5]));
                      }));
                return Jest.test("L", (function (param) {
                              var cpu = Cpu$GameboyEmulator.wL(3, Cpu$GameboyEmulator.make(/* () */0));
                              return Jest.Expect.toBe(3, Jest.Expect.expect(cpu[/* registers */3][/* l */6]));
                            }));
              }));
        return Jest.describe("16-bit registers", (function (param) {
                      Jest.test("AF", (function (param) {
                              var cpu = Cpu$GameboyEmulator.writeRegister16(/* AF */0, 10, Cpu$GameboyEmulator.make(/* () */0));
                              return Jest.Expect.toBe(10, Jest.Expect.expect(Cpu$GameboyEmulator.rAf(cpu)));
                            }));
                      Jest.test("BC", (function (param) {
                              var cpu = Cpu$GameboyEmulator.writeRegister16(/* BC */1, 10, Cpu$GameboyEmulator.make(/* () */0));
                              return Jest.Expect.toBe(10, Jest.Expect.expect(Cpu$GameboyEmulator.rBc(cpu)));
                            }));
                      Jest.test("DE", (function (param) {
                              var cpu = Cpu$GameboyEmulator.writeRegister16(/* DE */2, 10, Cpu$GameboyEmulator.make(/* () */0));
                              return Jest.Expect.toBe(10, Jest.Expect.expect(Cpu$GameboyEmulator.rDe(cpu)));
                            }));
                      return Jest.test("HL", (function (param) {
                                    var cpu = Cpu$GameboyEmulator.writeRegister16(/* HL */3, 10, Cpu$GameboyEmulator.make(/* () */0));
                                    return Jest.Expect.toBe(10, Jest.Expect.expect(Cpu$GameboyEmulator.rHl(cpu)));
                                  }));
                    }));
      }));

/*  Not a pure module */
