// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/lib/js/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Cpu$GameboyEmulator = require("../src/Cpu.bs.js");
var Gpu$GameboyEmulator = require("../src/Gpu.bs.js");
var Mmu$GameboyEmulator = require("../src/Mmu.bs.js");
var Cpu_ops$GameboyEmulator = require("../src/Cpu_ops.bs.js");
var Cpu_cbops$GameboyEmulator = require("../src/Cpu_cbops.bs.js");

Jest.describe("Cpu", (function (param) {
        var initialValues = function (param) {
          return /* tuple */[
                  Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0)),
                  Gpu$GameboyEmulator.make(/* () */0)
                ];
        };
        Jest.describe("Signed", (function (param) {
                Jest.testAll("returns a positive number if it is < 127", /* :: */[
                      /* tuple */[
                        1,
                        1
                      ],
                      /* :: */[
                        /* tuple */[
                          65,
                          65
                        ],
                        /* :: */[
                          /* tuple */[
                            127,
                            127
                          ],
                          /* :: */[
                            /* tuple */[
                              0,
                              0
                            ],
                            /* [] */0
                          ]
                        ]
                      ]
                    ], (function (param) {
                        var s = Cpu$GameboyEmulator.signed(param[0]);
                        return Jest.Expect.toBe(param[1], Jest.Expect.expect(s));
                      }));
                return Jest.testAll("returns a negative number if it is > 127", /* :: */[
                            /* tuple */[
                              128,
                              -128
                            ],
                            /* :: */[
                              /* tuple */[
                                129,
                                -127
                              ],
                              /* [] */0
                            ]
                          ], (function (param) {
                              var s = Cpu$GameboyEmulator.signed(param[0]);
                              return Jest.Expect.toBe(param[1], Jest.Expect.expect(s));
                            }));
              }));
        return Jest.describe("Ops", (function (param) {
                      Jest.describe("Increment", (function (param) {
                              var makeState = function ($staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, $staropt$star$4, param) {
                                var a = $staropt$star !== undefined ? $staropt$star : 0;
                                var b = $staropt$star$1 !== undefined ? $staropt$star$1 : 0;
                                var c = $staropt$star$2 !== undefined ? $staropt$star$2 : 0;
                                var d = $staropt$star$3 !== undefined ? $staropt$star$3 : 0;
                                var e = $staropt$star$4 !== undefined ? $staropt$star$4 : 0;
                                var cpu = Cpu$GameboyEmulator.make(/* () */0);
                                var cpu$1 = Cpu$GameboyEmulator.wE(e, Cpu$GameboyEmulator.wD(d, Cpu$GameboyEmulator.wC(c, Cpu$GameboyEmulator.wB(b, Cpu$GameboyEmulator.wA(a, cpu)))));
                                var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                                var gpu = Gpu$GameboyEmulator.make(/* () */0);
                                return /* tuple */[
                                        cpu$1,
                                        mmu,
                                        gpu
                                      ];
                              };
                              Jest.describe("INC B", (function (param) {
                                      Jest.test("increments register b", (function (param) {
                                              var match = makeState(undefined, 9, undefined, undefined, undefined, /* () */0);
                                              var cpu1 = Curry._1(Cpu_ops$GameboyEmulator.Ops.Increment8.inc_b, /* record */[
                                                      /* cpu */match[0],
                                                      /* mmu */match[1],
                                                      /* gpu */match[2]
                                                    ])[/* cpu */0];
                                              return Jest.Expect.toEqual(10, Jest.Expect.expect(cpu1[/* registers */3][/* b */1]));
                                            }));
                                      return Jest.test("updates the carry flag", (function (param) {
                                                    var match = makeState(undefined, 255, undefined, undefined, undefined, /* () */0);
                                                    var cpu1 = Curry._1(Cpu_ops$GameboyEmulator.Ops.Increment8.inc_b, /* record */[
                                                            /* cpu */match[0],
                                                            /* mmu */match[1],
                                                            /* gpu */match[2]
                                                          ])[/* cpu */0];
                                                    return Jest.Expect.toEqual(/* tuple */[
                                                                0,
                                                                128
                                                              ], Jest.Expect.expect(/* tuple */[
                                                                    cpu1[/* registers */3][/* b */1],
                                                                    cpu1[/* registers */3][/* f */7]
                                                                  ]));
                                                  }));
                                    }));
                              Jest.describe("INC C", (function (param) {
                                      Jest.test("increments register c", (function (param) {
                                              var match = makeState(undefined, undefined, 9, undefined, undefined, /* () */0);
                                              var cpu1 = Curry._1(Cpu_ops$GameboyEmulator.Ops.Increment8.inc_c, /* record */[
                                                      /* cpu */match[0],
                                                      /* mmu */match[1],
                                                      /* gpu */match[2]
                                                    ])[/* cpu */0];
                                              return Jest.Expect.toEqual(10, Jest.Expect.expect(cpu1[/* registers */3][/* c */2]));
                                            }));
                                      return Jest.test("updates the carry flag", (function (param) {
                                                    var match = makeState(undefined, undefined, 255, undefined, undefined, /* () */0);
                                                    var cpu1 = Curry._1(Cpu_ops$GameboyEmulator.Ops.Increment8.inc_c, /* record */[
                                                            /* cpu */match[0],
                                                            /* mmu */match[1],
                                                            /* gpu */match[2]
                                                          ])[/* cpu */0];
                                                    return Jest.Expect.toEqual(/* tuple */[
                                                                0,
                                                                128
                                                              ], Jest.Expect.expect(/* tuple */[
                                                                    cpu1[/* registers */3][/* c */2],
                                                                    cpu1[/* registers */3][/* f */7]
                                                                  ]));
                                                  }));
                                    }));
                              Jest.test("INC BC", (function (param) {
                                      var match = makeState(undefined, undefined, 255, undefined, undefined, /* () */0);
                                      var cpu1 = Curry._1(Cpu_ops$GameboyEmulator.Ops.Increment16.inc_bc, /* record */[
                                              /* cpu */match[0],
                                              /* mmu */match[1],
                                              /* gpu */match[2]
                                            ])[/* cpu */0];
                                      return Jest.Expect.toEqual(/* tuple */[
                                                  256,
                                                  1,
                                                  0
                                                ], Jest.Expect.expect(/* tuple */[
                                                      Cpu$GameboyEmulator.rBc(cpu1),
                                                      cpu1[/* registers */3][/* b */1],
                                                      cpu1[/* registers */3][/* c */2]
                                                    ]));
                                    }));
                              Jest.test("INC DE", (function (param) {
                                      var cpu = Cpu$GameboyEmulator.wE(255, Cpu$GameboyEmulator.make(/* () */0));
                                      var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                                      var gpu = Gpu$GameboyEmulator.make(/* () */0);
                                      var cpu1 = Curry._1(Cpu_ops$GameboyEmulator.Ops.Increment16.inc_de, /* record */[
                                              /* cpu */cpu,
                                              /* mmu */mmu,
                                              /* gpu */gpu
                                            ])[/* cpu */0];
                                      return Jest.Expect.toEqual(/* tuple */[
                                                  256,
                                                  1,
                                                  0
                                                ], Jest.Expect.expect(/* tuple */[
                                                      Cpu$GameboyEmulator.rDe(cpu1),
                                                      cpu1[/* registers */3][/* d */3],
                                                      cpu1[/* registers */3][/* e */4]
                                                    ]));
                                    }));
                              return Jest.test("INC HL", (function (param) {
                                            var cpu = Cpu$GameboyEmulator.wL(255, Cpu$GameboyEmulator.make(/* () */0));
                                            var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                                            var gpu = Gpu$GameboyEmulator.make(/* () */0);
                                            var cpu1 = Curry._1(Cpu_ops$GameboyEmulator.Ops.Increment16.inc_hl, /* record */[
                                                    /* cpu */cpu,
                                                    /* mmu */mmu,
                                                    /* gpu */gpu
                                                  ])[/* cpu */0];
                                            return Jest.Expect.toEqual(/* tuple */[
                                                        256,
                                                        1,
                                                        0
                                                      ], Jest.Expect.expect(/* tuple */[
                                                            Cpu$GameboyEmulator.rHl(cpu1),
                                                            cpu1[/* registers */3][/* h */5],
                                                            cpu1[/* registers */3][/* l */6]
                                                          ]));
                                          }));
                            }));
                      Jest.describe("Decrement", (function (param) {
                              Jest.test("DEC BC", (function (param) {
                                      var cpu = Cpu$GameboyEmulator.wC(0, Cpu$GameboyEmulator.wB(1, Cpu$GameboyEmulator.make(/* () */0)));
                                      var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                                      var gpu = Gpu$GameboyEmulator.make(/* () */0);
                                      var cpu1 = Curry._1(Cpu_ops$GameboyEmulator.Ops.Decrement16.dec_bc, /* record */[
                                              /* cpu */cpu,
                                              /* mmu */mmu,
                                              /* gpu */gpu
                                            ])[/* cpu */0];
                                      return Jest.Expect.toEqual(/* tuple */[
                                                  255,
                                                  0,
                                                  255
                                                ], Jest.Expect.expect(/* tuple */[
                                                      Cpu$GameboyEmulator.rBc(cpu1),
                                                      cpu1[/* registers */3][/* b */1],
                                                      cpu1[/* registers */3][/* c */2]
                                                    ]));
                                    }));
                              Jest.test("DEC DE", (function (param) {
                                      var cpu = Cpu$GameboyEmulator.wE(0, Cpu$GameboyEmulator.wD(1, Cpu$GameboyEmulator.make(/* () */0)));
                                      var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                                      var gpu = Gpu$GameboyEmulator.make(/* () */0);
                                      var cpu1 = Curry._1(Cpu_ops$GameboyEmulator.Ops.Decrement16.dec_de, /* record */[
                                              /* cpu */cpu,
                                              /* mmu */mmu,
                                              /* gpu */gpu
                                            ])[/* cpu */0];
                                      return Jest.Expect.toEqual(/* tuple */[
                                                  255,
                                                  0,
                                                  255
                                                ], Jest.Expect.expect(/* tuple */[
                                                      Cpu$GameboyEmulator.rDe(cpu1),
                                                      cpu1[/* registers */3][/* d */3],
                                                      cpu1[/* registers */3][/* e */4]
                                                    ]));
                                    }));
                              return Jest.test("DEC HL", (function (param) {
                                            var cpu = Cpu$GameboyEmulator.wL(0, Cpu$GameboyEmulator.wH(1, Cpu$GameboyEmulator.make(/* () */0)));
                                            var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                                            var gpu = Gpu$GameboyEmulator.make(/* () */0);
                                            var cpu1 = Curry._1(Cpu_ops$GameboyEmulator.Ops.Decrement16.dec_hl, /* record */[
                                                    /* cpu */cpu,
                                                    /* mmu */mmu,
                                                    /* gpu */gpu
                                                  ])[/* cpu */0];
                                            return Jest.Expect.toEqual(/* tuple */[
                                                        255,
                                                        0,
                                                        255
                                                      ], Jest.Expect.expect(/* tuple */[
                                                            Cpu$GameboyEmulator.rHl(cpu1),
                                                            cpu1[/* registers */3][/* h */5],
                                                            cpu1[/* registers */3][/* l */6]
                                                          ]));
                                          }));
                            }));
                      Jest.describe("Add", (function (param) {
                              Jest.test("updates the register", (function (param) {
                                      var cpu = Cpu$GameboyEmulator.wC(220, Cpu$GameboyEmulator.wB(2, Cpu$GameboyEmulator.wL(0, Cpu$GameboyEmulator.wH(1, Cpu$GameboyEmulator.make(/* () */0)))));
                                      var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                                      var gpu = Gpu$GameboyEmulator.make(/* () */0);
                                      var cpu1 = Curry._1(Cpu_ops$GameboyEmulator.Ops.Add_16.add_hl_bc, /* record */[
                                              /* cpu */cpu,
                                              /* mmu */mmu,
                                              /* gpu */gpu
                                            ])[/* cpu */0];
                                      return Jest.Expect.toEqual(988, Jest.Expect.expect(Cpu$GameboyEmulator.rHl(cpu1)));
                                    }));
                              Jest.test("sets the half-carry flag", (function (param) {
                                      var cpu = Cpu$GameboyEmulator.writeRegister16(/* BC */1, 3, Cpu$GameboyEmulator.writeRegister16(/* HL */3, 14, Cpu$GameboyEmulator.make(/* () */0)));
                                      var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                                      var gpu = Gpu$GameboyEmulator.make(/* () */0);
                                      var cpu1 = Curry._1(Cpu_ops$GameboyEmulator.Ops.Add_16.add_hl_bc, /* record */[
                                              /* cpu */cpu,
                                              /* mmu */mmu,
                                              /* gpu */gpu
                                            ])[/* cpu */0];
                                      return Jest.Expect.toEqual(32, Jest.Expect.expect(Cpu$GameboyEmulator.getFlag(/* H */2, cpu1)));
                                    }));
                              return Jest.test("sets the carry flag", (function (param) {
                                            var cpu = Cpu$GameboyEmulator.writeRegister16(/* BC */1, 120, Cpu$GameboyEmulator.writeRegister16(/* HL */3, 65535, Cpu$GameboyEmulator.make(/* () */0)));
                                            var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                                            var gpu = Gpu$GameboyEmulator.make(/* () */0);
                                            var cpu1 = Curry._1(Cpu_ops$GameboyEmulator.Ops.Add_16.add_hl_bc, /* record */[
                                                    /* cpu */cpu,
                                                    /* mmu */mmu,
                                                    /* gpu */gpu
                                                  ])[/* cpu */0];
                                            return Jest.Expect.toEqual(16, Jest.Expect.expect(Cpu$GameboyEmulator.getFlag(/* C */3, cpu1)));
                                          }));
                            }));
                      Jest.describe("Push/Pop", (function (param) {
                              var initialValues = function (param) {
                                var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                                var gpu = Gpu$GameboyEmulator.make(/* () */0);
                                return /* tuple */[
                                        mmu,
                                        gpu
                                      ];
                              };
                              var generateTest = function (description, register, push, pop, read) {
                                return Jest.describe(description, (function (param) {
                                              Jest.test("Push decrements the stack pointer", (function (param) {
                                                      var match = initialValues(/* () */0);
                                                      var cpu = Cpu$GameboyEmulator.setSp(34048, Cpu$GameboyEmulator.writeRegister16(register, 10, Cpu$GameboyEmulator.make(/* () */0)));
                                                      var s = Curry._1(push, /* record */[
                                                            /* cpu */cpu,
                                                            /* mmu */match[0],
                                                            /* gpu */match[1]
                                                          ]);
                                                      return Jest.Expect.toBe(34046, Jest.Expect.expect(s[/* cpu */0][/* registers */3][/* sp */8]));
                                                    }));
                                              Jest.test("Pop increments the stack pointer", (function (param) {
                                                      var match = initialValues(/* () */0);
                                                      var cpu = Cpu$GameboyEmulator.setSp(34048, Cpu$GameboyEmulator.writeRegister16(register, 10, Cpu$GameboyEmulator.make(/* () */0)));
                                                      var s = Curry._1(pop, /* record */[
                                                            /* cpu */cpu,
                                                            /* mmu */match[0],
                                                            /* gpu */match[1]
                                                          ]);
                                                      return Jest.Expect.toBe(34050, Jest.Expect.expect(s[/* cpu */0][/* registers */3][/* sp */8]));
                                                    }));
                                              return Jest.test("Pushes and pops the value", (function (param) {
                                                            var match = initialValues(/* () */0);
                                                            var cpu = Cpu$GameboyEmulator.setSp(34048, Cpu$GameboyEmulator.writeRegister16(register, 10, Cpu$GameboyEmulator.make(/* () */0)));
                                                            var s = Curry._1(push, /* record */[
                                                                  /* cpu */cpu,
                                                                  /* mmu */match[0],
                                                                  /* gpu */match[1]
                                                                ]);
                                                            var cpu$1 = Cpu$GameboyEmulator.writeRegister16(register, 65535, s[/* cpu */0]);
                                                            var cpu$2 = Curry._1(pop, /* record */[
                                                                    /* cpu */cpu$1,
                                                                    /* mmu */s[/* mmu */1],
                                                                    /* gpu */s[/* gpu */2]
                                                                  ])[/* cpu */0];
                                                            var value = Curry._1(read, cpu$2);
                                                            var sp = cpu$2[/* registers */3][/* sp */8];
                                                            return Jest.Expect.toEqual(/* tuple */[
                                                                        10,
                                                                        34048
                                                                      ], Jest.Expect.expect(/* tuple */[
                                                                            value,
                                                                            sp
                                                                          ]));
                                                          }));
                                            }));
                              };
                              generateTest("AF", /* AF */0, Cpu_ops$GameboyEmulator.Ops.Push.push_af, Cpu_ops$GameboyEmulator.Ops.Pop.pop_af, Cpu$GameboyEmulator.rAf);
                              generateTest("BC", /* BC */1, Cpu_ops$GameboyEmulator.Ops.Push.push_bc, Cpu_ops$GameboyEmulator.Ops.Pop.pop_bc, Cpu$GameboyEmulator.rBc);
                              generateTest("DE", /* DE */2, Cpu_ops$GameboyEmulator.Ops.Push.push_de, Cpu_ops$GameboyEmulator.Ops.Pop.pop_de, Cpu$GameboyEmulator.rDe);
                              return generateTest("HL", /* HL */3, Cpu_ops$GameboyEmulator.Ops.Push.push_hl, Cpu_ops$GameboyEmulator.Ops.Pop.pop_hl, Cpu$GameboyEmulator.rHl);
                            }));
                      Jest.describe("AND", (function (param) {
                              var initialValues = function (param) {
                                return /* tuple */[
                                        Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0)),
                                        Gpu$GameboyEmulator.make(/* () */0)
                                      ];
                              };
                              Jest.test("A", (function (param) {
                                      var match = initialValues(/* () */0);
                                      var cpu = Cpu$GameboyEmulator.wA(85, Cpu$GameboyEmulator.make(/* () */0));
                                      var cpu1 = Curry._1(Cpu_ops$GameboyEmulator.Ops.And.and_a, /* record */[
                                              /* cpu */cpu,
                                              /* mmu */match[0],
                                              /* gpu */match[1]
                                            ])[/* cpu */0];
                                      return Jest.Expect.toBe(85, Jest.Expect.expect(cpu1[/* registers */3][/* a */0]));
                                    }));
                              Jest.test("B", (function (param) {
                                      var match = initialValues(/* () */0);
                                      var cpu = Cpu$GameboyEmulator.wB(137, Cpu$GameboyEmulator.wA(85, Cpu$GameboyEmulator.make(/* () */0)));
                                      var cpu1 = Curry._1(Cpu_ops$GameboyEmulator.Ops.And.and_b, /* record */[
                                              /* cpu */cpu,
                                              /* mmu */match[0],
                                              /* gpu */match[1]
                                            ])[/* cpu */0];
                                      return Jest.Expect.toBe(1, Jest.Expect.expect(cpu1[/* registers */3][/* a */0]));
                                    }));
                              return Jest.test("C", (function (param) {
                                            var match = initialValues(/* () */0);
                                            var cpu = Cpu$GameboyEmulator.wC(137, Cpu$GameboyEmulator.wA(85, Cpu$GameboyEmulator.make(/* () */0)));
                                            var cpu1 = Curry._1(Cpu_ops$GameboyEmulator.Ops.And.and_c, /* record */[
                                                    /* cpu */cpu,
                                                    /* mmu */match[0],
                                                    /* gpu */match[1]
                                                  ])[/* cpu */0];
                                            return Jest.Expect.toBe(1, Jest.Expect.expect(cpu1[/* registers */3][/* a */0]));
                                          }));
                            }));
                      Jest.describe("LD_B_N", (function (param) {
                              Jest.test("B", (function (param) {
                                      var match = initialValues(/* () */0);
                                      var cpu = Cpu$GameboyEmulator.setPc(57344, Cpu$GameboyEmulator.make(/* () */0));
                                      var match$1 = Mmu$GameboyEmulator.write8(57344, 64, /* record */[
                                            /* gpu */match[1],
                                            /* mmu */match[0]
                                          ]);
                                      var gpu = match$1[1];
                                      var mmu = match$1[0];
                                      var cpu1 = Curry._1(Cpu_ops$GameboyEmulator.Ops.Load_nn_8.ld_b_n, /* record */[
                                              /* cpu */cpu,
                                              /* mmu */mmu,
                                              /* gpu */gpu
                                            ])[/* cpu */0];
                                      var cpu2 = Curry._2(Cpu_ops$GameboyEmulator.Ops.Load_nn_8.load_nn_8, /* C */2, /* record */[
                                              /* cpu */cpu,
                                              /* mmu */mmu,
                                              /* gpu */gpu
                                            ])[/* cpu */0];
                                      return Jest.Expect.toEqual(cpu2, Jest.Expect.expect(cpu1));
                                    }));
                              Jest.test("B", (function (param) {
                                      var match = initialValues(/* () */0);
                                      var cpu = Cpu$GameboyEmulator.setPc(57344, Cpu$GameboyEmulator.make(/* () */0));
                                      var match$1 = Mmu$GameboyEmulator.write8(57344, 64, /* record */[
                                            /* gpu */match[1],
                                            /* mmu */match[0]
                                          ]);
                                      var cpu1 = Curry._1(Cpu_ops$GameboyEmulator.Ops.Load_nn_8.ld_b_n, /* record */[
                                              /* cpu */cpu,
                                              /* mmu */match$1[0],
                                              /* gpu */match$1[1]
                                            ])[/* cpu */0];
                                      return Jest.Expect.toEqual(64, Jest.Expect.expect(cpu1[/* registers */3][/* b */1]));
                                    }));
                              return Jest.test("PC", (function (param) {
                                            var match = initialValues(/* () */0);
                                            var cpu = Cpu$GameboyEmulator.setPc(57344, Cpu$GameboyEmulator.make(/* () */0));
                                            var cpu1 = Curry._2(Cpu_ops$GameboyEmulator.Ops.Load_nn_8.load_nn_8, /* C */2, /* record */[
                                                    /* cpu */cpu,
                                                    /* mmu */match[0],
                                                    /* gpu */match[1]
                                                  ])[/* cpu */0];
                                            return Jest.Expect.toEqual(57345, Jest.Expect.expect(cpu1[/* registers */3][/* pc */9]));
                                          }));
                            }));
                      Jest.describe("Swap", (function (param) {
                              Jest.test("A", (function (param) {
                                      var match = initialValues(/* () */0);
                                      var cpu = Cpu$GameboyEmulator.wA(240, Cpu$GameboyEmulator.make(/* () */0));
                                      var cpu$1 = Cpu_cbops$GameboyEmulator.Swap.swap_a(/* record */[
                                              /* cpu */cpu,
                                              /* mmu */match[0],
                                              /* gpu */match[1]
                                            ])[/* cpu */0];
                                      return Jest.Expect.toBe(15, Jest.Expect.expect(cpu$1[/* registers */3][/* a */0]));
                                    }));
                              return Jest.test("B", (function (param) {
                                            var match = initialValues(/* () */0);
                                            var cpu = Cpu$GameboyEmulator.wB(242, Cpu$GameboyEmulator.make(/* () */0));
                                            var cpu$1 = Cpu_cbops$GameboyEmulator.Swap.swap_b(/* record */[
                                                    /* cpu */cpu,
                                                    /* mmu */match[0],
                                                    /* gpu */match[1]
                                                  ])[/* cpu */0];
                                            return Jest.Expect.toBe(47, Jest.Expect.expect(cpu$1[/* registers */3][/* b */1]));
                                          }));
                            }));
                      Jest.testAll("RLCA", /* :: */[
                            /* tuple */[
                              136,
                              17,
                              16
                            ],
                            /* :: */[
                              /* tuple */[
                                255,
                                255,
                                16
                              ],
                              /* :: */[
                                /* tuple */[
                                  1,
                                  2,
                                  0
                                ],
                                /* [] */0
                              ]
                            ]
                          ], (function (param) {
                              var cpu = Cpu$GameboyEmulator.wA(param[0], Cpu$GameboyEmulator.make(/* () */0));
                              var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                              var gpu = Gpu$GameboyEmulator.make(/* () */0);
                              var cpu1 = Curry._1(Cpu_ops$GameboyEmulator.Ops.Rotation.rlca, /* record */[
                                      /* cpu */cpu,
                                      /* mmu */mmu,
                                      /* gpu */gpu
                                    ])[/* cpu */0];
                              return Jest.Expect.toEqual(/* tuple */[
                                          param[1],
                                          param[2]
                                        ], Jest.Expect.expect(/* tuple */[
                                              cpu1[/* registers */3][/* a */0],
                                              Cpu$GameboyEmulator.getFlag(/* C */3, cpu1)
                                            ]));
                            }));
                      Jest.testAll("RLA", /* :: */[
                            /* tuple */[
                              136,
                              1,
                              17,
                              16
                            ],
                            /* :: */[
                              /* tuple */[
                                136,
                                0,
                                16,
                                16
                              ],
                              /* :: */[
                                /* tuple */[
                                  255,
                                  0,
                                  254,
                                  16
                                ],
                                /* :: */[
                                  /* tuple */[
                                    1,
                                    0,
                                    2,
                                    0
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      0,
                                      0,
                                      0,
                                      0
                                    ],
                                    /* [] */0
                                  ]
                                ]
                              ]
                            ]
                          ], (function (param) {
                              var inputCarry = param[1];
                              var cpu = (function (eta) {
                                    var param = undefined;
                                    var param$1 = eta;
                                    return Cpu$GameboyEmulator.setFlag(/* C */3, inputCarry, param, param$1);
                                  })(Cpu$GameboyEmulator.wA(param[0], Cpu$GameboyEmulator.make(/* () */0)));
                              var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                              var gpu = Gpu$GameboyEmulator.make(/* () */0);
                              var cpu1 = Curry._1(Cpu_ops$GameboyEmulator.Ops.Rotation.rla, /* record */[
                                      /* cpu */cpu,
                                      /* mmu */mmu,
                                      /* gpu */gpu
                                    ])[/* cpu */0];
                              return Jest.Expect.toEqual(/* tuple */[
                                          param[2],
                                          param[3],
                                          0
                                        ], Jest.Expect.expect(/* tuple */[
                                              cpu1[/* registers */3][/* a */0],
                                              Cpu$GameboyEmulator.getFlag(/* C */3, cpu1),
                                              Cpu$GameboyEmulator.getFlag(/* Z */0, cpu1)
                                            ]));
                            }));
                      Jest.testAll("RL n", /* :: */[
                            /* tuple */[
                              136,
                              1,
                              17,
                              16,
                              0
                            ],
                            /* :: */[
                              /* tuple */[
                                136,
                                0,
                                16,
                                16,
                                0
                              ],
                              /* :: */[
                                /* tuple */[
                                  255,
                                  0,
                                  254,
                                  16,
                                  0
                                ],
                                /* :: */[
                                  /* tuple */[
                                    1,
                                    0,
                                    2,
                                    0,
                                    0
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      0,
                                      0,
                                      0,
                                      0,
                                      128
                                    ],
                                    /* [] */0
                                  ]
                                ]
                              ]
                            ]
                          ], (function (param) {
                              var inputCarry = param[1];
                              var cpu = (function (eta) {
                                    var param = undefined;
                                    var param$1 = eta;
                                    return Cpu$GameboyEmulator.setFlag(/* C */3, inputCarry, param, param$1);
                                  })(Cpu$GameboyEmulator.wA(param[0], Cpu$GameboyEmulator.make(/* () */0)));
                              var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                              var gpu = Gpu$GameboyEmulator.make(/* () */0);
                              var cpu1 = Cpu_cbops$GameboyEmulator.Rl.rl_a(/* record */[
                                      /* cpu */cpu,
                                      /* mmu */mmu,
                                      /* gpu */gpu
                                    ])[/* cpu */0];
                              return Jest.Expect.toEqual(/* tuple */[
                                          param[2],
                                          param[3],
                                          param[4]
                                        ], Jest.Expect.expect(/* tuple */[
                                              cpu1[/* registers */3][/* a */0],
                                              Cpu$GameboyEmulator.getFlag(/* C */3, cpu1),
                                              Cpu$GameboyEmulator.getFlag(/* Z */0, cpu1)
                                            ]));
                            }));
                      return Jest.describe("Bit", (function (param) {
                                    Jest.testAll("Bit0a", /* :: */[
                                          /* tuple */[
                                            137,
                                            128
                                          ],
                                          /* :: */[
                                            /* tuple */[
                                              136,
                                              0
                                            ],
                                            /* [] */0
                                          ]
                                        ], (function (param) {
                                            var cpu = Cpu$GameboyEmulator.wA(param[0], Cpu$GameboyEmulator.make(/* () */0));
                                            var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                                            var gpu = Gpu$GameboyEmulator.make(/* () */0);
                                            var cpu1 = Curry._1(Cpu_cbops$GameboyEmulator.Bit.Bit0.bit_a, /* record */[
                                                    /* cpu */cpu,
                                                    /* mmu */mmu,
                                                    /* gpu */gpu
                                                  ])[/* cpu */0];
                                            return Jest.Expect.toEqual(/* tuple */[
                                                        param[1],
                                                        0,
                                                        32
                                                      ], Jest.Expect.expect(/* tuple */[
                                                            Cpu$GameboyEmulator.getFlag(/* Z */0, cpu1),
                                                            Cpu$GameboyEmulator.getFlag(/* N */1, cpu1),
                                                            Cpu$GameboyEmulator.getFlag(/* H */2, cpu1)
                                                          ]));
                                          }));
                                    return Jest.testAll("Bit1a", /* :: */[
                                                /* tuple */[
                                                  136,
                                                  0
                                                ],
                                                /* :: */[
                                                  /* tuple */[
                                                    138,
                                                    128
                                                  ],
                                                  /* [] */0
                                                ]
                                              ], (function (param) {
                                                  var cpu = Cpu$GameboyEmulator.wA(param[0], Cpu$GameboyEmulator.make(/* () */0));
                                                  var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                                                  var gpu = Gpu$GameboyEmulator.make(/* () */0);
                                                  var cpu1 = Curry._1(Cpu_cbops$GameboyEmulator.Bit.Bit1.bit_a, /* record */[
                                                          /* cpu */cpu,
                                                          /* mmu */mmu,
                                                          /* gpu */gpu
                                                        ])[/* cpu */0];
                                                  return Jest.Expect.toEqual(/* tuple */[
                                                              param[1],
                                                              0,
                                                              32
                                                            ], Jest.Expect.expect(/* tuple */[
                                                                  Cpu$GameboyEmulator.getFlag(/* Z */0, cpu1),
                                                                  Cpu$GameboyEmulator.getFlag(/* N */1, cpu1),
                                                                  Cpu$GameboyEmulator.getFlag(/* H */2, cpu1)
                                                                ]));
                                                }));
                                  }));
                    }));
      }));

/*  Not a pure module */
