// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/lib/js/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Cpu$GameboyEmulator = require("../src/Cpu.bs.js");
var Gpu$GameboyEmulator = require("../src/Gpu.bs.js");
var Mmu$GameboyEmulator = require("../src/Mmu.bs.js");

Jest.describe("Cpu", (function (param) {
        Jest.describe("Flags", (function (param) {
                Jest.testAll("Setting flags", /* :: */[
                      /* tuple */[
                        /* Z */0,
                        128
                      ],
                      /* :: */[
                        /* tuple */[
                          /* N */1,
                          64
                        ],
                        /* :: */[
                          /* tuple */[
                            /* H */2,
                            32
                          ],
                          /* :: */[
                            /* tuple */[
                              /* C */3,
                              16
                            ],
                            /* [] */0
                          ]
                        ]
                      ]
                    ], (function (param) {
                        var flag = param[0];
                        var cpu = (function (eta) {
                              var param = undefined;
                              var param$1 = eta;
                              return Cpu$GameboyEmulator.setFlag(flag, 1, param, param$1);
                            })(Cpu$GameboyEmulator.make(/* () */0));
                        return Jest.Expect[/* toBe */2](param[1], Jest.Expect[/* expect */0](Cpu$GameboyEmulator.getFlag(flag, cpu)));
                      }));
                return Jest.test("Setting a flag with an initial value", (function (param) {
                              var cpu = Cpu$GameboyEmulator.setFlag(/* Z */0, 1, 16, Cpu$GameboyEmulator.make(/* () */0));
                              return Jest.Expect[/* toBe */2](144, Jest.Expect[/* expect */0](cpu[/* registers */1][/* f */7]));
                            }));
              }));
        return Jest.describe("Ops", (function (param) {
                      Jest.test("INC BC", (function (param) {
                              var eta = Cpu$GameboyEmulator.make(/* () */0);
                              var cpu = Curry._5((function (param, param$1) {
                                        return Curry._3(Cpu$GameboyEmulator.setRegisters, param, param$1, 255);
                                      })(undefined, undefined), undefined, undefined, undefined, undefined, eta);
                              var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                              var gpu = Gpu$GameboyEmulator.make(/* () */0);
                              var cpu1 = Cpu$GameboyEmulator.Ops[/* inc_bc */4](/* record */[
                                      /* cpu */cpu,
                                      /* mmu */mmu,
                                      /* gpu */gpu
                                    ])[/* cpu */0];
                              return Jest.Expect[/* toEqual */12](/* tuple */[
                                          256,
                                          1,
                                          0
                                        ], Jest.Expect[/* expect */0](/* tuple */[
                                              Cpu$GameboyEmulator.rBc(cpu1),
                                              cpu1[/* registers */1][/* b */1],
                                              cpu1[/* registers */1][/* c */2]
                                            ]));
                            }));
                      Jest.testAll("RLCA", /* :: */[
                            /* tuple */[
                              136,
                              17,
                              16
                            ],
                            /* :: */[
                              /* tuple */[
                                255,
                                255,
                                16
                              ],
                              /* :: */[
                                /* tuple */[
                                  1,
                                  2,
                                  0
                                ],
                                /* [] */0
                              ]
                            ]
                          ], (function (param) {
                              var partial_arg = param[0];
                              var cpu = (function (eta) {
                                    var param = undefined;
                                    var param$1 = undefined;
                                    var param$2 = undefined;
                                    var param$3 = undefined;
                                    var param$4 = undefined;
                                    var param$5 = undefined;
                                    var param$6 = eta;
                                    return Cpu$GameboyEmulator.setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6);
                                  })(Cpu$GameboyEmulator.make(/* () */0));
                              var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                              var gpu = Gpu$GameboyEmulator.make(/* () */0);
                              var cpu1 = Cpu$GameboyEmulator.Ops[/* rlca */8](/* record */[
                                      /* cpu */cpu,
                                      /* mmu */mmu,
                                      /* gpu */gpu
                                    ])[/* cpu */0];
                              return Jest.Expect[/* toEqual */12](/* tuple */[
                                          param[1],
                                          param[2]
                                        ], Jest.Expect[/* expect */0](/* tuple */[
                                              cpu1[/* registers */1][/* a */0],
                                              Cpu$GameboyEmulator.getFlag(/* C */3, cpu1)
                                            ]));
                            }));
                      return Jest.describe("INC B", (function (param) {
                                    Jest.test("increments register b", (function (param) {
                                            var c = Cpu$GameboyEmulator.make(/* () */0);
                                            var init = c[/* registers */1];
                                            var cpu = /* record */[
                                              /* clock */c[/* clock */0],
                                              /* registers : record */[
                                                /* a */init[/* a */0],
                                                /* b */9,
                                                /* c */init[/* c */2],
                                                /* d */init[/* d */3],
                                                /* e */init[/* e */4],
                                                /* h */init[/* h */5],
                                                /* l */init[/* l */6],
                                                /* f */init[/* f */7],
                                                /* sp */init[/* sp */8],
                                                /* pc */init[/* pc */9],
                                                /* mCycles */init[/* mCycles */10]
                                              ]
                                            ];
                                            var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                                            var gpu = Gpu$GameboyEmulator.make(/* () */0);
                                            var cpu1 = Cpu$GameboyEmulator.Ops[/* inc_b */5](/* record */[
                                                    /* cpu */cpu,
                                                    /* mmu */mmu,
                                                    /* gpu */gpu
                                                  ])[/* cpu */0];
                                            return Jest.Expect[/* toEqual */12](10, Jest.Expect[/* expect */0](cpu1[/* registers */1][/* b */1]));
                                          }));
                                    return Jest.test("updates the carry flag", (function (param) {
                                                  var c = Cpu$GameboyEmulator.make(/* () */0);
                                                  var init = c[/* registers */1];
                                                  var cpu = /* record */[
                                                    /* clock */c[/* clock */0],
                                                    /* registers : record */[
                                                      /* a */init[/* a */0],
                                                      /* b */255,
                                                      /* c */init[/* c */2],
                                                      /* d */init[/* d */3],
                                                      /* e */init[/* e */4],
                                                      /* h */init[/* h */5],
                                                      /* l */init[/* l */6],
                                                      /* f */init[/* f */7],
                                                      /* sp */init[/* sp */8],
                                                      /* pc */init[/* pc */9],
                                                      /* mCycles */init[/* mCycles */10]
                                                    ]
                                                  ];
                                                  var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                                                  var gpu = Gpu$GameboyEmulator.make(/* () */0);
                                                  var cpu1 = Cpu$GameboyEmulator.Ops[/* inc_b */5](/* record */[
                                                          /* cpu */cpu,
                                                          /* mmu */mmu,
                                                          /* gpu */gpu
                                                        ])[/* cpu */0];
                                                  return Jest.Expect[/* toEqual */12](/* tuple */[
                                                              0,
                                                              128
                                                            ], Jest.Expect[/* expect */0](/* tuple */[
                                                                  cpu1[/* registers */1][/* b */1],
                                                                  cpu1[/* registers */1][/* f */7]
                                                                ]));
                                                }));
                                  }));
                    }));
      }));

/*  Not a pure module */
