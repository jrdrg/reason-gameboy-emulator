// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/lib/js/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Cpu$GameboyEmulator = require("../src/Cpu.bs.js");
var Gpu$GameboyEmulator = require("../src/Gpu.bs.js");
var Mmu$GameboyEmulator = require("../src/Mmu.bs.js");

Jest.describe("Cpu", (function (param) {
        Jest.describe("Signed", (function (param) {
                Jest.testAll("returns a positive number if it is < 127", /* :: */[
                      /* tuple */[
                        1,
                        1
                      ],
                      /* :: */[
                        /* tuple */[
                          65,
                          65
                        ],
                        /* :: */[
                          /* tuple */[
                            127,
                            127
                          ],
                          /* :: */[
                            /* tuple */[
                              0,
                              0
                            ],
                            /* [] */0
                          ]
                        ]
                      ]
                    ], (function (param) {
                        var s = Cpu$GameboyEmulator.signed(param[0]);
                        return Jest.Expect[/* toBe */2](param[1], Jest.Expect[/* expect */0](s));
                      }));
                return Jest.testAll("returns a negative number if it is > 127", /* :: */[
                            /* tuple */[
                              128,
                              -128
                            ],
                            /* :: */[
                              /* tuple */[
                                129,
                                -127
                              ],
                              /* [] */0
                            ]
                          ], (function (param) {
                              var s = Cpu$GameboyEmulator.signed(param[0]);
                              return Jest.Expect[/* toBe */2](param[1], Jest.Expect[/* expect */0](s));
                            }));
              }));
        return Jest.describe("Ops", (function (param) {
                      Jest.describe("Increment", (function (param) {
                              var makeState = function ($staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, $staropt$star$4, param) {
                                var a = $staropt$star !== undefined ? $staropt$star : 0;
                                var b = $staropt$star$1 !== undefined ? $staropt$star$1 : 0;
                                var c = $staropt$star$2 !== undefined ? $staropt$star$2 : 0;
                                var d = $staropt$star$3 !== undefined ? $staropt$star$3 : 0;
                                var e = $staropt$star$4 !== undefined ? $staropt$star$4 : 0;
                                var cpu = Cpu$GameboyEmulator.make(/* () */0);
                                var partial_arg = e;
                                var partial_arg$1 = d;
                                var partial_arg$2 = c;
                                var partial_arg$3 = b;
                                var partial_arg$4 = a;
                                var cpu$1 = (function (eta) {
                                      var param = undefined;
                                      var param$1 = undefined;
                                      var param$2 = undefined;
                                      var param$3 = eta;
                                      return Cpu$GameboyEmulator.setRegisters(partial_arg$4, partial_arg$3, partial_arg$2, partial_arg$1, partial_arg, param, param$1, param$2, param$3);
                                    })(cpu);
                                var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                                var gpu = Gpu$GameboyEmulator.make(/* () */0);
                                return /* tuple */[
                                        cpu$1,
                                        mmu,
                                        gpu
                                      ];
                              };
                              Jest.describe("INC B", (function (param) {
                                      Jest.test("increments register b", (function (param) {
                                              var match = makeState(undefined, 9, undefined, undefined, undefined, /* () */0);
                                              var cpu1 = Curry._1(Cpu$GameboyEmulator.Ops[/* Increment8 */8][/* inc_b */2], /* record */[
                                                      /* cpu */match[0],
                                                      /* mmu */match[1],
                                                      /* gpu */match[2]
                                                    ])[/* cpu */0];
                                              return Jest.Expect[/* toEqual */12](10, Jest.Expect[/* expect */0](cpu1[/* registers */2][/* b */1]));
                                            }));
                                      return Jest.test("updates the carry flag", (function (param) {
                                                    var match = makeState(undefined, 255, undefined, undefined, undefined, /* () */0);
                                                    var cpu1 = Curry._1(Cpu$GameboyEmulator.Ops[/* Increment8 */8][/* inc_b */2], /* record */[
                                                            /* cpu */match[0],
                                                            /* mmu */match[1],
                                                            /* gpu */match[2]
                                                          ])[/* cpu */0];
                                                    return Jest.Expect[/* toEqual */12](/* tuple */[
                                                                0,
                                                                128
                                                              ], Jest.Expect[/* expect */0](/* tuple */[
                                                                    cpu1[/* registers */2][/* b */1],
                                                                    cpu1[/* registers */2][/* f */7]
                                                                  ]));
                                                  }));
                                    }));
                              Jest.describe("INC C", (function (param) {
                                      Jest.test("increments register c", (function (param) {
                                              var match = makeState(undefined, undefined, 9, undefined, undefined, /* () */0);
                                              var cpu1 = Curry._1(Cpu$GameboyEmulator.Ops[/* Increment8 */8][/* inc_c */3], /* record */[
                                                      /* cpu */match[0],
                                                      /* mmu */match[1],
                                                      /* gpu */match[2]
                                                    ])[/* cpu */0];
                                              return Jest.Expect[/* toEqual */12](10, Jest.Expect[/* expect */0](cpu1[/* registers */2][/* c */2]));
                                            }));
                                      return Jest.test("updates the carry flag", (function (param) {
                                                    var match = makeState(undefined, undefined, 255, undefined, undefined, /* () */0);
                                                    var cpu1 = Curry._1(Cpu$GameboyEmulator.Ops[/* Increment8 */8][/* inc_c */3], /* record */[
                                                            /* cpu */match[0],
                                                            /* mmu */match[1],
                                                            /* gpu */match[2]
                                                          ])[/* cpu */0];
                                                    return Jest.Expect[/* toEqual */12](/* tuple */[
                                                                0,
                                                                128
                                                              ], Jest.Expect[/* expect */0](/* tuple */[
                                                                    cpu1[/* registers */2][/* c */2],
                                                                    cpu1[/* registers */2][/* f */7]
                                                                  ]));
                                                  }));
                                    }));
                              Jest.test("INC BC", (function (param) {
                                      var match = makeState(undefined, undefined, 255, undefined, undefined, /* () */0);
                                      var cpu1 = Curry._1(Cpu$GameboyEmulator.Ops[/* Increment16 */7][/* inc_bc */0], /* record */[
                                              /* cpu */match[0],
                                              /* mmu */match[1],
                                              /* gpu */match[2]
                                            ])[/* cpu */0];
                                      return Jest.Expect[/* toEqual */12](/* tuple */[
                                                  256,
                                                  1,
                                                  0
                                                ], Jest.Expect[/* expect */0](/* tuple */[
                                                      Cpu$GameboyEmulator.rBc(cpu1),
                                                      cpu1[/* registers */2][/* b */1],
                                                      cpu1[/* registers */2][/* c */2]
                                                    ]));
                                    }));
                              Jest.test("INC DE", (function (param) {
                                      var eta = Cpu$GameboyEmulator.make(/* () */0);
                                      var cpu = Curry._4((function (param, param$1, param$2, param$3) {
                                                return Curry._5(Cpu$GameboyEmulator.setRegisters, param, param$1, param$2, param$3, 255);
                                              })(undefined, undefined, undefined, undefined), undefined, undefined, undefined, eta);
                                      var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                                      var gpu = Gpu$GameboyEmulator.make(/* () */0);
                                      var cpu1 = Curry._1(Cpu$GameboyEmulator.Ops[/* Increment16 */7][/* inc_de */1], /* record */[
                                              /* cpu */cpu,
                                              /* mmu */mmu,
                                              /* gpu */gpu
                                            ])[/* cpu */0];
                                      return Jest.Expect[/* toEqual */12](/* tuple */[
                                                  256,
                                                  1,
                                                  0
                                                ], Jest.Expect[/* expect */0](/* tuple */[
                                                      Cpu$GameboyEmulator.rDe(cpu1),
                                                      cpu1[/* registers */2][/* d */3],
                                                      cpu1[/* registers */2][/* e */4]
                                                    ]));
                                    }));
                              return Jest.test("INC HL", (function (param) {
                                            var eta = Cpu$GameboyEmulator.make(/* () */0);
                                            var cpu = Curry._2((function (param, param$1, param$2, param$3, param$4, param$5) {
                                                      return Curry._7(Cpu$GameboyEmulator.setRegisters, param, param$1, param$2, param$3, param$4, param$5, 255);
                                                    })(undefined, undefined, undefined, undefined, undefined, undefined), undefined, eta);
                                            var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                                            var gpu = Gpu$GameboyEmulator.make(/* () */0);
                                            var cpu1 = Curry._1(Cpu$GameboyEmulator.Ops[/* Increment16 */7][/* inc_hl */2], /* record */[
                                                    /* cpu */cpu,
                                                    /* mmu */mmu,
                                                    /* gpu */gpu
                                                  ])[/* cpu */0];
                                            return Jest.Expect[/* toEqual */12](/* tuple */[
                                                        256,
                                                        1,
                                                        0
                                                      ], Jest.Expect[/* expect */0](/* tuple */[
                                                            Cpu$GameboyEmulator.rHl(cpu1),
                                                            cpu1[/* registers */2][/* h */5],
                                                            cpu1[/* registers */2][/* l */6]
                                                          ]));
                                          }));
                            }));
                      Jest.describe("Decrement", (function (param) {
                              Jest.test("DEC BC", (function (param) {
                                      var eta = Cpu$GameboyEmulator.make(/* () */0);
                                      var cpu = Curry._6((function (param) {
                                                return Curry._3(Cpu$GameboyEmulator.setRegisters, param, 1, 0);
                                              })(undefined), undefined, undefined, undefined, undefined, undefined, eta);
                                      var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                                      var gpu = Gpu$GameboyEmulator.make(/* () */0);
                                      var cpu1 = Curry._1(Cpu$GameboyEmulator.Ops[/* Decrement16 */10][/* dec_bc */0], /* record */[
                                              /* cpu */cpu,
                                              /* mmu */mmu,
                                              /* gpu */gpu
                                            ])[/* cpu */0];
                                      return Jest.Expect[/* toEqual */12](/* tuple */[
                                                  255,
                                                  0,
                                                  255
                                                ], Jest.Expect[/* expect */0](/* tuple */[
                                                      Cpu$GameboyEmulator.rBc(cpu1),
                                                      cpu1[/* registers */2][/* b */1],
                                                      cpu1[/* registers */2][/* c */2]
                                                    ]));
                                    }));
                              Jest.test("DEC DE", (function (param) {
                                      var eta = Cpu$GameboyEmulator.make(/* () */0);
                                      var cpu = Curry._4((function (param, param$1, param$2) {
                                                return Curry._5(Cpu$GameboyEmulator.setRegisters, param, param$1, param$2, 1, 0);
                                              })(undefined, undefined, undefined), undefined, undefined, undefined, eta);
                                      var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                                      var gpu = Gpu$GameboyEmulator.make(/* () */0);
                                      var cpu1 = Curry._1(Cpu$GameboyEmulator.Ops[/* Decrement16 */10][/* dec_de */1], /* record */[
                                              /* cpu */cpu,
                                              /* mmu */mmu,
                                              /* gpu */gpu
                                            ])[/* cpu */0];
                                      return Jest.Expect[/* toEqual */12](/* tuple */[
                                                  255,
                                                  0,
                                                  255
                                                ], Jest.Expect[/* expect */0](/* tuple */[
                                                      Cpu$GameboyEmulator.rDe(cpu1),
                                                      cpu1[/* registers */2][/* d */3],
                                                      cpu1[/* registers */2][/* e */4]
                                                    ]));
                                    }));
                              return Jest.test("DEC HL", (function (param) {
                                            var eta = Cpu$GameboyEmulator.make(/* () */0);
                                            var cpu = Curry._2((function (param, param$1, param$2, param$3, param$4) {
                                                      return Curry._7(Cpu$GameboyEmulator.setRegisters, param, param$1, param$2, param$3, param$4, 1, 0);
                                                    })(undefined, undefined, undefined, undefined, undefined), undefined, eta);
                                            var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                                            var gpu = Gpu$GameboyEmulator.make(/* () */0);
                                            var cpu1 = Curry._1(Cpu$GameboyEmulator.Ops[/* Decrement16 */10][/* dec_hl */2], /* record */[
                                                    /* cpu */cpu,
                                                    /* mmu */mmu,
                                                    /* gpu */gpu
                                                  ])[/* cpu */0];
                                            return Jest.Expect[/* toEqual */12](/* tuple */[
                                                        255,
                                                        0,
                                                        255
                                                      ], Jest.Expect[/* expect */0](/* tuple */[
                                                            Cpu$GameboyEmulator.rHl(cpu1),
                                                            cpu1[/* registers */2][/* h */5],
                                                            cpu1[/* registers */2][/* l */6]
                                                          ]));
                                          }));
                            }));
                      Jest.describe("Add", (function (param) {
                              Jest.test("updates the register", (function (param) {
                                      var eta = Cpu$GameboyEmulator.make(/* () */0);
                                      var cpu = Curry._2((function (param, param$1, param$2) {
                                                return Curry._7(Cpu$GameboyEmulator.setRegisters, param, 2, 220, param$1, param$2, 1, 0);
                                              })(undefined, undefined, undefined), undefined, eta);
                                      var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                                      var gpu = Gpu$GameboyEmulator.make(/* () */0);
                                      var cpu1 = Curry._1(Cpu$GameboyEmulator.Ops[/* Add_16 */16][/* add_hl_bc */3], /* record */[
                                              /* cpu */cpu,
                                              /* mmu */mmu,
                                              /* gpu */gpu
                                            ])[/* cpu */0];
                                      return Jest.Expect[/* toEqual */12](988, Jest.Expect[/* expect */0](Cpu$GameboyEmulator.rHl(cpu1)));
                                    }));
                              Jest.test("sets the half-carry flag", (function (param) {
                                      var cpu = Cpu$GameboyEmulator.writeRegister16(/* BC */1, 3, Cpu$GameboyEmulator.writeRegister16(/* HL */3, 14, Cpu$GameboyEmulator.make(/* () */0)));
                                      var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                                      var gpu = Gpu$GameboyEmulator.make(/* () */0);
                                      var cpu1 = Curry._1(Cpu$GameboyEmulator.Ops[/* Add_16 */16][/* add_hl_bc */3], /* record */[
                                              /* cpu */cpu,
                                              /* mmu */mmu,
                                              /* gpu */gpu
                                            ])[/* cpu */0];
                                      return Jest.Expect[/* toEqual */12](32, Jest.Expect[/* expect */0](Cpu$GameboyEmulator.getFlag(/* H */2, cpu1)));
                                    }));
                              return Jest.test("sets the carry flag", (function (param) {
                                            var cpu = Cpu$GameboyEmulator.writeRegister16(/* BC */1, 120, Cpu$GameboyEmulator.writeRegister16(/* HL */3, 65535, Cpu$GameboyEmulator.make(/* () */0)));
                                            var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                                            var gpu = Gpu$GameboyEmulator.make(/* () */0);
                                            var cpu1 = Curry._1(Cpu$GameboyEmulator.Ops[/* Add_16 */16][/* add_hl_bc */3], /* record */[
                                                    /* cpu */cpu,
                                                    /* mmu */mmu,
                                                    /* gpu */gpu
                                                  ])[/* cpu */0];
                                            return Jest.Expect[/* toEqual */12](16, Jest.Expect[/* expect */0](Cpu$GameboyEmulator.getFlag(/* C */3, cpu1)));
                                          }));
                            }));
                      Jest.describe("Push/Pop", (function (param) {
                              var initialValues = function (param) {
                                var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                                var gpu = Gpu$GameboyEmulator.make(/* () */0);
                                return /* tuple */[
                                        mmu,
                                        gpu
                                      ];
                              };
                              var generateTest = function (description, register, push, pop, read) {
                                return Jest.describe(description, (function (param) {
                                              Jest.test("Push decrements the stack pointer", (function (param) {
                                                      var match = initialValues(/* () */0);
                                                      var cpu = Cpu$GameboyEmulator.setSp(34048, Cpu$GameboyEmulator.writeRegister16(register, 10, Cpu$GameboyEmulator.make(/* () */0)));
                                                      var s = Curry._1(push, /* record */[
                                                            /* cpu */cpu,
                                                            /* mmu */match[0],
                                                            /* gpu */match[1]
                                                          ]);
                                                      return Jest.Expect[/* toBe */2](34046, Jest.Expect[/* expect */0](s[/* cpu */0][/* registers */2][/* sp */8]));
                                                    }));
                                              Jest.test("Pop increments the stack pointer", (function (param) {
                                                      var match = initialValues(/* () */0);
                                                      var cpu = Cpu$GameboyEmulator.setSp(34048, Cpu$GameboyEmulator.writeRegister16(register, 10, Cpu$GameboyEmulator.make(/* () */0)));
                                                      var s = Curry._1(pop, /* record */[
                                                            /* cpu */cpu,
                                                            /* mmu */match[0],
                                                            /* gpu */match[1]
                                                          ]);
                                                      return Jest.Expect[/* toBe */2](34050, Jest.Expect[/* expect */0](s[/* cpu */0][/* registers */2][/* sp */8]));
                                                    }));
                                              return Jest.test("Pushes and pops the value", (function (param) {
                                                            var match = initialValues(/* () */0);
                                                            var cpu = Cpu$GameboyEmulator.setSp(34048, Cpu$GameboyEmulator.writeRegister16(register, 10, Cpu$GameboyEmulator.make(/* () */0)));
                                                            var s = Curry._1(push, /* record */[
                                                                  /* cpu */cpu,
                                                                  /* mmu */match[0],
                                                                  /* gpu */match[1]
                                                                ]);
                                                            var cpu$1 = Cpu$GameboyEmulator.writeRegister16(register, 65535, s[/* cpu */0]);
                                                            var cpu$2 = Curry._1(pop, /* record */[
                                                                    /* cpu */cpu$1,
                                                                    /* mmu */s[/* mmu */1],
                                                                    /* gpu */s[/* gpu */2]
                                                                  ])[/* cpu */0];
                                                            var value = Curry._1(read, cpu$2);
                                                            var sp = cpu$2[/* registers */2][/* sp */8];
                                                            return Jest.Expect[/* toEqual */12](/* tuple */[
                                                                        10,
                                                                        34048
                                                                      ], Jest.Expect[/* expect */0](/* tuple */[
                                                                            value,
                                                                            sp
                                                                          ]));
                                                          }));
                                            }));
                              };
                              generateTest("AF", /* AF */0, Cpu$GameboyEmulator.Ops[/* Push */13][/* push_af */1], Cpu$GameboyEmulator.Ops[/* Pop */14][/* pop_af */1], Cpu$GameboyEmulator.rAf);
                              generateTest("BC", /* BC */1, Cpu$GameboyEmulator.Ops[/* Push */13][/* push_bc */2], Cpu$GameboyEmulator.Ops[/* Pop */14][/* pop_bc */2], Cpu$GameboyEmulator.rBc);
                              generateTest("DE", /* DE */2, Cpu$GameboyEmulator.Ops[/* Push */13][/* push_de */3], Cpu$GameboyEmulator.Ops[/* Pop */14][/* pop_de */3], Cpu$GameboyEmulator.rDe);
                              return generateTest("HL", /* HL */3, Cpu$GameboyEmulator.Ops[/* Push */13][/* push_hl */4], Cpu$GameboyEmulator.Ops[/* Pop */14][/* pop_hl */4], Cpu$GameboyEmulator.rHl);
                            }));
                      return Jest.testAll("RLCA", /* :: */[
                                  /* tuple */[
                                    136,
                                    17,
                                    16
                                  ],
                                  /* :: */[
                                    /* tuple */[
                                      255,
                                      255,
                                      16
                                    ],
                                    /* :: */[
                                      /* tuple */[
                                        1,
                                        2,
                                        0
                                      ],
                                      /* [] */0
                                    ]
                                  ]
                                ], (function (param) {
                                    var partial_arg = param[0];
                                    var cpu = (function (eta) {
                                          var param = undefined;
                                          var param$1 = undefined;
                                          var param$2 = undefined;
                                          var param$3 = undefined;
                                          var param$4 = undefined;
                                          var param$5 = undefined;
                                          var param$6 = undefined;
                                          var param$7 = eta;
                                          return Cpu$GameboyEmulator.setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                                        })(Cpu$GameboyEmulator.make(/* () */0));
                                    var mmu = Mmu$GameboyEmulator.load(Caml_array.caml_make_vect(4096, 0));
                                    var gpu = Gpu$GameboyEmulator.make(/* () */0);
                                    var cpu1 = Curry._1(Cpu$GameboyEmulator.Ops[/* Rotation */11][/* rlca */1], /* record */[
                                            /* cpu */cpu,
                                            /* mmu */mmu,
                                            /* gpu */gpu
                                          ])[/* cpu */0];
                                    return Jest.Expect[/* toEqual */12](/* tuple */[
                                                param[1],
                                                param[2]
                                              ], Jest.Expect[/* expect */0](/* tuple */[
                                                    cpu1[/* registers */2][/* a */0],
                                                    Cpu$GameboyEmulator.getFlag(/* C */3, cpu1)
                                                  ]));
                                  }));
                    }));
      }));

/*  Not a pure module */
