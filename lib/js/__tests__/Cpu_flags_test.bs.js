// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/lib/js/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Cpu$GameboyEmulator = require("../src/Cpu.bs.js");

Jest.describe("Cpu Flags", (function (param) {
        Jest.testAll("Setting flags", /* :: */[
              /* tuple */[
                /* Z */0,
                128
              ],
              /* :: */[
                /* tuple */[
                  /* N */1,
                  64
                ],
                /* :: */[
                  /* tuple */[
                    /* H */2,
                    32
                  ],
                  /* :: */[
                    /* tuple */[
                      /* C */3,
                      16
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ], (function (param) {
                var flag = param[0];
                var cpu = (function (eta) {
                      var param = undefined;
                      var param$1 = eta;
                      return Cpu$GameboyEmulator.setFlag(flag, 1, param, param$1);
                    })(Cpu$GameboyEmulator.make(/* () */0));
                return Jest.Expect[/* toBe */2](param[1], Jest.Expect[/* expect */0](Cpu$GameboyEmulator.getFlag(flag, cpu)));
              }));
        Jest.testAll("Setting a flag with an initial value", /* :: */[
              /* tuple */[
                /* Z */0,
                16,
                144
              ],
              /* :: */[
                /* tuple */[
                  /* N */1,
                  48,
                  112
                ],
                /* :: */[
                  /* tuple */[
                    /* H */2,
                    208,
                    240
                  ],
                  /* :: */[
                    /* tuple */[
                      /* C */3,
                      192,
                      208
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ], (function (param) {
                var cpu = Cpu$GameboyEmulator.setFlag(param[0], 1, param[1], Cpu$GameboyEmulator.make(/* () */0));
                return Jest.Expect[/* toBe */2](param[2], Jest.Expect[/* expect */0](cpu[/* registers */2][/* f */7]));
              }));
        return Jest.testAll("Getting a flag's value", /* :: */[
                    /* tuple */[
                      /* Z */0,
                      144,
                      1
                    ],
                    /* :: */[
                      /* tuple */[
                        /* Z */0,
                        96,
                        0
                      ],
                      /* :: */[
                        /* tuple */[
                          /* C */3,
                          240,
                          1
                        ],
                        /* :: */[
                          /* tuple */[
                            /* C */3,
                            160,
                            0
                          ],
                          /* [] */0
                        ]
                      ]
                    ]
                  ], (function (param) {
                      var eta = Cpu$GameboyEmulator.make(/* () */0);
                      var arg = param[1];
                      var cpu = Curry._1((function (param, param$1, param$2, param$3, param$4, param$5, param$6) {
                                return (function (param$7) {
                                    return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, param$4, param$5, param$6, arg, param$7);
                                  });
                              })(undefined, undefined, undefined, undefined, undefined, undefined, undefined), eta);
                      return Jest.Expect[/* toBe */2](param[2], Jest.Expect[/* expect */0](Cpu$GameboyEmulator.Flags[/* getFlag */6](param[0], cpu[/* registers */2][/* f */7])));
                    }));
      }));

/*  Not a pure module */
