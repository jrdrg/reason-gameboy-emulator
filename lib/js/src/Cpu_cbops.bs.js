// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Cpu$GameboyEmulator = require("./Cpu.bs.js");
var Cpu_types$GameboyEmulator = require("./Cpu_types.bs.js");

function swap(cpu, value) {
  var nibble1 = ((value & 240) >>> 4);
  var nibble2 = ((value & 15) << 4);
  var swapped = nibble1 + nibble2 | 0;
  var partial_arg = Cpu$GameboyEmulator.b2i(swapped === 0);
  return /* tuple */[
          swapped,
          (function (eta) {
                var param = undefined;
                var param$1 = eta;
                return Cpu$GameboyEmulator.setFlag(/* C */3, 0, param, param$1);
              })((function (eta) {
                    var param = undefined;
                    var param$1 = eta;
                    return Cpu$GameboyEmulator.setFlag(/* H */2, 0, param, param$1);
                  })((function (eta) {
                        var param = undefined;
                        var param$1 = eta;
                        return Cpu$GameboyEmulator.setFlag(/* N */1, 0, param, param$1);
                      })((function (eta) {
                            var param = undefined;
                            var param$1 = eta;
                            return Cpu$GameboyEmulator.setFlag(/* Z */0, partial_arg, param, param$1);
                          })(cpu))))
        ];
}

function swap_a(s) {
  var cpu = s[/* cpu */0];
  var match = swap(cpu, cpu[/* registers */2][/* a */0]);
  var partial_arg = match[0];
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, (function (eta) {
                      var param = undefined;
                      var param$1 = undefined;
                      var param$2 = undefined;
                      var param$3 = undefined;
                      var param$4 = undefined;
                      var param$5 = undefined;
                      var param$6 = undefined;
                      var param$7 = eta;
                      return Cpu$GameboyEmulator.setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                    })(match[1])), undefined, undefined, s);
}

function swap_b(s) {
  var cpu = s[/* cpu */0];
  var match = swap(cpu, cpu[/* registers */2][/* b */1]);
  var arg = match[0];
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, Curry._7((function (param) {
                          return (function (param$1, param$2, param$3, param$4, param$5, param$6, param$7) {
                              return Cpu$GameboyEmulator.setRegisters(param, arg, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                            });
                        })(undefined), undefined, undefined, undefined, undefined, undefined, undefined, match[1])), undefined, undefined, s);
}

function swap_c(s) {
  var cpu = s[/* cpu */0];
  var match = swap(cpu, cpu[/* registers */2][/* c */2]);
  var arg = match[0];
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, Curry._6((function (param, param$1) {
                          return (function (param$2, param$3, param$4, param$5, param$6, param$7) {
                              return Cpu$GameboyEmulator.setRegisters(param, param$1, arg, param$2, param$3, param$4, param$5, param$6, param$7);
                            });
                        })(undefined, undefined), undefined, undefined, undefined, undefined, undefined, match[1])), undefined, undefined, s);
}

function swap_d(s) {
  var cpu = s[/* cpu */0];
  var match = swap(cpu, cpu[/* registers */2][/* d */3]);
  var arg = match[0];
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, Curry._5((function (param, param$1, param$2) {
                          return (function (param$3, param$4, param$5, param$6, param$7) {
                              return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, arg, param$3, param$4, param$5, param$6, param$7);
                            });
                        })(undefined, undefined, undefined), undefined, undefined, undefined, undefined, match[1])), undefined, undefined, s);
}

var Swap = {
  swap: swap,
  swap_a: swap_a,
  swap_b: swap_b,
  swap_c: swap_c,
  swap_d: swap_d
};

exports.Swap = Swap;
/* No side effect */
