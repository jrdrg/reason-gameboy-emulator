// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Cpu$GameboyEmulator = require("./Cpu.bs.js");
var Mmu$GameboyEmulator = require("./Mmu.bs.js");
var Cpu_types$GameboyEmulator = require("./Cpu_types.bs.js");

function swap(cpu, value) {
  var nibble1 = ((value & 240) >>> 4);
  var nibble2 = ((value & 15) << 4);
  var swapped = nibble1 + nibble2 | 0;
  var partial_arg = Cpu$GameboyEmulator.b2i(swapped === 0);
  return /* tuple */[
          swapped,
          (function (eta) {
                var param = undefined;
                var param$1 = eta;
                return Cpu$GameboyEmulator.setFlag(/* C */3, 0, param, param$1);
              })((function (eta) {
                    var param = undefined;
                    var param$1 = eta;
                    return Cpu$GameboyEmulator.setFlag(/* H */2, 0, param, param$1);
                  })((function (eta) {
                        var param = undefined;
                        var param$1 = eta;
                        return Cpu$GameboyEmulator.setFlag(/* N */1, 0, param, param$1);
                      })((function (eta) {
                            var param = undefined;
                            var param$1 = eta;
                            return Cpu$GameboyEmulator.setFlag(/* Z */0, partial_arg, param, param$1);
                          })(cpu))))
        ];
}

function swap_a(s) {
  var cpu = s[/* cpu */0];
  var match = swap(cpu, cpu[/* registers */3][/* a */0]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, Cpu$GameboyEmulator.wA(match[0], match[1])), undefined, undefined, s);
}

function swap_b(s) {
  var cpu = s[/* cpu */0];
  var match = swap(cpu, cpu[/* registers */3][/* b */1]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, Cpu$GameboyEmulator.wB(match[0], match[1])), undefined, undefined, s);
}

function swap_c(s) {
  var cpu = s[/* cpu */0];
  var match = swap(cpu, cpu[/* registers */3][/* c */2]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, Cpu$GameboyEmulator.wC(match[0], match[1])), undefined, undefined, s);
}

function swap_d(s) {
  var cpu = s[/* cpu */0];
  var match = swap(cpu, cpu[/* registers */3][/* d */3]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, Cpu$GameboyEmulator.wD(match[0], match[1])), undefined, undefined, s);
}

var Swap = {
  swap: swap,
  swap_a: swap_a,
  swap_b: swap_b,
  swap_c: swap_c,
  swap_d: swap_d
};

function bit_(cpu, s, $staropt$star, isSet) {
  var cycles = $staropt$star !== undefined ? $staropt$star : 2;
  var partial_arg = Cpu$GameboyEmulator.b2i(isSet);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(cycles, (function (eta) {
                      var param = undefined;
                      var param$1 = eta;
                      return Cpu$GameboyEmulator.setFlag(/* H */2, 1, param, param$1);
                    })((function (eta) {
                          var param = undefined;
                          var param$1 = eta;
                          return Cpu$GameboyEmulator.setFlag(/* N */1, 0, param, param$1);
                        })((function (eta) {
                              var param = undefined;
                              var param$1 = eta;
                              return Cpu$GameboyEmulator.setFlag(/* Z */0, partial_arg, param, param$1);
                            })(cpu)))), undefined, undefined, s);
}

function BitOps(B) {
  var bit_a = function (s) {
    var cpu = s[/* cpu */0];
    return bit_(cpu, s, undefined, (cpu[/* registers */3][/* a */0] & B.offset) === 0);
  };
  var bit_b = function (s) {
    var cpu = s[/* cpu */0];
    return bit_(cpu, s, undefined, (cpu[/* registers */3][/* b */1] & B.offset) === 0);
  };
  var bit_c = function (s) {
    var cpu = s[/* cpu */0];
    return bit_(cpu, s, undefined, (cpu[/* registers */3][/* c */2] & B.offset) === 0);
  };
  var bit_d = function (s) {
    var cpu = s[/* cpu */0];
    return bit_(cpu, s, undefined, (cpu[/* registers */3][/* d */3] & B.offset) === 0);
  };
  var bit_e = function (s) {
    var cpu = s[/* cpu */0];
    return bit_(cpu, s, undefined, (cpu[/* registers */3][/* e */4] & B.offset) === 0);
  };
  var bit_h = function (s) {
    var cpu = s[/* cpu */0];
    return bit_(cpu, s, undefined, (cpu[/* registers */3][/* h */5] & B.offset) === 0);
  };
  var bit_l = function (s) {
    var cpu = s[/* cpu */0];
    return bit_(cpu, s, undefined, (cpu[/* registers */3][/* l */6] & B.offset) === 0);
  };
  var bit_m_hl = function (s) {
    var cpu = s[/* cpu */0];
    var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.rHl(cpu), /* record */[
          /* gpu */s[/* gpu */2],
          /* mmu */s[/* mmu */1]
        ]);
    return Cpu_types$GameboyEmulator.newState(undefined, Caml_option.some(match[1]), undefined, bit_(cpu, s, 4, (match[0] & B.offset) === 0));
  };
  return {
          bit_a: bit_a,
          bit_b: bit_b,
          bit_c: bit_c,
          bit_d: bit_d,
          bit_e: bit_e,
          bit_h: bit_h,
          bit_l: bit_l,
          bit_m_hl: bit_m_hl
        };
}

function bit_a(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* a */0] & 1) === 0);
}

function bit_b(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* b */1] & 1) === 0);
}

function bit_c(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* c */2] & 1) === 0);
}

function bit_d(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* d */3] & 1) === 0);
}

function bit_e(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* e */4] & 1) === 0);
}

function bit_h(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* h */5] & 1) === 0);
}

function bit_l(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* l */6] & 1) === 0);
}

function bit_m_hl(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.rHl(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  return Cpu_types$GameboyEmulator.newState(undefined, Caml_option.some(match[1]), undefined, bit_(cpu, s, 4, (match[0] & 1) === 0));
}

var Bit0 = {
  bit_a: bit_a,
  bit_b: bit_b,
  bit_c: bit_c,
  bit_d: bit_d,
  bit_e: bit_e,
  bit_h: bit_h,
  bit_l: bit_l,
  bit_m_hl: bit_m_hl
};

function bit_a$1(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* a */0] & 2) === 0);
}

function bit_b$1(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* b */1] & 2) === 0);
}

function bit_c$1(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* c */2] & 2) === 0);
}

function bit_d$1(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* d */3] & 2) === 0);
}

function bit_e$1(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* e */4] & 2) === 0);
}

function bit_h$1(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* h */5] & 2) === 0);
}

function bit_l$1(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* l */6] & 2) === 0);
}

function bit_m_hl$1(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.rHl(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  return Cpu_types$GameboyEmulator.newState(undefined, Caml_option.some(match[1]), undefined, bit_(cpu, s, 4, (match[0] & 2) === 0));
}

var Bit1 = {
  bit_a: bit_a$1,
  bit_b: bit_b$1,
  bit_c: bit_c$1,
  bit_d: bit_d$1,
  bit_e: bit_e$1,
  bit_h: bit_h$1,
  bit_l: bit_l$1,
  bit_m_hl: bit_m_hl$1
};

function bit_a$2(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* a */0] & 4) === 0);
}

function bit_b$2(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* b */1] & 4) === 0);
}

function bit_c$2(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* c */2] & 4) === 0);
}

function bit_d$2(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* d */3] & 4) === 0);
}

function bit_e$2(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* e */4] & 4) === 0);
}

function bit_h$2(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* h */5] & 4) === 0);
}

function bit_l$2(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* l */6] & 4) === 0);
}

function bit_m_hl$2(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.rHl(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  return Cpu_types$GameboyEmulator.newState(undefined, Caml_option.some(match[1]), undefined, bit_(cpu, s, 4, (match[0] & 4) === 0));
}

var Bit2 = {
  bit_a: bit_a$2,
  bit_b: bit_b$2,
  bit_c: bit_c$2,
  bit_d: bit_d$2,
  bit_e: bit_e$2,
  bit_h: bit_h$2,
  bit_l: bit_l$2,
  bit_m_hl: bit_m_hl$2
};

function bit_a$3(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* a */0] & 8) === 0);
}

function bit_b$3(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* b */1] & 8) === 0);
}

function bit_c$3(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* c */2] & 8) === 0);
}

function bit_d$3(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* d */3] & 8) === 0);
}

function bit_e$3(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* e */4] & 8) === 0);
}

function bit_h$3(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* h */5] & 8) === 0);
}

function bit_l$3(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* l */6] & 8) === 0);
}

function bit_m_hl$3(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.rHl(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  return Cpu_types$GameboyEmulator.newState(undefined, Caml_option.some(match[1]), undefined, bit_(cpu, s, 4, (match[0] & 8) === 0));
}

var Bit3 = {
  bit_a: bit_a$3,
  bit_b: bit_b$3,
  bit_c: bit_c$3,
  bit_d: bit_d$3,
  bit_e: bit_e$3,
  bit_h: bit_h$3,
  bit_l: bit_l$3,
  bit_m_hl: bit_m_hl$3
};

function bit_a$4(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* a */0] & 16) === 0);
}

function bit_b$4(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* b */1] & 16) === 0);
}

function bit_c$4(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* c */2] & 16) === 0);
}

function bit_d$4(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* d */3] & 16) === 0);
}

function bit_e$4(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* e */4] & 16) === 0);
}

function bit_h$4(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* h */5] & 16) === 0);
}

function bit_l$4(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* l */6] & 16) === 0);
}

function bit_m_hl$4(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.rHl(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  return Cpu_types$GameboyEmulator.newState(undefined, Caml_option.some(match[1]), undefined, bit_(cpu, s, 4, (match[0] & 16) === 0));
}

var Bit4 = {
  bit_a: bit_a$4,
  bit_b: bit_b$4,
  bit_c: bit_c$4,
  bit_d: bit_d$4,
  bit_e: bit_e$4,
  bit_h: bit_h$4,
  bit_l: bit_l$4,
  bit_m_hl: bit_m_hl$4
};

function bit_a$5(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* a */0] & 32) === 0);
}

function bit_b$5(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* b */1] & 32) === 0);
}

function bit_c$5(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* c */2] & 32) === 0);
}

function bit_d$5(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* d */3] & 32) === 0);
}

function bit_e$5(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* e */4] & 32) === 0);
}

function bit_h$5(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* h */5] & 32) === 0);
}

function bit_l$5(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* l */6] & 32) === 0);
}

function bit_m_hl$5(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.rHl(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  return Cpu_types$GameboyEmulator.newState(undefined, Caml_option.some(match[1]), undefined, bit_(cpu, s, 4, (match[0] & 32) === 0));
}

var Bit5 = {
  bit_a: bit_a$5,
  bit_b: bit_b$5,
  bit_c: bit_c$5,
  bit_d: bit_d$5,
  bit_e: bit_e$5,
  bit_h: bit_h$5,
  bit_l: bit_l$5,
  bit_m_hl: bit_m_hl$5
};

function bit_a$6(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* a */0] & 64) === 0);
}

function bit_b$6(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* b */1] & 64) === 0);
}

function bit_c$6(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* c */2] & 64) === 0);
}

function bit_d$6(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* d */3] & 64) === 0);
}

function bit_e$6(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* e */4] & 64) === 0);
}

function bit_h$6(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* h */5] & 64) === 0);
}

function bit_l$6(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* l */6] & 64) === 0);
}

function bit_m_hl$6(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.rHl(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  return Cpu_types$GameboyEmulator.newState(undefined, Caml_option.some(match[1]), undefined, bit_(cpu, s, 4, (match[0] & 64) === 0));
}

var Bit6 = {
  bit_a: bit_a$6,
  bit_b: bit_b$6,
  bit_c: bit_c$6,
  bit_d: bit_d$6,
  bit_e: bit_e$6,
  bit_h: bit_h$6,
  bit_l: bit_l$6,
  bit_m_hl: bit_m_hl$6
};

function bit_a$7(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* a */0] & 128) === 0);
}

function bit_b$7(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* b */1] & 128) === 0);
}

function bit_c$7(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* c */2] & 128) === 0);
}

function bit_d$7(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* d */3] & 128) === 0);
}

function bit_e$7(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* e */4] & 128) === 0);
}

function bit_h$7(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* h */5] & 128) === 0);
}

function bit_l$7(s) {
  var cpu = s[/* cpu */0];
  return bit_(cpu, s, undefined, (cpu[/* registers */3][/* l */6] & 128) === 0);
}

function bit_m_hl$7(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.rHl(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  return Cpu_types$GameboyEmulator.newState(undefined, Caml_option.some(match[1]), undefined, bit_(cpu, s, 4, (match[0] & 128) === 0));
}

var Bit7 = {
  bit_a: bit_a$7,
  bit_b: bit_b$7,
  bit_c: bit_c$7,
  bit_d: bit_d$7,
  bit_e: bit_e$7,
  bit_h: bit_h$7,
  bit_l: bit_l$7,
  bit_m_hl: bit_m_hl$7
};

var Bit = {
  bit_: bit_,
  BitOps: BitOps,
  Bit0: Bit0,
  Bit1: Bit1,
  Bit2: Bit2,
  Bit3: Bit3,
  Bit4: Bit4,
  Bit5: Bit5,
  Bit6: Bit6,
  Bit7: Bit7
};

function rl(cpu, $staropt$star, register) {
  var mCycles = $staropt$star !== undefined ? $staropt$star : 2;
  var match = (register & 128) > 0;
  var highBit = match ? 1 : 0;
  var match$1 = Cpu$GameboyEmulator.getFlag(/* C */3, cpu) > 0;
  var carry = match$1 ? 1 : 0;
  var r = (register << 1) + carry & 255;
  var partial_arg = Cpu$GameboyEmulator.b2i(r === 0);
  return /* tuple */[
          r,
          (function (eta) {
                var param = undefined;
                var param$1 = eta;
                return Cpu$GameboyEmulator.setFlag(/* Z */0, partial_arg, param, param$1);
              })((function (eta) {
                    var param = undefined;
                    var param$1 = eta;
                    return Cpu$GameboyEmulator.setFlag(/* C */3, highBit, param, param$1);
                  })(Cpu$GameboyEmulator.machineCycles(mCycles, cpu)))
        ];
}

function rl_a(s) {
  var cpu = s[/* cpu */0];
  var match = rl(cpu, undefined, cpu[/* registers */3][/* a */0]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.wA(match[0], match[1]), undefined, undefined, s);
}

function rl_b(s) {
  var cpu = s[/* cpu */0];
  var match = rl(cpu, undefined, cpu[/* registers */3][/* b */1]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.wB(match[0], match[1]), undefined, undefined, s);
}

function rl_c(s) {
  var cpu = s[/* cpu */0];
  var match = rl(cpu, undefined, cpu[/* registers */3][/* c */2]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.wC(match[0], match[1]), undefined, undefined, s);
}

function rl_d(s) {
  var cpu = s[/* cpu */0];
  var match = rl(cpu, undefined, cpu[/* registers */3][/* d */3]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.wD(match[0], match[1]), undefined, undefined, s);
}

function rl_e(s) {
  var cpu = s[/* cpu */0];
  var match = rl(cpu, undefined, cpu[/* registers */3][/* e */4]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.wE(match[0], match[1]), undefined, undefined, s);
}

function rl_h(s) {
  var cpu = s[/* cpu */0];
  var match = rl(cpu, undefined, cpu[/* registers */3][/* h */5]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.wH(match[0], match[1]), undefined, undefined, s);
}

function rl_l(s) {
  var cpu = s[/* cpu */0];
  var match = rl(cpu, undefined, cpu[/* registers */3][/* l */6]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.wL(match[0], match[1]), undefined, undefined, s);
}

function rl_m_hl(s) {
  var gpu = s[/* gpu */2];
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.rHl(cpu), /* record */[
        /* gpu */gpu,
        /* mmu */s[/* mmu */1]
      ]);
  var match$1 = rl(cpu, 4, match[0]);
  var cpu$1 = match$1[1];
  var match$2 = Mmu$GameboyEmulator.write8(Cpu$GameboyEmulator.rHl(cpu$1), match$1[0], /* record */[
        /* gpu */gpu,
        /* mmu */match[1]
      ]);
  return Cpu_types$GameboyEmulator.newState(cpu$1, Caml_option.some(match$2[0]), match$2[1], s);
}

var Rl = {
  rl: rl,
  rl_a: rl_a,
  rl_b: rl_b,
  rl_c: rl_c,
  rl_d: rl_d,
  rl_e: rl_e,
  rl_h: rl_h,
  rl_l: rl_l,
  rl_m_hl: rl_m_hl
};

function ResOps(R) {
  var res_a = function (s) {
    var cpu = s[/* cpu */0];
    var a = cpu[/* registers */3][/* a */0] & R.offset;
    return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, Cpu$GameboyEmulator.wA(a, cpu)), undefined, undefined, s);
  };
  var res_b = function (s) {
    var cpu = s[/* cpu */0];
    var b = cpu[/* registers */3][/* b */1] & R.offset;
    return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, Cpu$GameboyEmulator.wB(b, cpu)), undefined, undefined, s);
  };
  var res_c = function (s) {
    var cpu = s[/* cpu */0];
    var c = cpu[/* registers */3][/* c */2] & R.offset;
    return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, Cpu$GameboyEmulator.wC(c, cpu)), undefined, undefined, s);
  };
  var res_d = function (s) {
    var cpu = s[/* cpu */0];
    var d = cpu[/* registers */3][/* d */3] & R.offset;
    return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, Cpu$GameboyEmulator.wD(d, cpu)), undefined, undefined, s);
  };
  var res_e = function (s) {
    var cpu = s[/* cpu */0];
    var e = cpu[/* registers */3][/* e */4] & R.offset;
    return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, Cpu$GameboyEmulator.wE(e, cpu)), undefined, undefined, s);
  };
  var res_h = function (s) {
    var cpu = s[/* cpu */0];
    var h = cpu[/* registers */3][/* h */5] & R.offset;
    return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, Cpu$GameboyEmulator.wH(h, cpu)), undefined, undefined, s);
  };
  var res_l = function (s) {
    var cpu = s[/* cpu */0];
    var l = cpu[/* registers */3][/* l */6] & R.offset;
    return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, Cpu$GameboyEmulator.wL(l, cpu)), undefined, undefined, s);
  };
  return {
          res_a: res_a,
          res_b: res_b,
          res_c: res_c,
          res_d: res_d,
          res_e: res_e,
          res_h: res_h,
          res_l: res_l
        };
}

var Res = {
  ResOps: ResOps
};

exports.Swap = Swap;
exports.Bit = Bit;
exports.Rl = Rl;
exports.Res = Res;
/* Mmu-GameboyEmulator Not a pure module */
