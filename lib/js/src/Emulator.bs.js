// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Cpu$GameboyEmulator = require("./Cpu.bs.js");
var Gpu$GameboyEmulator = require("./Gpu.bs.js");
var Mmu$GameboyEmulator = require("./Mmu.bs.js");
var Renderer$GameboyEmulator = require("./Renderer.bs.js");

var NoCycles = Caml_exceptions.create("Emulator-GameboyEmulator.NoCycles");

function load(bytes) {
  console.log("Loaded, ROM length: ", bytes.length);
  var mmu = Mmu$GameboyEmulator.load(bytes);
  return /* record */[
          /* frameCount */0,
          /* fps */0,
          /* gpu */Gpu$GameboyEmulator.make(/* () */0),
          /* cpu */Cpu$GameboyEmulator.make(/* () */0),
          /* mmu */mmu,
          /* renderer */Renderer$GameboyEmulator.make(/* () */0)
        ];
}

function reset(state) {
  return /* record */[
          /* frameCount */state[/* frameCount */0] + 1 | 0,
          /* fps */0,
          /* gpu */Gpu$GameboyEmulator.make(/* () */0),
          /* cpu */state[/* cpu */3],
          /* mmu */Mmu$GameboyEmulator.reset(state[/* mmu */4]),
          /* renderer */state[/* renderer */5]
        ];
}

function execInstructionsForFrame(s, _currCycles, maxCycles) {
  while(true) {
    var currCycles = _currCycles;
    var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.programCount(s[/* cpu */3]), /* record */[
          /* gpu */s[/* gpu */2],
          /* mmu */s[/* mmu */4]
        ]);
    var instruction = match[0];
    s[/* cpu */3][/* registers */2][/* pc */9] = Cpu$GameboyEmulator.programCount(s[/* cpu */3]) + 1 & 65535;
    var match$1 = Cpu$GameboyEmulator.exec(instruction)(/* record */[
          /* cpu */s[/* cpu */3],
          /* mmu */match[1],
          /* gpu */s[/* gpu */2]
        ]);
    var cpu = match$1[/* cpu */0];
    if (cpu[/* registers */2][/* mCycles */10] <= 0) {
      throw [
            NoCycles,
            Curry._1(Printf.sprintf(/* Format */[
                      /* String_literal */Block.__(11, [
                          "mCycles=0: ",
                          /* Int */Block.__(4, [
                              /* Int_x */6,
                              /* No_padding */0,
                              /* No_precision */0,
                              /* End_of_format */0
                            ])
                        ]),
                      "mCycles=0: %x"
                    ]), instruction)
          ];
    }
    var gpu = Gpu$GameboyEmulator.step(cpu[/* registers */2][/* mCycles */10], s[/* renderer */5], s[/* gpu */2]);
    s[/* gpu */2] = gpu;
    s[/* mmu */4] = match$1[/* mmu */1];
    s[/* cpu */3] = cpu;
    s[/* cpu */3][/* clock */0] = s[/* cpu */3][/* clock */0] + cpu[/* registers */2][/* mCycles */10] | 0;
    if (currCycles >= maxCycles) {
      return s;
    } else {
      _currCycles = currCycles + 1 | 0;
      continue ;
    }
  };
}

function frame(s) {
  var frameClock = s[/* cpu */3][/* clock */0] + 17556 | 0;
  return execInstructionsForFrame(s, s[/* cpu */3][/* clock */0], frameClock);
}

exports.NoCycles = NoCycles;
exports.load = load;
exports.reset = reset;
exports.execInstructionsForFrame = execInstructionsForFrame;
exports.frame = frame;
/* Cpu-GameboyEmulator Not a pure module */
