// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Cpu$GameboyEmulator = require("./Cpu.bs.js");
var Mmu$GameboyEmulator = require("./Mmu.bs.js");
var Cpu_cbops$GameboyEmulator = require("./Cpu_cbops.bs.js");
var Cpu_types$GameboyEmulator = require("./Cpu_types.bs.js");

function nop(s) {
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, s[/* cpu */0]), undefined, undefined, s);
}

function halt(s) {
  var cpu = s[/* cpu */0];
  cpu[/* halt */1] = 1;
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu), undefined, undefined, s);
}

function di(s) {
  var cpu = s[/* cpu */0];
  cpu[/* ime */2] = 0;
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu), undefined, undefined, s);
}

function ei(s) {
  var cpu = s[/* cpu */0];
  cpu[/* ime */2] = 1;
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu), undefined, undefined, s);
}

var Interrupts = {
  di: di,
  ei: ei
};

function load_nn_8(register, s) {
  var match = Cpu$GameboyEmulator.readAndIncrementPc(s[/* cpu */0]);
  var match$1 = Mmu$GameboyEmulator.read8(match[0], /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var cpu;
  if (register !== 5) {
    if (register !== 0) {
      cpu = Cpu$GameboyEmulator.machineCycles(2, Cpu$GameboyEmulator.writeRegister8(register, match$1[0], match[1]));
    } else {
      throw [
            Cpu$GameboyEmulator.AssertionException,
            "No ld_a_n instruction"
          ];
    }
  } else {
    throw [
          Cpu$GameboyEmulator.AssertionException,
          "No ld_f_n instruction"
        ];
  }
  return Cpu_types$GameboyEmulator.newState(cpu, Caml_option.some(match$1[1]), undefined, s);
}

function ld_b_n(param) {
  return load_nn_8(/* B */1, param);
}

function ld_c_n(param) {
  return load_nn_8(/* C */2, param);
}

function ld_d_n(param) {
  return load_nn_8(/* D */3, param);
}

function ld_e_n(param) {
  return load_nn_8(/* E */4, param);
}

function ld_h_n(param) {
  return load_nn_8(/* H */6, param);
}

function ld_l_n(param) {
  return load_nn_8(/* L */7, param);
}

var Load_nn_8 = {
  load_nn_8: load_nn_8,
  ld_b_n: ld_b_n,
  ld_c_n: ld_c_n,
  ld_d_n: ld_d_n,
  ld_e_n: ld_e_n,
  ld_h_n: ld_h_n,
  ld_l_n: ld_l_n
};

function ld_b_b(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var b = match[/* b */1];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = b;
  return Cpu_types$GameboyEmulator.newState(Curry._7((function (param) {
                      return (function (param$1, param$2, param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, arg, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined), undefined, undefined, undefined, undefined, undefined, undefined, eta), undefined, undefined, s);
}

function ld_b_c(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var c = match[/* c */2];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = c;
  return Cpu_types$GameboyEmulator.newState(Curry._7((function (param) {
                      return (function (param$1, param$2, param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, arg, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined), undefined, undefined, undefined, undefined, undefined, undefined, eta), undefined, undefined, s);
}

function ld_b_d(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var d = match[/* d */3];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = d;
  return Cpu_types$GameboyEmulator.newState(Curry._7((function (param) {
                      return (function (param$1, param$2, param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, arg, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined), undefined, undefined, undefined, undefined, undefined, undefined, eta), undefined, undefined, s);
}

function ld_b_e(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var e = match[/* e */4];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = e;
  return Cpu_types$GameboyEmulator.newState(Curry._7((function (param) {
                      return (function (param$1, param$2, param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, arg, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined), undefined, undefined, undefined, undefined, undefined, undefined, eta), undefined, undefined, s);
}

function ld_b_h(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var h = match[/* h */5];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = h;
  return Cpu_types$GameboyEmulator.newState(Curry._7((function (param) {
                      return (function (param$1, param$2, param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, arg, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined), undefined, undefined, undefined, undefined, undefined, undefined, eta), undefined, undefined, s);
}

function ld_b_l(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var l = match[/* l */6];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = l;
  return Cpu_types$GameboyEmulator.newState(Curry._7((function (param) {
                      return (function (param$1, param$2, param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, arg, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined), undefined, undefined, undefined, undefined, undefined, undefined, eta), undefined, undefined, s);
}

function ld_b_m_hl(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.rHl(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var eta = Cpu$GameboyEmulator.machineCycles(2, cpu);
  var arg = match[0];
  return Cpu_types$GameboyEmulator.newState(Curry._7((function (param) {
                      return (function (param$1, param$2, param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, arg, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined), undefined, undefined, undefined, undefined, undefined, undefined, eta), Caml_option.some(match[1]), undefined, s);
}

function ld_c_b(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var b = match[/* b */1];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = b;
  return Cpu_types$GameboyEmulator.newState(Curry._6((function (param, param$1) {
                      return (function (param$2, param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, arg, param$2, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined), undefined, undefined, undefined, undefined, undefined, eta), undefined, undefined, s);
}

function ld_c_c(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var c = match[/* c */2];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = c;
  return Cpu_types$GameboyEmulator.newState(Curry._6((function (param, param$1) {
                      return (function (param$2, param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, arg, param$2, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined), undefined, undefined, undefined, undefined, undefined, eta), undefined, undefined, s);
}

function ld_c_d(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var d = match[/* d */3];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = d;
  return Cpu_types$GameboyEmulator.newState(Curry._6((function (param, param$1) {
                      return (function (param$2, param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, arg, param$2, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined), undefined, undefined, undefined, undefined, undefined, eta), undefined, undefined, s);
}

function ld_c_e(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var e = match[/* e */4];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = e;
  return Cpu_types$GameboyEmulator.newState(Curry._6((function (param, param$1) {
                      return (function (param$2, param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, arg, param$2, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined), undefined, undefined, undefined, undefined, undefined, eta), undefined, undefined, s);
}

function ld_c_h(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var h = match[/* h */5];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = h;
  return Cpu_types$GameboyEmulator.newState(Curry._6((function (param, param$1) {
                      return (function (param$2, param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, arg, param$2, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined), undefined, undefined, undefined, undefined, undefined, eta), undefined, undefined, s);
}

function ld_c_l(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var l = match[/* l */6];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = l;
  return Cpu_types$GameboyEmulator.newState(Curry._6((function (param, param$1) {
                      return (function (param$2, param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, arg, param$2, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined), undefined, undefined, undefined, undefined, undefined, eta), undefined, undefined, s);
}

function ld_c_m_hl(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.rHl(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var eta = Cpu$GameboyEmulator.machineCycles(2, cpu);
  var arg = match[0];
  return Cpu_types$GameboyEmulator.newState(Curry._6((function (param, param$1) {
                      return (function (param$2, param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, arg, param$2, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined), undefined, undefined, undefined, undefined, undefined, eta), Caml_option.some(match[1]), undefined, s);
}

function ld_d_b(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var b = match[/* b */1];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = b;
  return Cpu_types$GameboyEmulator.newState(Curry._5((function (param, param$1, param$2) {
                      return (function (param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, arg, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined), undefined, undefined, undefined, undefined, eta), undefined, undefined, s);
}

function ld_d_c(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var c = match[/* c */2];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = c;
  return Cpu_types$GameboyEmulator.newState(Curry._5((function (param, param$1, param$2) {
                      return (function (param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, arg, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined), undefined, undefined, undefined, undefined, eta), undefined, undefined, s);
}

function ld_d_d(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var d = match[/* d */3];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = d;
  return Cpu_types$GameboyEmulator.newState(Curry._5((function (param, param$1, param$2) {
                      return (function (param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, arg, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined), undefined, undefined, undefined, undefined, eta), undefined, undefined, s);
}

function ld_d_e(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var e = match[/* e */4];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = e;
  return Cpu_types$GameboyEmulator.newState(Curry._5((function (param, param$1, param$2) {
                      return (function (param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, arg, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined), undefined, undefined, undefined, undefined, eta), undefined, undefined, s);
}

function ld_d_h(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var h = match[/* h */5];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = h;
  return Cpu_types$GameboyEmulator.newState(Curry._5((function (param, param$1, param$2) {
                      return (function (param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, arg, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined), undefined, undefined, undefined, undefined, eta), undefined, undefined, s);
}

function ld_d_l(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var l = match[/* l */6];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = l;
  return Cpu_types$GameboyEmulator.newState(Curry._5((function (param, param$1, param$2) {
                      return (function (param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, arg, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined), undefined, undefined, undefined, undefined, eta), undefined, undefined, s);
}

function ld_d_m_hl(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.rHl(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var eta = Cpu$GameboyEmulator.machineCycles(2, cpu);
  var arg = match[0];
  return Cpu_types$GameboyEmulator.newState(Curry._5((function (param, param$1, param$2) {
                      return (function (param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, arg, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined), undefined, undefined, undefined, undefined, eta), Caml_option.some(match[1]), undefined, s);
}

function ld_e_b(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var b = match[/* b */1];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = b;
  return Cpu_types$GameboyEmulator.newState(Curry._4((function (param, param$1, param$2, param$3) {
                      return (function (param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, arg, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined), undefined, undefined, undefined, eta), undefined, undefined, s);
}

function ld_e_c(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var c = match[/* c */2];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = c;
  return Cpu_types$GameboyEmulator.newState(Curry._4((function (param, param$1, param$2, param$3) {
                      return (function (param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, arg, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined), undefined, undefined, undefined, eta), undefined, undefined, s);
}

function ld_e_d(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var d = match[/* d */3];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = d;
  return Cpu_types$GameboyEmulator.newState(Curry._4((function (param, param$1, param$2, param$3) {
                      return (function (param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, arg, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined), undefined, undefined, undefined, eta), undefined, undefined, s);
}

function ld_e_e(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var e = match[/* e */4];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = e;
  return Cpu_types$GameboyEmulator.newState(Curry._4((function (param, param$1, param$2, param$3) {
                      return (function (param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, arg, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined), undefined, undefined, undefined, eta), undefined, undefined, s);
}

function ld_e_h(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var h = match[/* h */5];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = h;
  return Cpu_types$GameboyEmulator.newState(Curry._4((function (param, param$1, param$2, param$3) {
                      return (function (param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, arg, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined), undefined, undefined, undefined, eta), undefined, undefined, s);
}

function ld_e_l(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var l = match[/* l */6];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = l;
  return Cpu_types$GameboyEmulator.newState(Curry._4((function (param, param$1, param$2, param$3) {
                      return (function (param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, arg, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined), undefined, undefined, undefined, eta), undefined, undefined, s);
}

function ld_e_m_hl(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.rHl(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var eta = Cpu$GameboyEmulator.machineCycles(2, cpu);
  var arg = match[0];
  return Cpu_types$GameboyEmulator.newState(Curry._4((function (param, param$1, param$2, param$3) {
                      return (function (param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, arg, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined), undefined, undefined, undefined, eta), Caml_option.some(match[1]), undefined, s);
}

function ld_h_b(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var b = match[/* b */1];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = b;
  return Cpu_types$GameboyEmulator.newState(Curry._3((function (param, param$1, param$2, param$3, param$4) {
                      return (function (param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, param$4, arg, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined, undefined), undefined, undefined, eta), undefined, undefined, s);
}

function ld_h_c(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var c = match[/* c */2];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = c;
  return Cpu_types$GameboyEmulator.newState(Curry._3((function (param, param$1, param$2, param$3, param$4) {
                      return (function (param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, param$4, arg, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined, undefined), undefined, undefined, eta), undefined, undefined, s);
}

function ld_h_d(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var d = match[/* d */3];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = d;
  return Cpu_types$GameboyEmulator.newState(Curry._3((function (param, param$1, param$2, param$3, param$4) {
                      return (function (param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, param$4, arg, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined, undefined), undefined, undefined, eta), undefined, undefined, s);
}

function ld_h_e(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var e = match[/* e */4];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = e;
  return Cpu_types$GameboyEmulator.newState(Curry._3((function (param, param$1, param$2, param$3, param$4) {
                      return (function (param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, param$4, arg, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined, undefined), undefined, undefined, eta), undefined, undefined, s);
}

function ld_h_h(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var h = match[/* h */5];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = h;
  return Cpu_types$GameboyEmulator.newState(Curry._3((function (param, param$1, param$2, param$3, param$4) {
                      return (function (param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, param$4, arg, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined, undefined), undefined, undefined, eta), undefined, undefined, s);
}

function ld_h_l(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var l = match[/* l */6];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = l;
  return Cpu_types$GameboyEmulator.newState(Curry._3((function (param, param$1, param$2, param$3, param$4) {
                      return (function (param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, param$4, arg, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined, undefined), undefined, undefined, eta), undefined, undefined, s);
}

function ld_h_m_hl(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.rHl(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var eta = Cpu$GameboyEmulator.machineCycles(2, cpu);
  var arg = match[0];
  return Cpu_types$GameboyEmulator.newState(Curry._3((function (param, param$1, param$2, param$3, param$4) {
                      return (function (param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, param$4, arg, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined, undefined), undefined, undefined, eta), Caml_option.some(match[1]), undefined, s);
}

function ld_l_b(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var b = match[/* b */1];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = b;
  return Cpu_types$GameboyEmulator.newState(Curry._2((function (param, param$1, param$2, param$3, param$4, param$5) {
                      return (function (param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, param$4, param$5, arg, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined, undefined, undefined), undefined, eta), undefined, undefined, s);
}

function ld_l_c(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var c = match[/* c */2];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = c;
  return Cpu_types$GameboyEmulator.newState(Curry._2((function (param, param$1, param$2, param$3, param$4, param$5) {
                      return (function (param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, param$4, param$5, arg, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined, undefined, undefined), undefined, eta), undefined, undefined, s);
}

function ld_l_d(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var d = match[/* d */3];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = d;
  return Cpu_types$GameboyEmulator.newState(Curry._2((function (param, param$1, param$2, param$3, param$4, param$5) {
                      return (function (param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, param$4, param$5, arg, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined, undefined, undefined), undefined, eta), undefined, undefined, s);
}

function ld_l_e(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var e = match[/* e */4];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = e;
  return Cpu_types$GameboyEmulator.newState(Curry._2((function (param, param$1, param$2, param$3, param$4, param$5) {
                      return (function (param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, param$4, param$5, arg, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined, undefined, undefined), undefined, eta), undefined, undefined, s);
}

function ld_l_h(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var h = match[/* h */5];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = h;
  return Cpu_types$GameboyEmulator.newState(Curry._2((function (param, param$1, param$2, param$3, param$4, param$5) {
                      return (function (param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, param$4, param$5, arg, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined, undefined, undefined), undefined, eta), undefined, undefined, s);
}

function ld_l_l(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var l = match[/* l */6];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = l;
  return Cpu_types$GameboyEmulator.newState(Curry._2((function (param, param$1, param$2, param$3, param$4, param$5) {
                      return (function (param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, param$4, param$5, arg, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined, undefined, undefined), undefined, eta), undefined, undefined, s);
}

function ld_l_m_hl(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.rHl(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var eta = Cpu$GameboyEmulator.machineCycles(2, cpu);
  var arg = match[0];
  return Cpu_types$GameboyEmulator.newState(Curry._2((function (param, param$1, param$2, param$3, param$4, param$5) {
                      return (function (param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, param$4, param$5, arg, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined, undefined, undefined), undefined, eta), Caml_option.some(match[1]), undefined, s);
}

function ld_m_hl_8(register, param) {
  var cpu = param[/* cpu */0];
  var match = Mmu$GameboyEmulator.write8(Cpu$GameboyEmulator.rHl(cpu), register, /* record */[
        /* gpu */param[/* gpu */2],
        /* mmu */param[/* mmu */1]
      ]);
  return /* tuple */[
          Cpu$GameboyEmulator.machineCycles(2, cpu),
          match[0],
          match[1]
        ];
}

function ld_m_hl_b(s) {
  var match = ld_m_hl_8(s[/* cpu */0][/* registers */3][/* b */1], s);
  return Cpu_types$GameboyEmulator.newState(match[0], Caml_option.some(match[1]), match[2], s);
}

function ld_m_hl_c(s) {
  var match = ld_m_hl_8(s[/* cpu */0][/* registers */3][/* c */2], s);
  return Cpu_types$GameboyEmulator.newState(match[0], Caml_option.some(match[1]), match[2], s);
}

function ld_m_hl_d(s) {
  var match = ld_m_hl_8(s[/* cpu */0][/* registers */3][/* d */3], s);
  return Cpu_types$GameboyEmulator.newState(match[0], Caml_option.some(match[1]), match[2], s);
}

function ld_m_hl_e(s) {
  var match = ld_m_hl_8(s[/* cpu */0][/* registers */3][/* e */4], s);
  return Cpu_types$GameboyEmulator.newState(match[0], Caml_option.some(match[1]), match[2], s);
}

function ld_m_hl_h(s) {
  var match = ld_m_hl_8(s[/* cpu */0][/* registers */3][/* h */5], s);
  return Cpu_types$GameboyEmulator.newState(match[0], Caml_option.some(match[1]), match[2], s);
}

function ld_m_hl_l(s) {
  var match = ld_m_hl_8(s[/* cpu */0][/* registers */3][/* l */6], s);
  return Cpu_types$GameboyEmulator.newState(match[0], Caml_option.some(match[1]), match[2], s);
}

function ld_m_hl_n(s) {
  var gpu = s[/* gpu */2];
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.programCount(cpu), /* record */[
        /* gpu */gpu,
        /* mmu */s[/* mmu */1]
      ]);
  var match$1 = Mmu$GameboyEmulator.write8(Cpu$GameboyEmulator.rHl(cpu), match[0], /* record */[
        /* gpu */gpu,
        /* mmu */match[1]
      ]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.incrementPc(1, Cpu$GameboyEmulator.machineCycles(3, cpu)), Caml_option.some(match$1[0]), match$1[1], s);
}

var Load_r1_r2 = {
  ld_b_b: ld_b_b,
  ld_b_c: ld_b_c,
  ld_b_d: ld_b_d,
  ld_b_e: ld_b_e,
  ld_b_h: ld_b_h,
  ld_b_l: ld_b_l,
  ld_b_m_hl: ld_b_m_hl,
  ld_c_b: ld_c_b,
  ld_c_c: ld_c_c,
  ld_c_d: ld_c_d,
  ld_c_e: ld_c_e,
  ld_c_h: ld_c_h,
  ld_c_l: ld_c_l,
  ld_c_m_hl: ld_c_m_hl,
  ld_d_b: ld_d_b,
  ld_d_c: ld_d_c,
  ld_d_d: ld_d_d,
  ld_d_e: ld_d_e,
  ld_d_h: ld_d_h,
  ld_d_l: ld_d_l,
  ld_d_m_hl: ld_d_m_hl,
  ld_e_b: ld_e_b,
  ld_e_c: ld_e_c,
  ld_e_d: ld_e_d,
  ld_e_e: ld_e_e,
  ld_e_h: ld_e_h,
  ld_e_l: ld_e_l,
  ld_e_m_hl: ld_e_m_hl,
  ld_h_b: ld_h_b,
  ld_h_c: ld_h_c,
  ld_h_d: ld_h_d,
  ld_h_e: ld_h_e,
  ld_h_h: ld_h_h,
  ld_h_l: ld_h_l,
  ld_h_m_hl: ld_h_m_hl,
  ld_l_b: ld_l_b,
  ld_l_c: ld_l_c,
  ld_l_d: ld_l_d,
  ld_l_e: ld_l_e,
  ld_l_h: ld_l_h,
  ld_l_l: ld_l_l,
  ld_l_m_hl: ld_l_m_hl,
  ld_m_hl_8: ld_m_hl_8,
  ld_m_hl_b: ld_m_hl_b,
  ld_m_hl_c: ld_m_hl_c,
  ld_m_hl_d: ld_m_hl_d,
  ld_m_hl_e: ld_m_hl_e,
  ld_m_hl_h: ld_m_hl_h,
  ld_m_hl_l: ld_m_hl_l,
  ld_m_hl_n: ld_m_hl_n
};

function ld_n_nn(param) {
  var gpu = param[/* gpu */2];
  var cpu = param[/* cpu */0];
  var pc = Cpu$GameboyEmulator.programCount(cpu);
  var match = Mmu$GameboyEmulator.read8(pc, /* record */[
        /* gpu */gpu,
        /* mmu */param[/* mmu */1]
      ]);
  var match$1 = Mmu$GameboyEmulator.read8(pc + 1 | 0, /* record */[
        /* gpu */gpu,
        /* mmu */match[1]
      ]);
  return /* tuple */[
          match$1[0],
          match[0],
          match$1[1],
          Cpu$GameboyEmulator.incrementPc(2, Cpu$GameboyEmulator.machineCycles(3, cpu))
        ];
}

function ld_bc_nn(s) {
  var match = ld_n_nn(s);
  var arg = match[0];
  var arg$1 = match[1];
  return Cpu_types$GameboyEmulator.newState(Curry._6((function (param) {
                      return (function (param$1, param$2, param$3, param$4, param$5, param$6) {
                          return Cpu$GameboyEmulator.setRegisters(param, arg, arg$1, param$1, param$2, param$3, param$4, param$5, param$6);
                        });
                    })(undefined), undefined, undefined, undefined, undefined, undefined, match[3]), Caml_option.some(match[2]), undefined, s);
}

function ld_de_nn(s) {
  var match = ld_n_nn(s);
  var arg = match[0];
  var arg$1 = match[1];
  return Cpu_types$GameboyEmulator.newState(Curry._4((function (param, param$1, param$2) {
                      return (function (param$3, param$4, param$5, param$6) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, arg, arg$1, param$3, param$4, param$5, param$6);
                        });
                    })(undefined, undefined, undefined), undefined, undefined, undefined, match[3]), Caml_option.some(match[2]), undefined, s);
}

function ld_hl_nn(s) {
  var match = ld_n_nn(s);
  var l = match[1];
  var h = match[0];
  Curry._2(Printf.printf(/* Format */[
            /* String_literal */Block.__(11, [
                "LD HL nn: ",
                /* Int */Block.__(4, [
                    /* Int_x */6,
                    /* No_padding */0,
                    /* No_precision */0,
                    /* Char_literal */Block.__(12, [
                        /* " " */32,
                        /* Int */Block.__(4, [
                            /* Int_x */6,
                            /* No_padding */0,
                            /* No_precision */0,
                            /* Char_literal */Block.__(12, [
                                /* "\n" */10,
                                /* End_of_format */0
                              ])
                          ])
                      ])
                  ])
              ]),
            "LD HL nn: %x %x\n"
          ]), h, l);
  var arg = h;
  var arg$1 = l;
  return Cpu_types$GameboyEmulator.newState(Curry._2((function (param, param$1, param$2, param$3, param$4) {
                      return (function (param$5, param$6) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, param$4, arg, arg$1, param$5, param$6);
                        });
                    })(undefined, undefined, undefined, undefined, undefined), undefined, match[3]), Caml_option.some(match[2]), undefined, s);
}

function ld_sp_nn(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read16(Cpu$GameboyEmulator.programCount(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var sp = match[0];
  Curry._1(Printf.printf(/* Format */[
            /* String_literal */Block.__(11, [
                "LD SP nn: ",
                /* Int */Block.__(4, [
                    /* Int_x */6,
                    /* No_padding */0,
                    /* No_precision */0,
                    /* Char_literal */Block.__(12, [
                        /* "\n" */10,
                        /* End_of_format */0
                      ])
                  ])
              ]),
            "LD SP nn: %x\n"
          ]), sp);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.incrementPc(2, Cpu$GameboyEmulator.machineCycles(3, Cpu$GameboyEmulator.setSp(sp, cpu))), Caml_option.some(match[1]), undefined, s);
}

function ld_sp_hl(s) {
  var cpu = s[/* cpu */0];
  var hl = Cpu$GameboyEmulator.rHl(cpu);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, Cpu$GameboyEmulator.setSp(hl, cpu)), undefined, undefined, s);
}

function ld_hl_sp_n(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.programCount(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var n = Cpu$GameboyEmulator.signed(match[0]) + cpu[/* registers */3][/* sp */8] | 0;
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.incrementPc(1, Cpu$GameboyEmulator.machineCycles(3, (function (eta) {
                          var param = undefined;
                          var param$1 = eta;
                          return Cpu$GameboyEmulator.setFlag(/* N */1, 0, param, param$1);
                        })((function (eta) {
                              var param = undefined;
                              var param$1 = eta;
                              return Cpu$GameboyEmulator.setFlag(/* Z */0, 0, param, param$1);
                            })(Cpu$GameboyEmulator.wHl(n, cpu))))), Caml_option.some(match[1]), undefined, s);
}

function ld_m_nn_sp(s) {
  var gpu = s[/* gpu */2];
  var cpu = s[/* cpu */0];
  var pc = Cpu$GameboyEmulator.programCount(cpu);
  var match = Mmu$GameboyEmulator.read16(pc, /* record */[
        /* gpu */gpu,
        /* mmu */s[/* mmu */1]
      ]);
  var match$1 = Mmu$GameboyEmulator.write16(match[0], cpu[/* registers */3][/* sp */8], /* record */[
        /* gpu */gpu,
        /* mmu */match[1]
      ]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.incrementPc(2, Cpu$GameboyEmulator.cycles(20, cpu)), Caml_option.some(match$1[0]), match$1[1], s);
}

var Load_nn_16 = {
  ld_n_nn: ld_n_nn,
  ld_bc_nn: ld_bc_nn,
  ld_de_nn: ld_de_nn,
  ld_hl_nn: ld_hl_nn,
  ld_sp_nn: ld_sp_nn,
  ld_sp_hl: ld_sp_hl,
  ld_hl_sp_n: ld_hl_sp_n,
  ld_m_nn_sp: ld_m_nn_sp
};

function ld_m_bc_a(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var a = match[/* a */0];
  var match$1 = Mmu$GameboyEmulator.write8(Cpu$GameboyEmulator.rBc(cpu), a, /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, cpu), Caml_option.some(match$1[0]), match$1[1], s);
}

function ld_m_de_a(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var a = match[/* a */0];
  var match$1 = Mmu$GameboyEmulator.write8(Cpu$GameboyEmulator.rDe(cpu), a, /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, cpu), Caml_option.some(match$1[0]), match$1[1], s);
}

function ld_m_hl_a(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var a = match[/* a */0];
  var match$1 = Mmu$GameboyEmulator.write8(Cpu$GameboyEmulator.rHl(cpu), a, /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, cpu), Caml_option.some(match$1[0]), match$1[1], s);
}

function ld_m_nn_a(s) {
  var gpu = s[/* gpu */2];
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var a = match[/* a */0];
  var match$1 = Mmu$GameboyEmulator.read16(Cpu$GameboyEmulator.programCount(cpu), /* record */[
        /* gpu */gpu,
        /* mmu */s[/* mmu */1]
      ]);
  var match$2 = Mmu$GameboyEmulator.write8(match$1[0], a, /* record */[
        /* gpu */gpu,
        /* mmu */match$1[1]
      ]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.incrementPc(2, Cpu$GameboyEmulator.machineCycles(4, cpu)), Caml_option.some(match$2[0]), match$2[1], s);
}

function ld_a_a(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var a = match[/* a */0];
  var partial_arg = a;
  return Cpu_types$GameboyEmulator.newState((function (eta) {
                  var param = undefined;
                  var param$1 = undefined;
                  var param$2 = undefined;
                  var param$3 = undefined;
                  var param$4 = undefined;
                  var param$5 = undefined;
                  var param$6 = undefined;
                  var param$7 = eta;
                  return Cpu$GameboyEmulator.setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                })(Cpu$GameboyEmulator.machineCycles(1, cpu)), undefined, undefined, s);
}

function ld_b_a(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var a = match[/* a */0];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = a;
  return Cpu_types$GameboyEmulator.newState(Curry._7((function (param) {
                      return (function (param$1, param$2, param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, arg, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined), undefined, undefined, undefined, undefined, undefined, undefined, eta), undefined, undefined, s);
}

function ld_c_a(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var a = match[/* a */0];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = a;
  return Cpu_types$GameboyEmulator.newState(Curry._6((function (param, param$1) {
                      return (function (param$2, param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, arg, param$2, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined), undefined, undefined, undefined, undefined, undefined, eta), undefined, undefined, s);
}

function ld_d_a(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var a = match[/* a */0];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = a;
  return Cpu_types$GameboyEmulator.newState(Curry._5((function (param, param$1, param$2) {
                      return (function (param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, arg, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined), undefined, undefined, undefined, undefined, eta), undefined, undefined, s);
}

function ld_e_a(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var a = match[/* a */0];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = a;
  return Cpu_types$GameboyEmulator.newState(Curry._4((function (param, param$1, param$2, param$3) {
                      return (function (param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, arg, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined), undefined, undefined, undefined, eta), undefined, undefined, s);
}

function ld_h_a(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var a = match[/* a */0];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = a;
  return Cpu_types$GameboyEmulator.newState(Curry._3((function (param, param$1, param$2, param$3, param$4) {
                      return (function (param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, param$4, arg, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined, undefined), undefined, undefined, eta), undefined, undefined, s);
}

function ld_l_a(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var a = match[/* a */0];
  var eta = Cpu$GameboyEmulator.machineCycles(1, cpu);
  var arg = a;
  return Cpu_types$GameboyEmulator.newState(Curry._2((function (param, param$1, param$2, param$3, param$4, param$5) {
                      return (function (param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, param$4, param$5, arg, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined, undefined, undefined), undefined, eta), undefined, undefined, s);
}

function ld_m_c_a(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var a = match[/* a */0];
  var c = match[/* c */2];
  var addr = 65280 + c | 0;
  var match$1 = Mmu$GameboyEmulator.write8(addr, a, /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, cpu), Caml_option.some(match$1[0]), match$1[1], s);
}

function ld_hld_a(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var a = match[/* a */0];
  var match$1 = Mmu$GameboyEmulator.write8(Cpu$GameboyEmulator.rHl(cpu), a, /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.decrementHl(Cpu$GameboyEmulator.machineCycles(2, cpu)), Caml_option.some(match$1[0]), match$1[1], s);
}

function ld_hli_a(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var a = match[/* a */0];
  var match$1 = Mmu$GameboyEmulator.write8(Cpu$GameboyEmulator.rHl(cpu), a, /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.incrementHl(Cpu$GameboyEmulator.machineCycles(2, cpu)), Caml_option.some(match$1[0]), match$1[1], s);
}

function ldh_n_a(s) {
  var gpu = s[/* gpu */2];
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.programCount(cpu), /* record */[
        /* gpu */gpu,
        /* mmu */s[/* mmu */1]
      ]);
  var addr = 65280 + match[0] | 0;
  var match$1 = Mmu$GameboyEmulator.write8(addr, cpu[/* registers */3][/* a */0], /* record */[
        /* gpu */gpu,
        /* mmu */match[1]
      ]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(3, Cpu$GameboyEmulator.incrementPc(1, cpu)), Caml_option.some(match$1[0]), match$1[1], s);
}

var Load_8_A = {
  ld_m_bc_a: ld_m_bc_a,
  ld_m_de_a: ld_m_de_a,
  ld_m_hl_a: ld_m_hl_a,
  ld_m_nn_a: ld_m_nn_a,
  ld_a_a: ld_a_a,
  ld_b_a: ld_b_a,
  ld_c_a: ld_c_a,
  ld_d_a: ld_d_a,
  ld_e_a: ld_e_a,
  ld_h_a: ld_h_a,
  ld_l_a: ld_l_a,
  ld_m_c_a: ld_m_c_a,
  ld_hld_a: ld_hld_a,
  ld_hli_a: ld_hli_a,
  ldh_n_a: ldh_n_a
};

function ld_a_b(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var b = match[/* b */1];
  var partial_arg = b;
  return Cpu_types$GameboyEmulator.newState((function (eta) {
                  var param = undefined;
                  var param$1 = undefined;
                  var param$2 = undefined;
                  var param$3 = undefined;
                  var param$4 = undefined;
                  var param$5 = undefined;
                  var param$6 = undefined;
                  var param$7 = eta;
                  return Cpu$GameboyEmulator.setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                })(Cpu$GameboyEmulator.machineCycles(1, cpu)), undefined, undefined, s);
}

function ld_a_c(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var c = match[/* c */2];
  var partial_arg = c;
  return Cpu_types$GameboyEmulator.newState((function (eta) {
                  var param = undefined;
                  var param$1 = undefined;
                  var param$2 = undefined;
                  var param$3 = undefined;
                  var param$4 = undefined;
                  var param$5 = undefined;
                  var param$6 = undefined;
                  var param$7 = eta;
                  return Cpu$GameboyEmulator.setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                })(Cpu$GameboyEmulator.machineCycles(1, cpu)), undefined, undefined, s);
}

function ld_a_d(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var d = match[/* d */3];
  var partial_arg = d;
  return Cpu_types$GameboyEmulator.newState((function (eta) {
                  var param = undefined;
                  var param$1 = undefined;
                  var param$2 = undefined;
                  var param$3 = undefined;
                  var param$4 = undefined;
                  var param$5 = undefined;
                  var param$6 = undefined;
                  var param$7 = eta;
                  return Cpu$GameboyEmulator.setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                })(Cpu$GameboyEmulator.machineCycles(1, cpu)), undefined, undefined, s);
}

function ld_a_e(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var e = match[/* e */4];
  var partial_arg = e;
  return Cpu_types$GameboyEmulator.newState((function (eta) {
                  var param = undefined;
                  var param$1 = undefined;
                  var param$2 = undefined;
                  var param$3 = undefined;
                  var param$4 = undefined;
                  var param$5 = undefined;
                  var param$6 = undefined;
                  var param$7 = eta;
                  return Cpu$GameboyEmulator.setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                })(Cpu$GameboyEmulator.machineCycles(1, cpu)), undefined, undefined, s);
}

function ld_a_h(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var h = match[/* h */5];
  var partial_arg = h;
  return Cpu_types$GameboyEmulator.newState((function (eta) {
                  var param = undefined;
                  var param$1 = undefined;
                  var param$2 = undefined;
                  var param$3 = undefined;
                  var param$4 = undefined;
                  var param$5 = undefined;
                  var param$6 = undefined;
                  var param$7 = eta;
                  return Cpu$GameboyEmulator.setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                })(Cpu$GameboyEmulator.machineCycles(1, cpu)), undefined, undefined, s);
}

function ld_a_l(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var l = match[/* l */6];
  var partial_arg = l;
  return Cpu_types$GameboyEmulator.newState((function (eta) {
                  var param = undefined;
                  var param$1 = undefined;
                  var param$2 = undefined;
                  var param$3 = undefined;
                  var param$4 = undefined;
                  var param$5 = undefined;
                  var param$6 = undefined;
                  var param$7 = eta;
                  return Cpu$GameboyEmulator.setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                })(Cpu$GameboyEmulator.machineCycles(1, cpu)), undefined, undefined, s);
}

function ld_a_m_bc(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.rBc(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var partial_arg = match[0];
  return Cpu_types$GameboyEmulator.newState((function (eta) {
                  var param = undefined;
                  var param$1 = undefined;
                  var param$2 = undefined;
                  var param$3 = undefined;
                  var param$4 = undefined;
                  var param$5 = undefined;
                  var param$6 = undefined;
                  var param$7 = eta;
                  return Cpu$GameboyEmulator.setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                })(Cpu$GameboyEmulator.machineCycles(2, cpu)), Caml_option.some(match[1]), undefined, s);
}

function ld_a_m_de(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.rDe(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var partial_arg = match[0];
  return Cpu_types$GameboyEmulator.newState((function (eta) {
                  var param = undefined;
                  var param$1 = undefined;
                  var param$2 = undefined;
                  var param$3 = undefined;
                  var param$4 = undefined;
                  var param$5 = undefined;
                  var param$6 = undefined;
                  var param$7 = eta;
                  return Cpu$GameboyEmulator.setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                })(Cpu$GameboyEmulator.machineCycles(2, cpu)), Caml_option.some(match[1]), undefined, s);
}

function ld_a_m_hl(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.rHl(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var partial_arg = match[0];
  return Cpu_types$GameboyEmulator.newState((function (eta) {
                  var param = undefined;
                  var param$1 = undefined;
                  var param$2 = undefined;
                  var param$3 = undefined;
                  var param$4 = undefined;
                  var param$5 = undefined;
                  var param$6 = undefined;
                  var param$7 = eta;
                  return Cpu$GameboyEmulator.setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                })(Cpu$GameboyEmulator.machineCycles(2, cpu)), Caml_option.some(match[1]), undefined, s);
}

function ld_a_m_nn(s) {
  var gpu = s[/* gpu */2];
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read16(Cpu$GameboyEmulator.programCount(cpu), /* record */[
        /* gpu */gpu,
        /* mmu */s[/* mmu */1]
      ]);
  var match$1 = Mmu$GameboyEmulator.read8(match[0], /* record */[
        /* gpu */gpu,
        /* mmu */match[1]
      ]);
  var partial_arg = match$1[0];
  return Cpu_types$GameboyEmulator.newState((function (eta) {
                  var param = undefined;
                  var param$1 = undefined;
                  var param$2 = undefined;
                  var param$3 = undefined;
                  var param$4 = undefined;
                  var param$5 = undefined;
                  var param$6 = undefined;
                  var param$7 = eta;
                  return Cpu$GameboyEmulator.setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                })(Cpu$GameboyEmulator.incrementPc(2, Cpu$GameboyEmulator.machineCycles(4, cpu))), Caml_option.some(match$1[1]), undefined, s);
}

function ld_a_m_n(s) {
  var cpu = s[/* cpu */0];
  var addr = Cpu$GameboyEmulator.programCount(cpu);
  var match = Mmu$GameboyEmulator.read8(addr, /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var partial_arg = match[0];
  return Cpu_types$GameboyEmulator.newState((function (eta) {
                  var param = undefined;
                  var param$1 = undefined;
                  var param$2 = undefined;
                  var param$3 = undefined;
                  var param$4 = undefined;
                  var param$5 = undefined;
                  var param$6 = undefined;
                  var param$7 = eta;
                  return Cpu$GameboyEmulator.setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                })(Cpu$GameboyEmulator.incrementPc(1, Cpu$GameboyEmulator.machineCycles(2, cpu))), Caml_option.some(match[1]), undefined, s);
}

function ld_a_m_c(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */3];
  var c = match[/* c */2];
  var addr = 65280 + c | 0;
  var match$1 = Mmu$GameboyEmulator.read8(addr, /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var partial_arg = match$1[0];
  return Cpu_types$GameboyEmulator.newState((function (eta) {
                  var param = undefined;
                  var param$1 = undefined;
                  var param$2 = undefined;
                  var param$3 = undefined;
                  var param$4 = undefined;
                  var param$5 = undefined;
                  var param$6 = undefined;
                  var param$7 = eta;
                  return Cpu$GameboyEmulator.setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                })(Cpu$GameboyEmulator.machineCycles(2, cpu)), Caml_option.some(match$1[1]), undefined, s);
}

function ld_a_m_hld(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.rHl(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var partial_arg = match[0];
  return Cpu_types$GameboyEmulator.newState((function (eta) {
                  var param = undefined;
                  var param$1 = undefined;
                  var param$2 = undefined;
                  var param$3 = undefined;
                  var param$4 = undefined;
                  var param$5 = undefined;
                  var param$6 = undefined;
                  var param$7 = eta;
                  return Cpu$GameboyEmulator.setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                })(Cpu$GameboyEmulator.decrementHl(Cpu$GameboyEmulator.machineCycles(2, cpu))), Caml_option.some(match[1]), undefined, s);
}

function ld_a_m_hli(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.rHl(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var partial_arg = match[0];
  return Cpu_types$GameboyEmulator.newState((function (eta) {
                  var param = undefined;
                  var param$1 = undefined;
                  var param$2 = undefined;
                  var param$3 = undefined;
                  var param$4 = undefined;
                  var param$5 = undefined;
                  var param$6 = undefined;
                  var param$7 = eta;
                  return Cpu$GameboyEmulator.setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                })(Cpu$GameboyEmulator.incrementHl(Cpu$GameboyEmulator.machineCycles(2, cpu))), Caml_option.some(match[1]), undefined, s);
}

function ldh_a_n(s) {
  var gpu = s[/* gpu */2];
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.programCount(cpu), /* record */[
        /* gpu */gpu,
        /* mmu */s[/* mmu */1]
      ]);
  var addr = 65280 + match[0] | 0;
  var match$1 = Mmu$GameboyEmulator.read8(addr, /* record */[
        /* gpu */gpu,
        /* mmu */match[1]
      ]);
  var partial_arg = match$1[0];
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(3, Cpu$GameboyEmulator.incrementPc(1, (function (eta) {
                          var param = undefined;
                          var param$1 = undefined;
                          var param$2 = undefined;
                          var param$3 = undefined;
                          var param$4 = undefined;
                          var param$5 = undefined;
                          var param$6 = undefined;
                          var param$7 = eta;
                          return Cpu$GameboyEmulator.setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                        })(cpu))), Caml_option.some(match$1[1]), gpu, s);
}

var Load_A_8 = {
  ld_a_b: ld_a_b,
  ld_a_c: ld_a_c,
  ld_a_d: ld_a_d,
  ld_a_e: ld_a_e,
  ld_a_h: ld_a_h,
  ld_a_l: ld_a_l,
  ld_a_m_bc: ld_a_m_bc,
  ld_a_m_de: ld_a_m_de,
  ld_a_m_hl: ld_a_m_hl,
  ld_a_m_nn: ld_a_m_nn,
  ld_a_m_n: ld_a_m_n,
  ld_a_m_c: ld_a_m_c,
  ld_a_m_hld: ld_a_m_hld,
  ld_a_m_hli: ld_a_m_hli,
  ldh_a_n: ldh_a_n
};

function inc_bc(s) {
  var cpu = s[/* cpu */0];
  var c = cpu[/* registers */3][/* c */2] + 1 & 255;
  var b = c === 0 ? cpu[/* registers */3][/* b */1] + 1 & 255 : cpu[/* registers */3][/* b */1];
  var arg = b;
  var arg$1 = c;
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, Curry._6((function (param) {
                          return (function (param$1, param$2, param$3, param$4, param$5, param$6) {
                              return Cpu$GameboyEmulator.setRegisters(param, arg, arg$1, param$1, param$2, param$3, param$4, param$5, param$6);
                            });
                        })(undefined), undefined, undefined, undefined, undefined, undefined, cpu)), undefined, undefined, s);
}

function inc_de(s) {
  var cpu = s[/* cpu */0];
  var e = cpu[/* registers */3][/* e */4] + 1 & 255;
  var d = e === 0 ? cpu[/* registers */3][/* d */3] + 1 & 255 : cpu[/* registers */3][/* d */3];
  var arg = d;
  var arg$1 = e;
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, Curry._4((function (param, param$1, param$2) {
                          return (function (param$3, param$4, param$5, param$6) {
                              return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, arg, arg$1, param$3, param$4, param$5, param$6);
                            });
                        })(undefined, undefined, undefined), undefined, undefined, undefined, cpu)), undefined, undefined, s);
}

function inc_hl(s) {
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, Cpu$GameboyEmulator.incrementHl(s[/* cpu */0])), undefined, undefined, s);
}

function inc_sp(s) {
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, Cpu$GameboyEmulator.incrementSp(undefined, s[/* cpu */0])), undefined, undefined, s);
}

var Increment16 = {
  inc_bc: inc_bc,
  inc_de: inc_de,
  inc_hl: inc_hl,
  inc_sp: inc_sp
};

function inc(register, cpu) {
  var r = register + 1 & 255;
  var f = cpu[/* registers */3][/* f */7] & 16;
  return /* tuple */[
          r,
          Cpu$GameboyEmulator.machineCycles(1, (function (eta) {
                    var param = undefined;
                    var param$1 = eta;
                    return Cpu$GameboyEmulator.setFlag(/* N */1, 0, param, param$1);
                  })(Cpu$GameboyEmulator.setFlag(/* Z */0, Cpu$GameboyEmulator.b2i(r === 0), f, cpu)))
        ];
}

function inc_a(s) {
  var cpu = s[/* cpu */0];
  var match = inc(cpu[/* registers */3][/* a */0], cpu);
  var partial_arg = match[0];
  return Cpu_types$GameboyEmulator.newState((function (eta) {
                  var param = undefined;
                  var param$1 = undefined;
                  var param$2 = undefined;
                  var param$3 = undefined;
                  var param$4 = undefined;
                  var param$5 = undefined;
                  var param$6 = undefined;
                  var param$7 = eta;
                  return Cpu$GameboyEmulator.setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                })(match[1]), undefined, undefined, s);
}

function inc_b(s) {
  var cpu = s[/* cpu */0];
  var match = inc(cpu[/* registers */3][/* b */1], cpu);
  var arg = match[0];
  return Cpu_types$GameboyEmulator.newState(Curry._7((function (param) {
                      return (function (param$1, param$2, param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, arg, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined), undefined, undefined, undefined, undefined, undefined, undefined, match[1]), undefined, undefined, s);
}

function inc_c(s) {
  var cpu = s[/* cpu */0];
  var match = inc(cpu[/* registers */3][/* c */2], cpu);
  var arg = match[0];
  return Cpu_types$GameboyEmulator.newState(Curry._6((function (param, param$1) {
                      return (function (param$2, param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, arg, param$2, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined), undefined, undefined, undefined, undefined, undefined, match[1]), undefined, undefined, s);
}

function inc_d(s) {
  var cpu = s[/* cpu */0];
  var match = inc(cpu[/* registers */3][/* d */3], cpu);
  var arg = match[0];
  return Cpu_types$GameboyEmulator.newState(Curry._5((function (param, param$1, param$2) {
                      return (function (param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, arg, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined), undefined, undefined, undefined, undefined, match[1]), undefined, undefined, s);
}

function inc_e(s) {
  var cpu = s[/* cpu */0];
  var match = inc(cpu[/* registers */3][/* e */4], cpu);
  var arg = match[0];
  return Cpu_types$GameboyEmulator.newState(Curry._4((function (param, param$1, param$2, param$3) {
                      return (function (param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, arg, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined), undefined, undefined, undefined, match[1]), undefined, undefined, s);
}

function inc_h(s) {
  var cpu = s[/* cpu */0];
  var match = inc(cpu[/* registers */3][/* h */5], cpu);
  var arg = match[0];
  return Cpu_types$GameboyEmulator.newState(Curry._3((function (param, param$1, param$2, param$3, param$4) {
                      return (function (param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, param$4, arg, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined, undefined), undefined, undefined, match[1]), undefined, undefined, s);
}

function inc_l(s) {
  var cpu = s[/* cpu */0];
  var match = inc(cpu[/* registers */3][/* l */6], cpu);
  var arg = match[0];
  return Cpu_types$GameboyEmulator.newState(Curry._2((function (param, param$1, param$2, param$3, param$4, param$5) {
                      return (function (param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, param$4, param$5, arg, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined, undefined, undefined), undefined, match[1]), undefined, undefined, s);
}

var Increment8 = {
  inc: inc,
  inc_a: inc_a,
  inc_b: inc_b,
  inc_c: inc_c,
  inc_d: inc_d,
  inc_e: inc_e,
  inc_h: inc_h,
  inc_l: inc_l
};

function dec(register, $staropt$star, cpu) {
  var cycles = $staropt$star !== undefined ? $staropt$star : 1;
  var r = register - 1 & 255;
  var f = cpu[/* registers */3][/* f */7] & 16;
  return /* tuple */[
          r,
          Cpu$GameboyEmulator.machineCycles(cycles, (function (eta) {
                    var param = undefined;
                    var param$1 = eta;
                    return Cpu$GameboyEmulator.setFlag(/* N */1, 1, param, param$1);
                  })(Cpu$GameboyEmulator.setFlag(/* Z */0, Cpu$GameboyEmulator.b2i(r === 0), f, cpu)))
        ];
}

function dec_a(s) {
  var cpu = s[/* cpu */0];
  var match = dec(cpu[/* registers */3][/* a */0], undefined, cpu);
  var partial_arg = match[0];
  return Cpu_types$GameboyEmulator.newState((function (eta) {
                  var param = undefined;
                  var param$1 = undefined;
                  var param$2 = undefined;
                  var param$3 = undefined;
                  var param$4 = undefined;
                  var param$5 = undefined;
                  var param$6 = undefined;
                  var param$7 = eta;
                  return Cpu$GameboyEmulator.setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                })(match[1]), undefined, undefined, s);
}

function dec_b(s) {
  var cpu = s[/* cpu */0];
  var match = dec(cpu[/* registers */3][/* b */1], undefined, cpu);
  var arg = match[0];
  return Cpu_types$GameboyEmulator.newState(Curry._7((function (param) {
                      return (function (param$1, param$2, param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, arg, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined), undefined, undefined, undefined, undefined, undefined, undefined, match[1]), undefined, undefined, s);
}

function dec_c(s) {
  var cpu = s[/* cpu */0];
  var match = dec(cpu[/* registers */3][/* c */2], undefined, cpu);
  var arg = match[0];
  return Cpu_types$GameboyEmulator.newState(Curry._6((function (param, param$1) {
                      return (function (param$2, param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, arg, param$2, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined), undefined, undefined, undefined, undefined, undefined, match[1]), undefined, undefined, s);
}

function dec_d(s) {
  var cpu = s[/* cpu */0];
  var match = dec(cpu[/* registers */3][/* d */3], undefined, cpu);
  var arg = match[0];
  return Cpu_types$GameboyEmulator.newState(Curry._5((function (param, param$1, param$2) {
                      return (function (param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, arg, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined), undefined, undefined, undefined, undefined, match[1]), undefined, undefined, s);
}

function dec_e(s) {
  var cpu = s[/* cpu */0];
  var match = dec(cpu[/* registers */3][/* e */4], undefined, cpu);
  var arg = match[0];
  return Cpu_types$GameboyEmulator.newState(Curry._4((function (param, param$1, param$2, param$3) {
                      return (function (param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, arg, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined), undefined, undefined, undefined, match[1]), undefined, undefined, s);
}

function dec_h(s) {
  var cpu = s[/* cpu */0];
  var match = dec(cpu[/* registers */3][/* h */5], undefined, cpu);
  var arg = match[0];
  return Cpu_types$GameboyEmulator.newState(Curry._3((function (param, param$1, param$2, param$3, param$4) {
                      return (function (param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, param$4, arg, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined, undefined), undefined, undefined, match[1]), undefined, undefined, s);
}

function dec_l(s) {
  var cpu = s[/* cpu */0];
  var match = dec(cpu[/* registers */3][/* l */6], undefined, cpu);
  var arg = match[0];
  return Cpu_types$GameboyEmulator.newState(Curry._2((function (param, param$1, param$2, param$3, param$4, param$5) {
                      return (function (param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, param$4, param$5, arg, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined, undefined, undefined), undefined, match[1]), undefined, undefined, s);
}

function dec_m_hl(s) {
  var gpu = s[/* gpu */2];
  var mmu = s[/* mmu */1];
  var cpu = s[/* cpu */0];
  var addr = Cpu$GameboyEmulator.rHl(cpu);
  var match = Mmu$GameboyEmulator.read8(addr, /* record */[
        /* gpu */gpu,
        /* mmu */mmu
      ]);
  var match$1 = dec(match[0], 3, cpu);
  var match$2 = Mmu$GameboyEmulator.write8(addr, match$1[0], /* record */[
        /* gpu */gpu,
        /* mmu */mmu
      ]);
  return Cpu_types$GameboyEmulator.newState(match$1[1], Caml_option.some(match$2[0]), match$2[1], s);
}

var Decrement8 = {
  dec: dec,
  dec_a: dec_a,
  dec_b: dec_b,
  dec_c: dec_c,
  dec_d: dec_d,
  dec_e: dec_e,
  dec_h: dec_h,
  dec_l: dec_l,
  dec_m_hl: dec_m_hl
};

function dec_bc(s) {
  var cpu = s[/* cpu */0];
  var c = cpu[/* registers */3][/* c */2] - 1 & 255;
  var b = c === 255 ? cpu[/* registers */3][/* b */1] - 1 & 255 : cpu[/* registers */3][/* b */1];
  var arg = b;
  var arg$1 = c;
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, Curry._6((function (param) {
                          return (function (param$1, param$2, param$3, param$4, param$5, param$6) {
                              return Cpu$GameboyEmulator.setRegisters(param, arg, arg$1, param$1, param$2, param$3, param$4, param$5, param$6);
                            });
                        })(undefined), undefined, undefined, undefined, undefined, undefined, cpu)), undefined, undefined, s);
}

function dec_de(s) {
  var cpu = s[/* cpu */0];
  var e = cpu[/* registers */3][/* e */4] - 1 & 255;
  var d = e === 255 ? cpu[/* registers */3][/* d */3] - 1 & 255 : cpu[/* registers */3][/* d */3];
  var arg = d;
  var arg$1 = e;
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, Curry._4((function (param, param$1, param$2) {
                          return (function (param$3, param$4, param$5, param$6) {
                              return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, arg, arg$1, param$3, param$4, param$5, param$6);
                            });
                        })(undefined, undefined, undefined), undefined, undefined, undefined, cpu)), undefined, undefined, s);
}

function dec_hl(s) {
  var cpu = Cpu$GameboyEmulator.decrementHl(s[/* cpu */0]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, cpu), undefined, undefined, s);
}

function dec_sp(s) {
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, Cpu$GameboyEmulator.decrementSp(undefined, s[/* cpu */0])), undefined, undefined, s);
}

var Decrement16 = {
  dec_bc: dec_bc,
  dec_de: dec_de,
  dec_hl: dec_hl,
  dec_sp: dec_sp
};

function rlc(cpu, $staropt$star, register) {
  var mCycles = $staropt$star !== undefined ? $staropt$star : 1;
  var match = (register & 128) > 0;
  var highBit = match ? 1 : 0;
  var r = (register << 1) + highBit & 255;
  var partial_arg = Cpu$GameboyEmulator.b2i(r === 0);
  return /* tuple */[
          r,
          (function (eta) {
                var param = undefined;
                var param$1 = eta;
                return Cpu$GameboyEmulator.setFlag(/* Z */0, partial_arg, param, param$1);
              })((function (eta) {
                    var param = undefined;
                    var param$1 = eta;
                    return Cpu$GameboyEmulator.setFlag(/* C */3, highBit, param, param$1);
                  })(Cpu$GameboyEmulator.machineCycles(mCycles, cpu)))
        ];
}

function rl(cpu, $staropt$star, register) {
  var mCycles = $staropt$star !== undefined ? $staropt$star : 1;
  var match = (register & 128) > 0;
  var highBit = match ? 1 : 0;
  var match$1 = Cpu$GameboyEmulator.getFlag(/* C */3, cpu) > 0;
  var carry = match$1 ? 1 : 0;
  var r = (register << 1) + carry & 255;
  return /* tuple */[
          r,
          (function (eta) {
                var param = undefined;
                var param$1 = eta;
                return Cpu$GameboyEmulator.setFlag(/* C */3, highBit, param, param$1);
              })(Cpu$GameboyEmulator.machineCycles(mCycles, cpu))
        ];
}

function rlca(s) {
  var cpu = s[/* cpu */0];
  var match = rlc(cpu, undefined, cpu[/* registers */3][/* a */0]);
  var partial_arg = match[0];
  return Cpu_types$GameboyEmulator.newState((function (eta) {
                  var param = undefined;
                  var param$1 = undefined;
                  var param$2 = undefined;
                  var param$3 = undefined;
                  var param$4 = undefined;
                  var param$5 = undefined;
                  var param$6 = undefined;
                  var param$7 = eta;
                  return Cpu$GameboyEmulator.setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                })(match[1]), undefined, undefined, s);
}

function rlcb(s) {
  var cpu = s[/* cpu */0];
  var match = rlc(cpu, 2, cpu[/* registers */3][/* b */1]);
  var arg = match[0];
  return Cpu_types$GameboyEmulator.newState(Curry._7((function (param) {
                      return (function (param$1, param$2, param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, arg, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined), undefined, undefined, undefined, undefined, undefined, undefined, match[1]), undefined, undefined, s);
}

function rlcc(s) {
  var cpu = s[/* cpu */0];
  var match = rlc(cpu, 2, cpu[/* registers */3][/* c */2]);
  var arg = match[0];
  return Cpu_types$GameboyEmulator.newState(Curry._6((function (param, param$1) {
                      return (function (param$2, param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, arg, param$2, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined), undefined, undefined, undefined, undefined, undefined, match[1]), undefined, undefined, s);
}

function rlcd(s) {
  var cpu = s[/* cpu */0];
  var match = rlc(cpu, 2, cpu[/* registers */3][/* d */3]);
  var arg = match[0];
  return Cpu_types$GameboyEmulator.newState(Curry._5((function (param, param$1, param$2) {
                      return (function (param$3, param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, arg, param$3, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined), undefined, undefined, undefined, undefined, match[1]), undefined, undefined, s);
}

function rlce(s) {
  var cpu = s[/* cpu */0];
  var match = rlc(cpu, 2, cpu[/* registers */3][/* e */4]);
  var arg = match[0];
  return Cpu_types$GameboyEmulator.newState(Curry._4((function (param, param$1, param$2, param$3) {
                      return (function (param$4, param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, arg, param$4, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined), undefined, undefined, undefined, match[1]), undefined, undefined, s);
}

function rlch(s) {
  var cpu = s[/* cpu */0];
  var match = rlc(cpu, 2, cpu[/* registers */3][/* h */5]);
  var arg = match[0];
  return Cpu_types$GameboyEmulator.newState(Curry._3((function (param, param$1, param$2, param$3, param$4) {
                      return (function (param$5, param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, param$4, arg, param$5, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined, undefined), undefined, undefined, match[1]), undefined, undefined, s);
}

function rlcl(s) {
  var cpu = s[/* cpu */0];
  var match = rlc(cpu, 2, cpu[/* registers */3][/* l */6]);
  var arg = match[0];
  return Cpu_types$GameboyEmulator.newState(Curry._2((function (param, param$1, param$2, param$3, param$4, param$5) {
                      return (function (param$6, param$7) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, param$4, param$5, arg, param$6, param$7);
                        });
                    })(undefined, undefined, undefined, undefined, undefined, undefined), undefined, match[1]), undefined, undefined, s);
}

function rla(s) {
  var cpu = s[/* cpu */0];
  var match = rl(cpu, undefined, cpu[/* registers */3][/* a */0]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, (function (eta) {
                      var param = undefined;
                      var param$1 = eta;
                      return Cpu$GameboyEmulator.setFlag(/* Z */0, 0, param, param$1);
                    })(Cpu$GameboyEmulator.wA(match[0], match[1]))), undefined, undefined, s);
}

var Rotation = {
  rlc: rlc,
  rl: rl,
  rlca: rlca,
  rlcb: rlcb,
  rlcc: rlcc,
  rlcd: rlcd,
  rlce: rlce,
  rlch: rlch,
  rlcl: rlcl,
  rla: rla
};

function or_(cpu, value) {
  var match = cpu[/* registers */3];
  var a = match[/* a */0];
  var a$prime = a | value;
  var fZ = Cpu$GameboyEmulator.b2i(a$prime === 0);
  var partial_arg = a$prime & 255;
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = undefined;
              var param$3 = undefined;
              var param$4 = undefined;
              var param$5 = undefined;
              var param$6 = undefined;
              var param$7 = eta;
              return Cpu$GameboyEmulator.setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
            })((function (eta) {
                  var param = undefined;
                  var param$1 = eta;
                  return Cpu$GameboyEmulator.setFlag(/* C */3, 0, param, param$1);
                })((function (eta) {
                      var param = undefined;
                      var param$1 = eta;
                      return Cpu$GameboyEmulator.setFlag(/* H */2, 0, param, param$1);
                    })((function (eta) {
                          var param = undefined;
                          var param$1 = eta;
                          return Cpu$GameboyEmulator.setFlag(/* N */1, 0, param, param$1);
                        })((function (eta) {
                              var param = undefined;
                              var param$1 = eta;
                              return Cpu$GameboyEmulator.setFlag(/* Z */0, fZ, param, param$1);
                            })(cpu)))));
}

function or_a(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = or_(cpu, cpu[/* registers */3][/* a */0]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function or_b(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = or_(cpu, cpu[/* registers */3][/* b */1]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function or_c(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = or_(cpu, cpu[/* registers */3][/* c */2]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function or_d(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = or_(cpu, cpu[/* registers */3][/* d */3]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function or_e(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = or_(cpu, cpu[/* registers */3][/* e */4]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function or_h(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = or_(cpu, cpu[/* registers */3][/* h */5]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function or_l(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = or_(cpu, cpu[/* registers */3][/* l */6]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function or_m_hl(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.rHl(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var cpu$1 = or_(cpu, match[0]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, cpu$1), Caml_option.some(match[1]), undefined, s);
}

function or_n(s) {
  var match = Cpu$GameboyEmulator.readAndIncrementPc(s[/* cpu */0]);
  var match$1 = Mmu$GameboyEmulator.read8(match[0], /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var cpu = or_(match[1], match$1[0]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, cpu), Caml_option.some(match$1[1]), undefined, s);
}

var Or = {
  or_: or_,
  or_a: or_a,
  or_b: or_b,
  or_c: or_c,
  or_d: or_d,
  or_e: or_e,
  or_h: or_h,
  or_l: or_l,
  or_m_hl: or_m_hl,
  or_n: or_n
};

function xor_(cpu, value) {
  var match = cpu[/* registers */3];
  var a = match[/* a */0];
  var a$prime = a ^ value;
  var fZ = Cpu$GameboyEmulator.b2i(a$prime === 0);
  var partial_arg = a$prime & 255;
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = undefined;
              var param$3 = undefined;
              var param$4 = undefined;
              var param$5 = undefined;
              var param$6 = undefined;
              var param$7 = eta;
              return Cpu$GameboyEmulator.setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
            })((function (eta) {
                  var param = undefined;
                  var param$1 = eta;
                  return Cpu$GameboyEmulator.setFlag(/* C */3, 0, param, param$1);
                })((function (eta) {
                      var param = undefined;
                      var param$1 = eta;
                      return Cpu$GameboyEmulator.setFlag(/* H */2, 0, param, param$1);
                    })((function (eta) {
                          var param = undefined;
                          var param$1 = eta;
                          return Cpu$GameboyEmulator.setFlag(/* N */1, 0, param, param$1);
                        })((function (eta) {
                              var param = undefined;
                              var param$1 = eta;
                              return Cpu$GameboyEmulator.setFlag(/* Z */0, fZ, param, param$1);
                            })(cpu)))));
}

function xor_a(s) {
  var cpu = s[/* cpu */0];
  Printf.printf(/* Format */[
        /* String_literal */Block.__(11, [
            "XOR A\n",
            /* End_of_format */0
          ]),
        "XOR A\n"
      ]);
  var cpu$1 = xor_(cpu, cpu[/* registers */3][/* a */0]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function xor_b(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = xor_(cpu, cpu[/* registers */3][/* b */1]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function xor_c(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = xor_(cpu, cpu[/* registers */3][/* c */2]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function xor_d(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = xor_(cpu, cpu[/* registers */3][/* d */3]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function xor_e(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = xor_(cpu, cpu[/* registers */3][/* e */4]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function xor_h(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = xor_(cpu, cpu[/* registers */3][/* h */5]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function xor_l(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = xor_(cpu, cpu[/* registers */3][/* l */6]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function xor_m_hl(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.rHl(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var cpu$1 = xor_(cpu, match[0]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, cpu$1), Caml_option.some(match[1]), undefined, s);
}

function xor_n(s) {
  var match = Cpu$GameboyEmulator.readAndIncrementPc(s[/* cpu */0]);
  var match$1 = Mmu$GameboyEmulator.read8(match[0], /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var cpu = xor_(match[1], match$1[0]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, cpu), Caml_option.some(match$1[1]), undefined, s);
}

var Xor = {
  xor_: xor_,
  xor_a: xor_a,
  xor_b: xor_b,
  xor_c: xor_c,
  xor_d: xor_d,
  xor_e: xor_e,
  xor_h: xor_h,
  xor_l: xor_l,
  xor_m_hl: xor_m_hl,
  xor_n: xor_n
};

function push(param, register1, register2) {
  var cpu = Cpu$GameboyEmulator.decrementSp(undefined, param[/* cpu */0]);
  var match = Mmu$GameboyEmulator.write8(cpu[/* registers */3][/* sp */8], register1, /* record */[
        /* gpu */param[/* gpu */2],
        /* mmu */param[/* mmu */1]
      ]);
  var cpu$1 = Cpu$GameboyEmulator.decrementSp(undefined, cpu);
  var match$1 = Mmu$GameboyEmulator.write8(cpu$1[/* registers */3][/* sp */8], register2, /* record */[
        /* gpu */match[1],
        /* mmu */match[0]
      ]);
  return /* tuple */[
          Cpu$GameboyEmulator.machineCycles(4, cpu$1),
          match$1[0],
          match$1[1]
        ];
}

function push_af(s) {
  var cpu = s[/* cpu */0];
  var match = push(s, cpu[/* registers */3][/* a */0], cpu[/* registers */3][/* f */7]);
  return Cpu_types$GameboyEmulator.newState(match[0], Caml_option.some(match[1]), match[2], s);
}

function push_bc(s) {
  var cpu = s[/* cpu */0];
  var match = push(s, cpu[/* registers */3][/* b */1], cpu[/* registers */3][/* c */2]);
  return Cpu_types$GameboyEmulator.newState(match[0], Caml_option.some(match[1]), match[2], s);
}

function push_de(s) {
  var cpu = s[/* cpu */0];
  var match = push(s, cpu[/* registers */3][/* d */3], cpu[/* registers */3][/* e */4]);
  return Cpu_types$GameboyEmulator.newState(match[0], Caml_option.some(match[1]), match[2], s);
}

function push_hl(s) {
  var cpu = s[/* cpu */0];
  var match = push(s, cpu[/* registers */3][/* h */5], cpu[/* registers */3][/* l */6]);
  return Cpu_types$GameboyEmulator.newState(match[0], Caml_option.some(match[1]), match[2], s);
}

var Push = {
  push: push,
  push_af: push_af,
  push_bc: push_bc,
  push_de: push_de,
  push_hl: push_hl
};

function pop(param) {
  var gpu = param[/* gpu */2];
  var cpu = param[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(cpu[/* registers */3][/* sp */8], /* record */[
        /* gpu */gpu,
        /* mmu */param[/* mmu */1]
      ]);
  var cpu$1 = Cpu$GameboyEmulator.incrementSp(undefined, cpu);
  var match$1 = Mmu$GameboyEmulator.read8(cpu$1[/* registers */3][/* sp */8], /* record */[
        /* gpu */gpu,
        /* mmu */match[1]
      ]);
  var cpu$2 = Cpu$GameboyEmulator.incrementSp(undefined, cpu$1);
  return /* tuple */[
          Cpu$GameboyEmulator.machineCycles(3, cpu$2),
          match$1[1],
          match$1[0],
          match[0]
        ];
}

function pop_af(s) {
  var match = pop(s);
  var a = match[2];
  var arg = match[3];
  var arg$1 = function (param, param$1, param$2, param$3, param$4, param$5) {
    return Curry._8(Cpu$GameboyEmulator.setRegisters, a, param, param$1, param$2, param$3, param$4, param$5, arg);
  };
  return Cpu_types$GameboyEmulator.newState((function (eta) {
                  return Curry._1(arg$1(undefined, undefined, undefined, undefined, undefined, undefined), eta);
                })(match[0]), Caml_option.some(match[1]), undefined, s);
}

function pop_bc(s) {
  var match = pop(s);
  var arg = match[2];
  var arg$1 = match[3];
  return Cpu_types$GameboyEmulator.newState(Curry._6((function (param) {
                      return (function (param$1, param$2, param$3, param$4, param$5, param$6) {
                          return Cpu$GameboyEmulator.setRegisters(param, arg, arg$1, param$1, param$2, param$3, param$4, param$5, param$6);
                        });
                    })(undefined), undefined, undefined, undefined, undefined, undefined, match[0]), Caml_option.some(match[1]), undefined, s);
}

function pop_de(s) {
  var match = pop(s);
  var arg = match[2];
  var arg$1 = match[3];
  return Cpu_types$GameboyEmulator.newState(Curry._4((function (param, param$1, param$2) {
                      return (function (param$3, param$4, param$5, param$6) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, arg, arg$1, param$3, param$4, param$5, param$6);
                        });
                    })(undefined, undefined, undefined), undefined, undefined, undefined, match[0]), Caml_option.some(match[1]), undefined, s);
}

function pop_hl(s) {
  var match = pop(s);
  var arg = match[2];
  var arg$1 = match[3];
  return Cpu_types$GameboyEmulator.newState(Curry._2((function (param, param$1, param$2, param$3, param$4) {
                      return (function (param$5, param$6) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, param$4, arg, arg$1, param$5, param$6);
                        });
                    })(undefined, undefined, undefined, undefined, undefined), undefined, match[0]), Caml_option.some(match[1]), undefined, s);
}

var Pop = {
  pop: pop,
  pop_af: pop_af,
  pop_bc: pop_bc,
  pop_de: pop_de,
  pop_hl: pop_hl
};

function isCarry(value) {
  return value > 65535;
}

function isHalfCarry(a, b) {
  return ((a & 15) + (b & 15) | 0) > 15;
}

function add_a(cpu, value) {
  var match = cpu[/* registers */3];
  var a = match[/* a */0];
  var a$prime = a + value | 0;
  var fC = Cpu$GameboyEmulator.b2i(a$prime > 65535);
  var fH = Cpu$GameboyEmulator.b2i(isHalfCarry(a, value));
  var fZ = Cpu$GameboyEmulator.b2i(a$prime === 0);
  var partial_arg = a$prime & 255;
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = undefined;
              var param$3 = undefined;
              var param$4 = undefined;
              var param$5 = undefined;
              var param$6 = undefined;
              var param$7 = eta;
              return Cpu$GameboyEmulator.setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
            })((function (eta) {
                  var param = undefined;
                  var param$1 = eta;
                  return Cpu$GameboyEmulator.setFlag(/* C */3, fC, param, param$1);
                })((function (eta) {
                      var param = undefined;
                      var param$1 = eta;
                      return Cpu$GameboyEmulator.setFlag(/* H */2, fH, param, param$1);
                    })((function (eta) {
                          var param = undefined;
                          var param$1 = eta;
                          return Cpu$GameboyEmulator.setFlag(/* N */1, 0, param, param$1);
                        })((function (eta) {
                              var param = undefined;
                              var param$1 = eta;
                              return Cpu$GameboyEmulator.setFlag(/* Z */0, fZ, param, param$1);
                            })(cpu)))));
}

function add_a_a(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = add_a(cpu, cpu[/* registers */3][/* a */0]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function add_a_b(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = add_a(cpu, cpu[/* registers */3][/* b */1]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function add_a_c(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = add_a(cpu, cpu[/* registers */3][/* c */2]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function add_a_d(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = add_a(cpu, cpu[/* registers */3][/* d */3]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function add_a_e(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = add_a(cpu, cpu[/* registers */3][/* e */4]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function add_a_h(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = add_a(cpu, cpu[/* registers */3][/* h */5]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function add_a_l(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = add_a(cpu, cpu[/* registers */3][/* l */6]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function add_a_m_hl(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.rHl(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var cpu$1 = add_a(cpu, match[0]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, cpu$1), Caml_option.some(match[1]), undefined, s);
}

function add_a_n(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.programCount(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var cpu$1 = add_a(cpu, match[0]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.incrementPc(1, Cpu$GameboyEmulator.machineCycles(2, cpu$1)), Caml_option.some(match[1]), undefined, s);
}

function adc_a_a(s) {
  var cpu = s[/* cpu */0];
  var carry = Cpu$GameboyEmulator.Flags.getFlag(/* C */3, cpu[/* registers */3][/* f */7]);
  var cpu$1 = add_a(cpu, cpu[/* registers */3][/* a */0] + carry | 0);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function adc_a_b(s) {
  var cpu = s[/* cpu */0];
  var carry = Cpu$GameboyEmulator.Flags.getFlag(/* C */3, cpu[/* registers */3][/* f */7]);
  var cpu$1 = add_a(cpu, cpu[/* registers */3][/* b */1] + carry | 0);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function adc_a_c(s) {
  var cpu = s[/* cpu */0];
  var carry = Cpu$GameboyEmulator.Flags.getFlag(/* C */3, cpu[/* registers */3][/* f */7]);
  var cpu$1 = add_a(cpu, cpu[/* registers */3][/* c */2] + carry | 0);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function adc_a_d(s) {
  var cpu = s[/* cpu */0];
  var carry = Cpu$GameboyEmulator.Flags.getFlag(/* C */3, cpu[/* registers */3][/* f */7]);
  var cpu$1 = add_a(cpu, cpu[/* registers */3][/* d */3] + carry | 0);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function adc_a_e(s) {
  var cpu = s[/* cpu */0];
  var carry = Cpu$GameboyEmulator.Flags.getFlag(/* C */3, cpu[/* registers */3][/* f */7]);
  var cpu$1 = add_a(cpu, cpu[/* registers */3][/* e */4] + carry | 0);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function adc_a_h(s) {
  var cpu = s[/* cpu */0];
  var carry = Cpu$GameboyEmulator.Flags.getFlag(/* C */3, cpu[/* registers */3][/* f */7]);
  var cpu$1 = add_a(cpu, cpu[/* registers */3][/* h */5] + carry | 0);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function adc_a_l(s) {
  var cpu = s[/* cpu */0];
  var carry = Cpu$GameboyEmulator.Flags.getFlag(/* C */3, cpu[/* registers */3][/* f */7]);
  var cpu$1 = add_a(cpu, cpu[/* registers */3][/* l */6] + carry | 0);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function adc_a_m_hl(s) {
  var cpu = s[/* cpu */0];
  var carry = Cpu$GameboyEmulator.Flags.getFlag(/* C */3, cpu[/* registers */3][/* f */7]);
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.rHl(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var cpu$1 = add_a(cpu, match[0] + carry | 0);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, cpu$1), Caml_option.some(match[1]), undefined, s);
}

function adc_a_n(s) {
  var cpu = s[/* cpu */0];
  var carry = Cpu$GameboyEmulator.Flags.getFlag(/* C */3, cpu[/* registers */3][/* f */7]);
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.programCount(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var cpu$1 = add_a(cpu, match[0] + carry | 0);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.incrementPc(1, Cpu$GameboyEmulator.machineCycles(2, cpu$1)), Caml_option.some(match[1]), undefined, s);
}

var Add = {
  isCarry: isCarry,
  isHalfCarry: isHalfCarry,
  add_a: add_a,
  add_a_a: add_a_a,
  add_a_b: add_a_b,
  add_a_c: add_a_c,
  add_a_d: add_a_d,
  add_a_e: add_a_e,
  add_a_h: add_a_h,
  add_a_l: add_a_l,
  add_a_m_hl: add_a_m_hl,
  add_a_n: add_a_n,
  adc_a_a: adc_a_a,
  adc_a_b: adc_a_b,
  adc_a_c: adc_a_c,
  adc_a_d: adc_a_d,
  adc_a_e: adc_a_e,
  adc_a_h: adc_a_h,
  adc_a_l: adc_a_l,
  adc_a_m_hl: adc_a_m_hl,
  adc_a_n: adc_a_n
};

function add_hl(cpu, value) {
  var hl = Cpu$GameboyEmulator.rHl(cpu) + value | 0;
  var h = (hl >>> 8) & 255;
  var l = hl & 255;
  var partial_arg = Cpu$GameboyEmulator.b2i(hl > 65535);
  var partial_arg$1 = Cpu$GameboyEmulator.b2i(isHalfCarry(Cpu$GameboyEmulator.rHl(cpu), value));
  return /* tuple */[
          Cpu$GameboyEmulator.machineCycles(2, (function (eta) {
                    var param = undefined;
                    var param$1 = eta;
                    return Cpu$GameboyEmulator.setFlag(/* C */3, partial_arg, param, param$1);
                  })((function (eta) {
                        var param = undefined;
                        var param$1 = eta;
                        return Cpu$GameboyEmulator.setFlag(/* H */2, partial_arg$1, param, param$1);
                      })((function (eta) {
                            var param = undefined;
                            var param$1 = eta;
                            return Cpu$GameboyEmulator.setFlag(/* N */1, 0, param, param$1);
                          })(cpu)))),
          h,
          l
        ];
}

function add_hl_bc(s) {
  var cpu = s[/* cpu */0];
  var match = add_hl(cpu, Cpu$GameboyEmulator.rBc(cpu));
  var arg = match[1];
  var arg$1 = match[2];
  return Cpu_types$GameboyEmulator.newState(Curry._2((function (param, param$1, param$2, param$3, param$4) {
                      return (function (param$5, param$6) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, param$4, arg, arg$1, param$5, param$6);
                        });
                    })(undefined, undefined, undefined, undefined, undefined), undefined, match[0]), undefined, undefined, s);
}

function add_hl_de(s) {
  var cpu = s[/* cpu */0];
  var match = add_hl(cpu, Cpu$GameboyEmulator.rDe(cpu));
  var arg = match[1];
  var arg$1 = match[2];
  return Cpu_types$GameboyEmulator.newState(Curry._2((function (param, param$1, param$2, param$3, param$4) {
                      return (function (param$5, param$6) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, param$4, arg, arg$1, param$5, param$6);
                        });
                    })(undefined, undefined, undefined, undefined, undefined), undefined, match[0]), undefined, undefined, s);
}

function add_hl_hl(s) {
  var cpu = s[/* cpu */0];
  var match = add_hl(cpu, Cpu$GameboyEmulator.rHl(cpu));
  var arg = match[1];
  var arg$1 = match[2];
  return Cpu_types$GameboyEmulator.newState(Curry._2((function (param, param$1, param$2, param$3, param$4) {
                      return (function (param$5, param$6) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, param$4, arg, arg$1, param$5, param$6);
                        });
                    })(undefined, undefined, undefined, undefined, undefined), undefined, match[0]), undefined, undefined, s);
}

function add_hl_sp(s) {
  var cpu = s[/* cpu */0];
  var match = add_hl(cpu, cpu[/* registers */3][/* sp */8]);
  var arg = match[1];
  var arg$1 = match[2];
  return Cpu_types$GameboyEmulator.newState(Curry._2((function (param, param$1, param$2, param$3, param$4) {
                      return (function (param$5, param$6) {
                          return Cpu$GameboyEmulator.setRegisters(param, param$1, param$2, param$3, param$4, arg, arg$1, param$5, param$6);
                        });
                    })(undefined, undefined, undefined, undefined, undefined), undefined, match[0]), undefined, undefined, s);
}

function add_sp_n(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.programCount(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var partial_arg = Caml_option.some(match[1]);
  var partial_arg$1 = Cpu$GameboyEmulator.machineCycles(4, Cpu$GameboyEmulator.incrementPc(1, Cpu$GameboyEmulator.incrementSp(Cpu$GameboyEmulator.signed(match[0]), (function (eta) {
                    var param = undefined;
                    var param$1 = eta;
                    return Cpu$GameboyEmulator.setFlag(/* N */1, 0, param, param$1);
                  })((function (eta) {
                        var param = undefined;
                        var param$1 = eta;
                        return Cpu$GameboyEmulator.setFlag(/* Z */0, 0, param, param$1);
                      })(cpu)))));
  return (function (eta) {
              var param = undefined;
              var param$1 = eta;
              return Cpu_types$GameboyEmulator.newState(partial_arg$1, partial_arg, param, param$1);
            })(s);
}

var Add_16 = {
  isCarry: isCarry,
  isHalfCarry: isHalfCarry,
  add_hl: add_hl,
  add_hl_bc: add_hl_bc,
  add_hl_de: add_hl_de,
  add_hl_hl: add_hl_hl,
  add_hl_sp: add_hl_sp,
  add_sp_n: add_sp_n
};

var isBorrow = Caml_obj.caml_lessthan;

function isHalfBorrow(a, b) {
  return ((a & 15) - (b & 15) | 0) > 15;
}

function sub(cpu, value) {
  var match = cpu[/* registers */3];
  var a = match[/* a */0];
  var a$prime = a - value | 0;
  var fC = Cpu$GameboyEmulator.b2i(Caml_obj.caml_lessthan(a, value));
  var fH = Cpu$GameboyEmulator.b2i(isHalfBorrow(a, value));
  var fZ = Cpu$GameboyEmulator.b2i(a$prime === 0);
  var partial_arg = a$prime & 255;
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = undefined;
              var param$3 = undefined;
              var param$4 = undefined;
              var param$5 = undefined;
              var param$6 = undefined;
              var param$7 = eta;
              return Cpu$GameboyEmulator.setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
            })((function (eta) {
                  var param = undefined;
                  var param$1 = eta;
                  return Cpu$GameboyEmulator.setFlag(/* C */3, fC, param, param$1);
                })((function (eta) {
                      var param = undefined;
                      var param$1 = eta;
                      return Cpu$GameboyEmulator.setFlag(/* H */2, fH, param, param$1);
                    })((function (eta) {
                          var param = undefined;
                          var param$1 = eta;
                          return Cpu$GameboyEmulator.setFlag(/* N */1, 1, param, param$1);
                        })((function (eta) {
                              var param = undefined;
                              var param$1 = eta;
                              return Cpu$GameboyEmulator.setFlag(/* Z */0, fZ, param, param$1);
                            })(cpu)))));
}

function sub_a(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = sub(cpu, cpu[/* registers */3][/* a */0]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function sub_b(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = sub(cpu, cpu[/* registers */3][/* b */1]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function sub_c(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = sub(cpu, cpu[/* registers */3][/* c */2]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function sub_d(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = sub(cpu, cpu[/* registers */3][/* d */3]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function sub_e(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = sub(cpu, cpu[/* registers */3][/* e */4]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function sub_h(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = sub(cpu, cpu[/* registers */3][/* h */5]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function sub_l(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = sub(cpu, cpu[/* registers */3][/* l */6]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function sub_m_hl(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.rHl(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var cpu$1 = sub(cpu, match[0]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, cpu$1), Caml_option.some(match[1]), undefined, s);
}

function sub_n(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.programCount(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var cpu$1 = sub(cpu, match[0]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.incrementPc(1, Cpu$GameboyEmulator.machineCycles(2, cpu$1)), Caml_option.some(match[1]), undefined, s);
}

function sbc_a(s) {
  var cpu = s[/* cpu */0];
  var carry = Cpu$GameboyEmulator.Flags.getFlag(/* C */3, cpu[/* registers */3][/* f */7]);
  var cpu$1 = sub(cpu, cpu[/* registers */3][/* a */0] + carry | 0);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function sbc_b(s) {
  var cpu = s[/* cpu */0];
  var carry = Cpu$GameboyEmulator.Flags.getFlag(/* C */3, cpu[/* registers */3][/* f */7]);
  var cpu$1 = sub(cpu, cpu[/* registers */3][/* b */1] + carry | 0);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function sbc_c(s) {
  var cpu = s[/* cpu */0];
  var carry = Cpu$GameboyEmulator.Flags.getFlag(/* C */3, cpu[/* registers */3][/* f */7]);
  var cpu$1 = sub(cpu, cpu[/* registers */3][/* c */2] + carry | 0);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function sbc_d(s) {
  var cpu = s[/* cpu */0];
  var carry = Cpu$GameboyEmulator.Flags.getFlag(/* C */3, cpu[/* registers */3][/* f */7]);
  var cpu$1 = sub(cpu, cpu[/* registers */3][/* d */3] + carry | 0);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function sbc_e(s) {
  var cpu = s[/* cpu */0];
  var carry = Cpu$GameboyEmulator.Flags.getFlag(/* C */3, cpu[/* registers */3][/* f */7]);
  var cpu$1 = sub(cpu, cpu[/* registers */3][/* e */4] + carry | 0);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function sbc_h(s) {
  var cpu = s[/* cpu */0];
  var carry = Cpu$GameboyEmulator.Flags.getFlag(/* C */3, cpu[/* registers */3][/* f */7]);
  var cpu$1 = sub(cpu, cpu[/* registers */3][/* h */5] + carry | 0);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function sbc_l(s) {
  var cpu = s[/* cpu */0];
  var carry = Cpu$GameboyEmulator.Flags.getFlag(/* C */3, cpu[/* registers */3][/* f */7]);
  var cpu$1 = sub(cpu, cpu[/* registers */3][/* l */6] + carry | 0);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function sbc_m_hl(s) {
  var cpu = s[/* cpu */0];
  var carry = Cpu$GameboyEmulator.Flags.getFlag(/* C */3, cpu[/* registers */3][/* f */7]);
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.rHl(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var cpu$1 = sub(cpu, match[0] + carry | 0);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, cpu$1), Caml_option.some(match[1]), undefined, s);
}

var Sub = {
  isBorrow: isBorrow,
  isHalfBorrow: isHalfBorrow,
  sub: sub,
  sub_a: sub_a,
  sub_b: sub_b,
  sub_c: sub_c,
  sub_d: sub_d,
  sub_e: sub_e,
  sub_h: sub_h,
  sub_l: sub_l,
  sub_m_hl: sub_m_hl,
  sub_n: sub_n,
  sbc_a: sbc_a,
  sbc_b: sbc_b,
  sbc_c: sbc_c,
  sbc_d: sbc_d,
  sbc_e: sbc_e,
  sbc_h: sbc_h,
  sbc_l: sbc_l,
  sbc_m_hl: sbc_m_hl
};

function and_(cpu, value) {
  var match = cpu[/* registers */3];
  var a = match[/* a */0];
  var a$prime = a & value;
  var fZ = Cpu$GameboyEmulator.b2i(a$prime === 0);
  var partial_arg = a$prime & 255;
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = undefined;
              var param$3 = undefined;
              var param$4 = undefined;
              var param$5 = undefined;
              var param$6 = undefined;
              var param$7 = eta;
              return Cpu$GameboyEmulator.setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
            })((function (eta) {
                  var param = undefined;
                  var param$1 = eta;
                  return Cpu$GameboyEmulator.setFlag(/* C */3, 0, param, param$1);
                })((function (eta) {
                      var param = undefined;
                      var param$1 = eta;
                      return Cpu$GameboyEmulator.setFlag(/* H */2, 1, param, param$1);
                    })((function (eta) {
                          var param = undefined;
                          var param$1 = eta;
                          return Cpu$GameboyEmulator.setFlag(/* N */1, 0, param, param$1);
                        })((function (eta) {
                              var param = undefined;
                              var param$1 = eta;
                              return Cpu$GameboyEmulator.setFlag(/* Z */0, fZ, param, param$1);
                            })(cpu)))));
}

function and_a(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = and_(cpu, cpu[/* registers */3][/* a */0]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function and_b(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = and_(cpu, cpu[/* registers */3][/* b */1]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function and_c(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = and_(cpu, cpu[/* registers */3][/* c */2]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function and_d(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = and_(cpu, cpu[/* registers */3][/* d */3]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function and_e(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = and_(cpu, cpu[/* registers */3][/* e */4]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function and_h(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = and_(cpu, cpu[/* registers */3][/* h */5]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function and_l(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = and_(cpu, cpu[/* registers */3][/* l */6]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function and_m_hl(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.rHl(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var cpu$1 = and_(cpu, match[0]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, cpu$1), Caml_option.some(match[1]), undefined, s);
}

function and_n(s) {
  var match = Cpu$GameboyEmulator.readAndIncrementPc(s[/* cpu */0]);
  var match$1 = Mmu$GameboyEmulator.read8(match[0], /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var cpu = and_(match[1], match$1[0]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, cpu), Caml_option.some(match$1[1]), undefined, s);
}

var And = {
  and_: and_,
  and_a: and_a,
  and_b: and_b,
  and_c: and_c,
  and_d: and_d,
  and_e: and_e,
  and_h: and_h,
  and_l: and_l,
  and_m_hl: and_m_hl,
  and_n: and_n
};

var isBorrow$1 = Caml_obj.caml_lessthan;

function isHalfBorrow$1(a, b) {
  return ((a & 15) - (b & 15) | 0) > 15;
}

function cp(cpu, value) {
  var match = cpu[/* registers */3];
  var a = match[/* a */0];
  var a$prime = a - value | 0;
  var fC = Cpu$GameboyEmulator.b2i(Caml_obj.caml_lessthan(a, value));
  var fH = Cpu$GameboyEmulator.b2i(isHalfBorrow$1(a, value));
  var fZ = Cpu$GameboyEmulator.b2i(a$prime === 0);
  return (function (eta) {
              var param = undefined;
              var param$1 = eta;
              return Cpu$GameboyEmulator.setFlag(/* C */3, fC, param, param$1);
            })((function (eta) {
                  var param = undefined;
                  var param$1 = eta;
                  return Cpu$GameboyEmulator.setFlag(/* H */2, fH, param, param$1);
                })((function (eta) {
                      var param = undefined;
                      var param$1 = eta;
                      return Cpu$GameboyEmulator.setFlag(/* N */1, 1, param, param$1);
                    })((function (eta) {
                          var param = undefined;
                          var param$1 = eta;
                          return Cpu$GameboyEmulator.setFlag(/* Z */0, fZ, param, param$1);
                        })(cpu))));
}

function cp_a(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = cp(cpu, cpu[/* registers */3][/* a */0]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function cp_b(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = cp(cpu, cpu[/* registers */3][/* b */1]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function cp_c(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = cp(cpu, cpu[/* registers */3][/* c */2]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function cp_d(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = cp(cpu, cpu[/* registers */3][/* d */3]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function cp_e(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = cp(cpu, cpu[/* registers */3][/* e */4]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function cp_h(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = cp(cpu, cpu[/* registers */3][/* h */5]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function cp_l(s) {
  var cpu = s[/* cpu */0];
  var cpu$1 = cp(cpu, cpu[/* registers */3][/* l */6]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(1, cpu$1), undefined, undefined, s);
}

function cp_m_hl(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.rHl(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var cpu$1 = cp(cpu, match[0]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, cpu$1), Caml_option.some(match[1]), undefined, s);
}

function cp_n(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.programCount(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var cpu$1 = cp(cpu, match[0]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.incrementPc(1, Cpu$GameboyEmulator.machineCycles(2, cpu$1)), Caml_option.some(match[1]), undefined, s);
}

var Cp = {
  isBorrow: isBorrow$1,
  isHalfBorrow: isHalfBorrow$1,
  cp: cp,
  cp_a: cp_a,
  cp_b: cp_b,
  cp_c: cp_c,
  cp_d: cp_d,
  cp_e: cp_e,
  cp_h: cp_h,
  cp_l: cp_l,
  cp_m_hl: cp_m_hl,
  cp_n: cp_n
};

function daa(s) {
  var cpu = s[/* cpu */0];
  console.log("DAA");
  var match = cpu[/* registers */3];
  var a = match[/* a */0];
  var f = match[/* f */7];
  var a$1 = (f & 32) !== 0 || (a & 15) > 9 ? a + 6 | 0 : a;
  cpu[/* registers */3][/* f */7] = cpu[/* registers */3][/* f */7] & 239;
  var match$1 = (cpu[/* registers */3][/* f */7] & 32) !== 0 || a$1 > 153 ? /* tuple */[
      a$1 + 96 | 0,
      cpu[/* registers */3][/* f */7] | 16
    ] : /* tuple */[
      a$1,
      cpu[/* registers */3][/* f */7]
    ];
  var a$2 = match$1[0] & 255;
  var arg = match$1[1];
  var arg$1 = function (param, param$1, param$2, param$3, param$4, param$5) {
    return Curry._8(Cpu$GameboyEmulator.setRegisters, a$2, param, param$1, param$2, param$3, param$4, param$5, arg);
  };
  var cpu$1 = Cpu$GameboyEmulator.machineCycles(1, (function (eta) {
            var param = undefined;
            var param$1 = eta;
            return Cpu$GameboyEmulator.setFlag(/* C */3, 0, param, param$1);
          })((function (eta) {
                var param = undefined;
                var param$1 = eta;
                return Cpu$GameboyEmulator.setFlag(/* H */2, 0, param, param$1);
              })((function (eta) {
                    var param = undefined;
                    var param$1 = eta;
                    return Cpu$GameboyEmulator.setFlag(/* N */1, 0, param, param$1);
                  })((function (eta) {
                        return Curry._1(arg$1(undefined, undefined, undefined, undefined, undefined, undefined), eta);
                      })(cpu)))));
  return Cpu_types$GameboyEmulator.newState(cpu$1, undefined, undefined, s);
}

function cpl(s) {
  var cpu = s[/* cpu */0];
  var a = cpu[/* registers */3][/* a */0] ^ 255;
  var partial_arg = a;
  var cpu$1 = Cpu$GameboyEmulator.machineCycles(1, (function (eta) {
            var param = undefined;
            var param$1 = eta;
            return Cpu$GameboyEmulator.setFlag(/* H */2, 1, param, param$1);
          })((function (eta) {
                var param = undefined;
                var param$1 = eta;
                return Cpu$GameboyEmulator.setFlag(/* N */1, 1, param, param$1);
              })((function (eta) {
                    var param = undefined;
                    var param$1 = undefined;
                    var param$2 = undefined;
                    var param$3 = undefined;
                    var param$4 = undefined;
                    var param$5 = undefined;
                    var param$6 = undefined;
                    var param$7 = eta;
                    return Cpu$GameboyEmulator.setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                  })(cpu))));
  return Cpu_types$GameboyEmulator.newState(cpu$1, undefined, undefined, s);
}

function ccf(s) {
  var partial_arg = Cpu$GameboyEmulator.machineCycles(1, Cpu$GameboyEmulator.toggleFlag(/* C */3, (function (eta) {
                var param = undefined;
                var param$1 = eta;
                return Cpu$GameboyEmulator.setFlag(/* H */2, 0, param, param$1);
              })((function (eta) {
                    var param = undefined;
                    var param$1 = eta;
                    return Cpu$GameboyEmulator.setFlag(/* N */1, 0, param, param$1);
                  })(s[/* cpu */0]))));
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return Cpu_types$GameboyEmulator.newState(partial_arg, param, param$1, param$2);
            })(s);
}

function scf(s) {
  var partial_arg = Cpu$GameboyEmulator.machineCycles(1, (function (eta) {
            var param = undefined;
            var param$1 = eta;
            return Cpu$GameboyEmulator.setFlag(/* C */3, 1, param, param$1);
          })((function (eta) {
                var param = undefined;
                var param$1 = eta;
                return Cpu$GameboyEmulator.setFlag(/* H */2, 0, param, param$1);
              })((function (eta) {
                    var param = undefined;
                    var param$1 = eta;
                    return Cpu$GameboyEmulator.setFlag(/* N */1, 0, param, param$1);
                  })(s[/* cpu */0]))));
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return Cpu_types$GameboyEmulator.newState(partial_arg, param, param$1, param$2);
            })(s);
}

function halt$1(s) {
  var cpu = s[/* cpu */0];
  cpu[/* halt */1] = 1;
  return Cpu_types$GameboyEmulator.newState(cpu, undefined, undefined, s);
}

var Misc = {
  daa: daa,
  cpl: cpl,
  ccf: ccf,
  scf: scf,
  halt: halt$1
};

function jp_nn(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read16(Cpu$GameboyEmulator.programCount(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  cpu[/* registers */3][/* pc */9] = match[0];
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(3, cpu), Caml_option.some(match[1]), undefined, s);
}

function jp_m_hl(s) {
  var cpu = s[/* cpu */0];
  cpu[/* registers */3][/* pc */9] = Cpu$GameboyEmulator.rHl(cpu);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(4, cpu), Caml_option.some(s[/* mmu */1]), undefined, s);
}

function jp_nz_nn(s) {
  var mmu = s[/* mmu */1];
  var cpu = s[/* cpu */0];
  var match;
  if (Cpu$GameboyEmulator.Flags.isSet(/* Z */0, cpu[/* registers */3][/* f */7])) {
    var pc$prime = Cpu$GameboyEmulator.programCount(cpu) + 2 | 0;
    match = /* tuple */[
      pc$prime,
      mmu,
      3
    ];
  } else {
    var match$1 = Mmu$GameboyEmulator.read16(Cpu$GameboyEmulator.programCount(cpu), /* record */[
          /* gpu */s[/* gpu */2],
          /* mmu */mmu
        ]);
    match = /* tuple */[
      match$1[0],
      match$1[1],
      4
    ];
  }
  cpu[/* registers */3][/* pc */9] = match[0];
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(match[2], cpu), Caml_option.some(match[1]), undefined, s);
}

function jp_z_nn(s) {
  var mmu = s[/* mmu */1];
  var cpu = s[/* cpu */0];
  var match;
  if (Cpu$GameboyEmulator.Flags.isSet(/* Z */0, cpu[/* registers */3][/* f */7])) {
    var match$1 = Mmu$GameboyEmulator.read16(Cpu$GameboyEmulator.programCount(cpu), /* record */[
          /* gpu */s[/* gpu */2],
          /* mmu */mmu
        ]);
    match = /* tuple */[
      match$1[0],
      match$1[1],
      4
    ];
  } else {
    var pc$prime = Cpu$GameboyEmulator.programCount(cpu) + 2 | 0;
    match = /* tuple */[
      pc$prime,
      mmu,
      3
    ];
  }
  cpu[/* registers */3][/* pc */9] = match[0];
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(match[2], cpu), Caml_option.some(match[1]), undefined, s);
}

function jp_nc_nn(s) {
  var mmu = s[/* mmu */1];
  var cpu = s[/* cpu */0];
  var match;
  if (Cpu$GameboyEmulator.Flags.isSet(/* C */3, cpu[/* registers */3][/* f */7])) {
    var pc$prime = Cpu$GameboyEmulator.programCount(cpu) + 2 | 0;
    match = /* tuple */[
      pc$prime,
      mmu,
      3
    ];
  } else {
    var match$1 = Mmu$GameboyEmulator.read16(Cpu$GameboyEmulator.programCount(cpu), /* record */[
          /* gpu */s[/* gpu */2],
          /* mmu */mmu
        ]);
    match = /* tuple */[
      match$1[0],
      match$1[1],
      4
    ];
  }
  cpu[/* registers */3][/* pc */9] = match[0];
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(match[2], cpu), Caml_option.some(match[1]), undefined, s);
}

function jp_c_nn(s) {
  var mmu = s[/* mmu */1];
  var cpu = s[/* cpu */0];
  var match;
  if (Cpu$GameboyEmulator.Flags.isSet(/* C */3, cpu[/* registers */3][/* f */7])) {
    var match$1 = Mmu$GameboyEmulator.read16(Cpu$GameboyEmulator.programCount(cpu), /* record */[
          /* gpu */s[/* gpu */2],
          /* mmu */mmu
        ]);
    match = /* tuple */[
      match$1[0],
      match$1[1],
      4
    ];
  } else {
    var pc$prime = Cpu$GameboyEmulator.programCount(cpu) + 2 | 0;
    match = /* tuple */[
      pc$prime,
      mmu,
      3
    ];
  }
  cpu[/* registers */3][/* pc */9] = match[0];
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(match[2], cpu), Caml_option.some(match[1]), undefined, s);
}

function jr_n(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(Cpu$GameboyEmulator.programCount(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, Cpu$GameboyEmulator.incrementPc(Cpu$GameboyEmulator.signed(match[0]) + 1 | 0, cpu)), Caml_option.some(match[1]), undefined, s);
}

function jr_nz_n(s) {
  var cpu = s[/* cpu */0];
  var pc = Cpu$GameboyEmulator.programCount(cpu);
  var match = Mmu$GameboyEmulator.read8(pc, /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var match$1 = Cpu$GameboyEmulator.Flags.isSet(/* Z */0, cpu[/* registers */3][/* f */7]) ? /* tuple */[
      pc + 1 | 0,
      2
    ] : /* tuple */[
      (pc + 1 | 0) + Cpu$GameboyEmulator.signed(match[0]) | 0,
      3
    ];
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(match$1[1], Cpu$GameboyEmulator.incrementPc(match$1[0], cpu)), Caml_option.some(match[1]), undefined, s);
}

function jr_z_n(s) {
  var cpu = s[/* cpu */0];
  var pc = Cpu$GameboyEmulator.programCount(cpu);
  var match = Mmu$GameboyEmulator.read8(pc, /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var match$1 = Cpu$GameboyEmulator.Flags.isSet(/* Z */0, cpu[/* registers */3][/* f */7]) ? /* tuple */[
      (pc + 1 | 0) + Cpu$GameboyEmulator.signed(match[0]) | 0,
      3
    ] : /* tuple */[
      pc + 1 | 0,
      2
    ];
  var partial_arg = Caml_option.some(match[1]);
  var partial_arg$1 = Cpu$GameboyEmulator.machineCycles(match$1[1], Cpu$GameboyEmulator.incrementPc(match$1[0], cpu));
  return (function (eta) {
              var param = undefined;
              var param$1 = eta;
              return Cpu_types$GameboyEmulator.newState(partial_arg$1, partial_arg, param, param$1);
            })(s);
}

function jr_nc_n(s) {
  var cpu = s[/* cpu */0];
  var pc = Cpu$GameboyEmulator.programCount(cpu);
  var match = Mmu$GameboyEmulator.read8(pc, /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var match$1 = Cpu$GameboyEmulator.Flags.isSet(/* C */3, cpu[/* registers */3][/* f */7]) ? /* tuple */[
      pc + 1 | 0,
      2
    ] : /* tuple */[
      (pc + 1 | 0) + Cpu$GameboyEmulator.signed(match[0]) | 0,
      3
    ];
  var partial_arg = Caml_option.some(match[1]);
  var partial_arg$1 = Cpu$GameboyEmulator.machineCycles(match$1[1], Cpu$GameboyEmulator.incrementPc(match$1[0], cpu));
  return (function (eta) {
              var param = undefined;
              var param$1 = eta;
              return Cpu_types$GameboyEmulator.newState(partial_arg$1, partial_arg, param, param$1);
            })(s);
}

function jr_c_n(s) {
  var cpu = s[/* cpu */0];
  var pc = Cpu$GameboyEmulator.programCount(cpu);
  var match = Mmu$GameboyEmulator.read8(pc, /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var match$1 = Cpu$GameboyEmulator.Flags.isSet(/* C */3, cpu[/* registers */3][/* f */7]) ? /* tuple */[
      (pc + 1 | 0) + Cpu$GameboyEmulator.signed(match[0]) | 0,
      3
    ] : /* tuple */[
      pc + 1 | 0,
      2
    ];
  var partial_arg = Caml_option.some(match[1]);
  var partial_arg$1 = Cpu$GameboyEmulator.machineCycles(match$1[1], Cpu$GameboyEmulator.incrementPc(match$1[0], cpu));
  return (function (eta) {
              var param = undefined;
              var param$1 = eta;
              return Cpu_types$GameboyEmulator.newState(partial_arg$1, partial_arg, param, param$1);
            })(s);
}

var Jump = {
  jp_nn: jp_nn,
  jp_m_hl: jp_m_hl,
  jp_nz_nn: jp_nz_nn,
  jp_z_nn: jp_z_nn,
  jp_nc_nn: jp_nc_nn,
  jp_c_nn: jp_c_nn,
  jr_n: jr_n,
  jr_nz_n: jr_nz_n,
  jr_z_n: jr_z_n,
  jr_nc_n: jr_nc_n,
  jr_c_n: jr_c_n
};

function call(param) {
  var cpu = Cpu$GameboyEmulator.decrementSp(2, param[/* cpu */0]);
  var match = Mmu$GameboyEmulator.write16(cpu[/* registers */3][/* sp */8], Cpu$GameboyEmulator.programCount(cpu) + 2 | 0, /* record */[
        /* gpu */param[/* gpu */2],
        /* mmu */param[/* mmu */1]
      ]);
  var match$1 = Mmu$GameboyEmulator.read16(Cpu$GameboyEmulator.programCount(cpu), /* record */[
        /* gpu */match[1],
        /* mmu */match[0]
      ]);
  return /* tuple */[
          match$1[0],
          match$1[1]
        ];
}

function call_nn(s) {
  var match = call(s);
  var cpu = Cpu$GameboyEmulator.machineCycles(4, Cpu$GameboyEmulator.setPc(match[0], s[/* cpu */0]));
  return Cpu_types$GameboyEmulator.newState(cpu, Caml_option.some(match[1]), undefined, s);
}

function call_nz_nn(s) {
  var cpu = Cpu$GameboyEmulator.machineCycles(3, s[/* cpu */0]);
  var pc = Cpu$GameboyEmulator.programCount(cpu);
  var match;
  if (Cpu$GameboyEmulator.Flags.isSet(/* Z */0, cpu[/* registers */3][/* f */7])) {
    match = /* tuple */[
      pc + 2 | 0,
      s[/* mmu */1],
      0
    ];
  } else {
    var match$1 = call(s);
    match = /* tuple */[
      match$1[0],
      match$1[1],
      1
    ];
  }
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(match[2], Cpu$GameboyEmulator.setPc(match[0], cpu)), Caml_option.some(match[1]), undefined, s);
}

var Call = {
  call: call,
  call_nn: call_nn,
  call_nz_nn: call_nz_nn
};

function ret_(cpu, mmu, gpu) {
  var match = Mmu$GameboyEmulator.read16(cpu[/* registers */3][/* sp */8], /* record */[
        /* gpu */gpu,
        /* mmu */mmu
      ]);
  var cpu$1 = Cpu$GameboyEmulator.setPc(match[0], cpu);
  cpu$1[/* registers */3][/* sp */8] = cpu$1[/* registers */3][/* sp */8] + 2 | 0;
  return /* tuple */[
          cpu$1,
          match[1]
        ];
}

function ret(s) {
  var match = ret_(s[/* cpu */0], s[/* mmu */1], s[/* gpu */2]);
  return Cpu_types$GameboyEmulator.newState(Cpu$GameboyEmulator.machineCycles(2, match[0]), Caml_option.some(match[1]), undefined, s);
}

function ret_nz(s) {
  var mmu = s[/* mmu */1];
  var cpu = s[/* cpu */0];
  var match;
  if (Cpu$GameboyEmulator.Flags.isSet(/* Z */0, cpu[/* registers */3][/* f */7])) {
    match = /* tuple */[
      Cpu$GameboyEmulator.machineCycles(1, cpu),
      mmu
    ];
  } else {
    var match$1 = ret_(cpu, mmu, s[/* gpu */2]);
    match = /* tuple */[
      Cpu$GameboyEmulator.machineCycles(3, match$1[0]),
      match$1[1]
    ];
  }
  return Cpu_types$GameboyEmulator.newState(match[0], Caml_option.some(match[1]), undefined, s);
}

function ret_z(s) {
  var mmu = s[/* mmu */1];
  var cpu = s[/* cpu */0];
  var match;
  if (Cpu$GameboyEmulator.Flags.isSet(/* Z */0, cpu[/* registers */3][/* f */7])) {
    var match$1 = ret_(cpu, mmu, s[/* gpu */2]);
    match = /* tuple */[
      Cpu$GameboyEmulator.machineCycles(3, match$1[0]),
      match$1[1]
    ];
  } else {
    match = /* tuple */[
      Cpu$GameboyEmulator.machineCycles(1, cpu),
      mmu
    ];
  }
  return Cpu_types$GameboyEmulator.newState(match[0], Caml_option.some(match[1]), undefined, s);
}

function ret_nc(s) {
  var mmu = s[/* mmu */1];
  var cpu = s[/* cpu */0];
  var match;
  if (Cpu$GameboyEmulator.Flags.isSet(/* C */3, cpu[/* registers */3][/* f */7])) {
    match = /* tuple */[
      Cpu$GameboyEmulator.machineCycles(1, cpu),
      mmu
    ];
  } else {
    var match$1 = ret_(cpu, mmu, s[/* gpu */2]);
    match = /* tuple */[
      Cpu$GameboyEmulator.machineCycles(3, match$1[0]),
      match$1[1]
    ];
  }
  return Cpu_types$GameboyEmulator.newState(match[0], Caml_option.some(match[1]), undefined, s);
}

function ret_c(s) {
  var mmu = s[/* mmu */1];
  var cpu = s[/* cpu */0];
  var match;
  if (Cpu$GameboyEmulator.Flags.isSet(/* C */3, cpu[/* registers */3][/* f */7])) {
    var match$1 = ret_(cpu, mmu, s[/* gpu */2]);
    match = /* tuple */[
      Cpu$GameboyEmulator.machineCycles(3, match$1[0]),
      match$1[1]
    ];
  } else {
    match = /* tuple */[
      Cpu$GameboyEmulator.machineCycles(1, cpu),
      mmu
    ];
  }
  return Cpu_types$GameboyEmulator.newState(match[0], Caml_option.some(match[1]), undefined, s);
}

var Ret = {
  ret_: ret_,
  ret: ret,
  ret_nz: ret_nz,
  ret_z: ret_z,
  ret_nc: ret_nc,
  ret_c: ret_c
};

var Rst = { };

function cb_exec(param) {
  var gpu = param[/* gpu */2];
  var match = Cpu$GameboyEmulator.readAndIncrementPc(param[/* cpu */0]);
  var match$1 = Mmu$GameboyEmulator.read8(match[0] & 65535, /* record */[
        /* gpu */gpu,
        /* mmu */param[/* mmu */1]
      ]);
  var nextInstr = match$1[0];
  var cbop;
  var exit = 0;
  switch (nextInstr) {
    case 16 :
        cbop = Cpu_cbops$GameboyEmulator.Rl.rl_b;
        break;
    case 17 :
        cbop = Cpu_cbops$GameboyEmulator.Rl.rl_c;
        break;
    case 18 :
        cbop = Cpu_cbops$GameboyEmulator.Rl.rl_d;
        break;
    case 19 :
        cbop = Cpu_cbops$GameboyEmulator.Rl.rl_e;
        break;
    case 20 :
        cbop = Cpu_cbops$GameboyEmulator.Rl.rl_h;
        break;
    case 21 :
        cbop = Cpu_cbops$GameboyEmulator.Rl.rl_l;
        break;
    case 22 :
        cbop = Cpu_cbops$GameboyEmulator.Rl.rl_m_hl;
        break;
    case 23 :
        cbop = Cpu_cbops$GameboyEmulator.Rl.rl_a;
        break;
    case 48 :
        cbop = Cpu_cbops$GameboyEmulator.Swap.swap_b;
        break;
    case 55 :
        cbop = Cpu_cbops$GameboyEmulator.Swap.swap_a;
        break;
    case 24 :
    case 25 :
    case 26 :
    case 27 :
    case 28 :
    case 29 :
    case 30 :
    case 31 :
    case 32 :
    case 33 :
    case 34 :
    case 35 :
    case 36 :
    case 37 :
    case 38 :
    case 39 :
    case 40 :
    case 41 :
    case 42 :
    case 43 :
    case 44 :
    case 45 :
    case 46 :
    case 47 :
    case 49 :
    case 50 :
    case 51 :
    case 52 :
    case 53 :
    case 54 :
    case 56 :
    case 57 :
    case 58 :
    case 59 :
    case 60 :
    case 61 :
    case 62 :
    case 63 :
        exit = 1;
        break;
    case 64 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit0.bit_b;
        break;
    case 65 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit0.bit_c;
        break;
    case 66 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit0.bit_d;
        break;
    case 67 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit0.bit_e;
        break;
    case 68 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit0.bit_h;
        break;
    case 69 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit0.bit_l;
        break;
    case 70 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit0.bit_m_hl;
        break;
    case 71 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit0.bit_a;
        break;
    case 72 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit1.bit_b;
        break;
    case 73 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit1.bit_c;
        break;
    case 74 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit1.bit_d;
        break;
    case 75 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit1.bit_e;
        break;
    case 76 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit1.bit_h;
        break;
    case 77 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit1.bit_l;
        break;
    case 78 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit1.bit_m_hl;
        break;
    case 79 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit1.bit_a;
        break;
    case 80 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit2.bit_b;
        break;
    case 81 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit2.bit_c;
        break;
    case 82 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit2.bit_d;
        break;
    case 83 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit2.bit_e;
        break;
    case 84 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit2.bit_h;
        break;
    case 85 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit2.bit_l;
        break;
    case 86 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit2.bit_m_hl;
        break;
    case 87 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit2.bit_a;
        break;
    case 88 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit3.bit_b;
        break;
    case 89 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit3.bit_c;
        break;
    case 90 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit3.bit_d;
        break;
    case 91 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit3.bit_e;
        break;
    case 92 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit3.bit_h;
        break;
    case 93 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit3.bit_l;
        break;
    case 94 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit3.bit_m_hl;
        break;
    case 95 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit3.bit_a;
        break;
    case 96 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit4.bit_b;
        break;
    case 97 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit4.bit_c;
        break;
    case 98 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit4.bit_d;
        break;
    case 99 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit4.bit_e;
        break;
    case 100 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit4.bit_h;
        break;
    case 101 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit4.bit_l;
        break;
    case 102 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit4.bit_m_hl;
        break;
    case 103 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit4.bit_a;
        break;
    case 104 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit5.bit_b;
        break;
    case 105 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit5.bit_c;
        break;
    case 106 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit5.bit_d;
        break;
    case 107 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit5.bit_e;
        break;
    case 108 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit5.bit_h;
        break;
    case 109 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit5.bit_l;
        break;
    case 110 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit5.bit_m_hl;
        break;
    case 111 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit5.bit_a;
        break;
    case 112 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit6.bit_b;
        break;
    case 113 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit6.bit_c;
        break;
    case 114 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit6.bit_d;
        break;
    case 115 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit6.bit_e;
        break;
    case 116 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit6.bit_h;
        break;
    case 117 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit6.bit_l;
        break;
    case 118 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit6.bit_m_hl;
        break;
    case 119 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit6.bit_a;
        break;
    case 120 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit7.bit_b;
        break;
    case 121 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit7.bit_c;
        break;
    case 122 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit7.bit_d;
        break;
    case 123 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit7.bit_e;
        break;
    case 124 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit7.bit_h;
        break;
    case 125 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit7.bit_l;
        break;
    case 126 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit7.bit_m_hl;
        break;
    case 127 :
        cbop = Cpu_cbops$GameboyEmulator.Bit.Bit7.bit_a;
        break;
    default:
      exit = 1;
  }
  if (exit === 1) {
    throw [
          Cpu$GameboyEmulator.UnhandledInstruction,
          Curry._1(Printf.sprintf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "Unhandled instruction, CB ",
                        /* Int */Block.__(4, [
                            /* Int_x */6,
                            /* No_padding */0,
                            /* No_precision */0,
                            /* End_of_format */0
                          ])
                      ]),
                    "Unhandled instruction, CB %x"
                  ]), nextInstr)
        ];
  }
  return Curry._1(cbop, /* record */[
              /* cpu */match[1],
              /* mmu */match$1[1],
              /* gpu */gpu
            ]);
}

var Cb = {
  cb_exec: cb_exec
};

var Ops = {
  nop: nop,
  halt: halt,
  Interrupts: Interrupts,
  Load_nn_8: Load_nn_8,
  Load_r1_r2: Load_r1_r2,
  Load_nn_16: Load_nn_16,
  Load_8_A: Load_8_A,
  Load_A_8: Load_A_8,
  Increment16: Increment16,
  Increment8: Increment8,
  Decrement8: Decrement8,
  Decrement16: Decrement16,
  Rotation: Rotation,
  Or: Or,
  Xor: Xor,
  Push: Push,
  Pop: Pop,
  Add: Add,
  Add_16: Add_16,
  Sub: Sub,
  And: And,
  Cp: Cp,
  Misc: Misc,
  Jump: Jump,
  Call: Call,
  Ret: Ret,
  Rst: Rst,
  CbOps: 0,
  Swap: 0,
  Cb: Cb
};

function exec(instruction) {
  switch (instruction) {
    case 0 :
        return nop;
    case 1 :
        return ld_bc_nn;
    case 2 :
        return ld_m_bc_a;
    case 3 :
        return inc_bc;
    case 4 :
        return inc_b;
    case 5 :
        return dec_b;
    case 6 :
        return ld_b_n;
    case 7 :
        return rlca;
    case 8 :
        return ld_m_nn_sp;
    case 9 :
        return add_hl_bc;
    case 10 :
        return ld_a_m_bc;
    case 11 :
        return dec_bc;
    case 12 :
        return inc_c;
    case 13 :
        return dec_c;
    case 14 :
        return ld_c_n;
    case 17 :
        return ld_de_nn;
    case 18 :
        return ld_m_de_a;
    case 19 :
        return inc_de;
    case 20 :
        return inc_d;
    case 21 :
        return dec_d;
    case 22 :
        return ld_d_n;
    case 23 :
        return rla;
    case 24 :
        return jr_n;
    case 25 :
        return add_hl_de;
    case 26 :
        return ld_a_m_de;
    case 27 :
        return dec_de;
    case 28 :
        return inc_e;
    case 29 :
        return dec_e;
    case 30 :
        return ld_e_n;
    case 32 :
        return jr_nz_n;
    case 33 :
        return ld_hl_nn;
    case 34 :
        return ld_hli_a;
    case 35 :
        return inc_hl;
    case 36 :
        return inc_h;
    case 37 :
        return dec_h;
    case 38 :
        return ld_h_n;
    case 39 :
        return daa;
    case 40 :
        return jr_z_n;
    case 41 :
        return add_hl_hl;
    case 42 :
        return ld_a_m_hli;
    case 43 :
        return dec_hl;
    case 44 :
        return inc_l;
    case 45 :
        return dec_l;
    case 46 :
        return ld_l_n;
    case 47 :
        return cpl;
    case 48 :
        return jr_nc_n;
    case 49 :
        return ld_sp_nn;
    case 50 :
        return ld_hld_a;
    case 51 :
        return inc_sp;
    case 53 :
        return dec_m_hl;
    case 54 :
        return ld_m_hl_n;
    case 55 :
        return scf;
    case 56 :
        return jr_c_n;
    case 57 :
        return add_hl_sp;
    case 58 :
        return ld_a_m_hld;
    case 59 :
        return dec_sp;
    case 60 :
        return inc_a;
    case 61 :
        return dec_a;
    case 62 :
        return ld_a_m_n;
    case 63 :
        return ccf;
    case 64 :
        return ld_b_b;
    case 65 :
        return ld_b_c;
    case 66 :
        return ld_b_d;
    case 67 :
        return ld_b_e;
    case 68 :
        return ld_b_h;
    case 69 :
        return ld_b_l;
    case 70 :
        return ld_b_m_hl;
    case 71 :
        return ld_b_a;
    case 72 :
        return ld_c_b;
    case 73 :
        return ld_c_c;
    case 74 :
        return ld_c_d;
    case 75 :
        return ld_c_e;
    case 76 :
        return ld_c_h;
    case 77 :
        return ld_c_l;
    case 78 :
        return ld_c_m_hl;
    case 79 :
        return ld_c_a;
    case 80 :
        return ld_d_b;
    case 81 :
        return ld_d_c;
    case 82 :
        return ld_d_d;
    case 83 :
        return ld_d_e;
    case 84 :
        return ld_d_h;
    case 85 :
        return ld_d_l;
    case 86 :
        return ld_d_m_hl;
    case 87 :
        return ld_d_a;
    case 88 :
        return ld_e_b;
    case 89 :
        return ld_e_c;
    case 90 :
        return ld_e_d;
    case 91 :
        return ld_e_e;
    case 92 :
        return ld_e_h;
    case 93 :
        return ld_e_l;
    case 94 :
        return ld_e_m_hl;
    case 95 :
        return ld_e_a;
    case 96 :
        return ld_h_b;
    case 97 :
        return ld_h_c;
    case 98 :
        return ld_h_d;
    case 99 :
        return ld_h_e;
    case 100 :
        return ld_h_h;
    case 101 :
        return ld_h_l;
    case 102 :
        return ld_h_m_hl;
    case 103 :
        return ld_h_a;
    case 104 :
        return ld_l_b;
    case 105 :
        return ld_l_c;
    case 106 :
        return ld_l_d;
    case 107 :
        return ld_l_e;
    case 108 :
        return ld_l_h;
    case 109 :
        return ld_l_l;
    case 110 :
        return ld_l_m_hl;
    case 111 :
        return ld_l_a;
    case 112 :
        return ld_m_hl_b;
    case 113 :
        return ld_m_hl_c;
    case 114 :
        return ld_m_hl_d;
    case 115 :
        return ld_m_hl_e;
    case 116 :
        return ld_m_hl_h;
    case 117 :
        return ld_m_hl_l;
    case 118 :
        return halt$1;
    case 119 :
        return ld_m_hl_a;
    case 120 :
        return ld_a_b;
    case 121 :
        return ld_a_c;
    case 122 :
        return ld_a_d;
    case 123 :
        return ld_a_e;
    case 124 :
        return ld_a_h;
    case 125 :
        return ld_a_l;
    case 126 :
        return ld_a_m_hl;
    case 127 :
        return ld_a_a;
    case 128 :
        return add_a_b;
    case 129 :
        return add_a_c;
    case 130 :
        return add_a_d;
    case 131 :
        return add_a_e;
    case 132 :
        return add_a_h;
    case 133 :
        return add_a_l;
    case 134 :
        return add_a_m_hl;
    case 135 :
        return add_a_a;
    case 136 :
        return adc_a_b;
    case 137 :
        return adc_a_c;
    case 138 :
        return adc_a_d;
    case 139 :
        return adc_a_e;
    case 140 :
        return adc_a_h;
    case 141 :
        return adc_a_l;
    case 142 :
        return adc_a_m_hl;
    case 143 :
        return adc_a_a;
    case 144 :
        return sub_b;
    case 145 :
        return sub_c;
    case 146 :
        return sub_d;
    case 147 :
        return sub_e;
    case 148 :
        return sub_h;
    case 149 :
        return sub_l;
    case 150 :
        return sub_m_hl;
    case 151 :
        return sub_a;
    case 152 :
        return sbc_b;
    case 153 :
        return sbc_c;
    case 154 :
        return sbc_d;
    case 155 :
        return sbc_e;
    case 156 :
        return sbc_h;
    case 157 :
        return sbc_l;
    case 158 :
        return sbc_m_hl;
    case 159 :
        return sbc_a;
    case 160 :
        return and_b;
    case 161 :
        return and_c;
    case 162 :
        return and_d;
    case 163 :
        return and_e;
    case 164 :
        return and_h;
    case 165 :
        return and_l;
    case 166 :
        return and_m_hl;
    case 167 :
        return and_a;
    case 168 :
        return xor_b;
    case 169 :
        return xor_c;
    case 170 :
        return xor_d;
    case 171 :
        return xor_e;
    case 172 :
        return xor_h;
    case 173 :
        return xor_l;
    case 174 :
        return xor_m_hl;
    case 175 :
        return xor_a;
    case 176 :
        return or_b;
    case 177 :
        return or_c;
    case 178 :
        return or_d;
    case 179 :
        return or_e;
    case 180 :
        return or_h;
    case 181 :
        return or_l;
    case 182 :
        return or_m_hl;
    case 183 :
        return or_a;
    case 184 :
        return cp_b;
    case 185 :
        return cp_c;
    case 186 :
        return cp_d;
    case 187 :
        return cp_e;
    case 188 :
        return cp_h;
    case 189 :
        return cp_l;
    case 190 :
        return cp_m_hl;
    case 191 :
        return cp_a;
    case 192 :
        return ret_nz;
    case 193 :
        return pop_bc;
    case 194 :
        return jp_nz_nn;
    case 195 :
        return jp_nn;
    case 196 :
        return call_nz_nn;
    case 197 :
        return push_bc;
    case 198 :
        return add_a_n;
    case 200 :
        return ret_z;
    case 201 :
        return ret;
    case 202 :
        return jp_z_nn;
    case 203 :
        return cb_exec;
    case 205 :
        return call_nn;
    case 206 :
        return adc_a_n;
    case 208 :
        return ret_nc;
    case 209 :
        return pop_de;
    case 210 :
        return jp_nc_nn;
    case 213 :
        return push_de;
    case 214 :
        return sub_n;
    case 216 :
        return ret_c;
    case 218 :
        return jp_c_nn;
    case 224 :
        return ldh_n_a;
    case 225 :
        return pop_hl;
    case 226 :
        return ld_m_c_a;
    case 229 :
        return push_hl;
    case 230 :
        return and_n;
    case 232 :
        return add_sp_n;
    case 233 :
        return jp_m_hl;
    case 234 :
        return ld_m_nn_a;
    case 238 :
        return xor_n;
    case 240 :
        return ldh_a_n;
    case 241 :
        return pop_af;
    case 242 :
        return ld_a_m_c;
    case 243 :
        return di;
    case 245 :
        return push_af;
    case 246 :
        return or_n;
    case 248 :
        return ld_hl_sp_n;
    case 249 :
        return ld_sp_hl;
    case 250 :
        return ld_a_m_nn;
    case 251 :
        return ei;
    case 15 :
    case 16 :
    case 31 :
    case 52 :
    case 199 :
    case 204 :
    case 207 :
    case 211 :
    case 212 :
    case 215 :
    case 217 :
    case 219 :
    case 220 :
    case 221 :
    case 222 :
    case 223 :
    case 227 :
    case 228 :
    case 231 :
    case 235 :
    case 236 :
    case 237 :
    case 239 :
    case 244 :
    case 247 :
    case 252 :
    case 253 :
        break;
    case 254 :
        return cp_n;
    default:
      
  }
  throw [
        Cpu$GameboyEmulator.UnhandledInstruction,
        Curry._1(Printf.sprintf(/* Format */[
                  /* String_literal */Block.__(11, [
                      "Unhandled instruction, ",
                      /* Int */Block.__(4, [
                          /* Int_Cx */7,
                          /* Lit_padding */Block.__(0, [
                              /* Right */1,
                              2
                            ]),
                          /* No_precision */0,
                          /* End_of_format */0
                        ])
                    ]),
                  "Unhandled instruction, %#2x"
                ]), instruction)
      ];
}

exports.Ops = Ops;
exports.exec = exec;
/* Mmu-GameboyEmulator Not a pure module */
