// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var UnhandledInstruction = Caml_exceptions.create("Cpu-GameboyEmulator.UnhandledInstruction");

var AssertionException = Caml_exceptions.create("Cpu-GameboyEmulator.AssertionException");

function flagOffset(flag) {
  switch (flag) {
    case /* Z */0 :
        return 7;
    case /* N */1 :
        return 6;
    case /* H */2 :
        return 5;
    case /* C */3 :
        return 4;
    
  }
}

function setFlag(flag, value, flags) {
  var bit = (1 << flagOffset(flag));
  if (value !== 0) {
    return flags | bit;
  } else {
    return flags & Pervasives.lnot(bit);
  }
}

function getFlag(flag, flags) {
  var offset = flagOffset(flag);
  var flag$1 = flags & (1 << offset);
  return (flag$1 >>> offset) | 0;
}

function isSet(flag, flags) {
  var offset = flagOffset(flag);
  return (flags & (1 << offset)) > 0;
}

var Flags = {
  z: 7,
  n: 6,
  h: 5,
  c: 4,
  flagOffset: flagOffset,
  setFlag: setFlag,
  getFlag: getFlag,
  isSet: isSet
};

function make(param) {
  return /* record */[
          /* clock */0,
          /* halt */0,
          /* ime */0,
          /* registers : record */[
            /* a */0,
            /* b */0,
            /* c */0,
            /* d */0,
            /* e */0,
            /* h */0,
            /* l */0,
            /* f */0,
            /* sp */0,
            /* pc */0,
            /* mCycles */0
          ]
        ];
}

function b2i(bool) {
  if (bool) {
    return 1;
  } else {
    return 0;
  }
}

function programCount(cpu) {
  return cpu[/* registers */3][/* pc */9];
}

function readAndIncrementPc(cpu) {
  var match = cpu[/* registers */3];
  var pc = match[/* pc */9];
  cpu[/* registers */3][/* pc */9] = cpu[/* registers */3][/* pc */9] + 1 | 0;
  return /* tuple */[
          pc,
          cpu
        ];
}

function readRegister16(register, param) {
  var match = param[/* registers */3];
  var a = match[/* a */0];
  var b = match[/* b */1];
  var c = match[/* c */2];
  var d = match[/* d */3];
  var e = match[/* e */4];
  var h = match[/* h */5];
  var l = match[/* l */6];
  var f = match[/* f */7];
  var match$1;
  switch (register) {
    case /* AF */0 :
        match$1 = /* tuple */[
          a,
          f
        ];
        break;
    case /* BC */1 :
        match$1 = /* tuple */[
          b,
          c
        ];
        break;
    case /* DE */2 :
        match$1 = /* tuple */[
          d,
          e
        ];
        break;
    case /* HL */3 :
        match$1 = /* tuple */[
          h,
          l
        ];
        break;
    
  }
  return match$1[1] + (match$1[0] << 8) | 0;
}

function rAf(param) {
  return readRegister16(/* AF */0, param);
}

function rBc(param) {
  return readRegister16(/* BC */1, param);
}

function rDe(param) {
  return readRegister16(/* DE */2, param);
}

function rHl(param) {
  return readRegister16(/* HL */3, param);
}

function checkRegister(register) {
  if (register > 255) {
    throw [
          AssertionException,
          String(register)
        ];
  } else {
    return 0;
  }
}

function setRegisters(a, b, c, d, e, h, l, f, cpu) {
  var registers = cpu[/* registers */3];
  registers[/* a */0] = Belt_Option.getWithDefault(a, registers[/* a */0]);
  registers[/* b */1] = Belt_Option.getWithDefault(b, registers[/* b */1]);
  registers[/* c */2] = Belt_Option.getWithDefault(c, registers[/* c */2]);
  registers[/* d */3] = Belt_Option.getWithDefault(d, registers[/* d */3]);
  registers[/* e */4] = Belt_Option.getWithDefault(e, registers[/* e */4]);
  registers[/* h */5] = Belt_Option.getWithDefault(h, registers[/* h */5]);
  registers[/* l */6] = Belt_Option.getWithDefault(l, registers[/* l */6]);
  registers[/* f */7] = Belt_Option.getWithDefault(f, registers[/* f */7]);
  checkRegister(registers[/* a */0]);
  checkRegister(registers[/* b */1]);
  checkRegister(registers[/* c */2]);
  checkRegister(registers[/* d */3]);
  checkRegister(registers[/* e */4]);
  checkRegister(registers[/* h */5]);
  checkRegister(registers[/* l */6]);
  return cpu;
}

function writeRegister8(register, value, cpu) {
  if (value > 255) {
    throw [
          AssertionException,
          Curry._1(Printf.sprintf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "writeRegister8 ",
                        /* Int */Block.__(4, [
                            /* Int_d */0,
                            /* No_padding */0,
                            /* No_precision */0,
                            /* End_of_format */0
                          ])
                      ]),
                    "writeRegister8 %d"
                  ]), value)
        ];
  }
  switch (register) {
    case /* A */0 :
        cpu[/* registers */3][/* a */0] = value;
        return cpu;
    case /* B */1 :
        cpu[/* registers */3][/* b */1] = value;
        return cpu;
    case /* C */2 :
        cpu[/* registers */3][/* c */2] = value;
        return cpu;
    case /* D */3 :
        cpu[/* registers */3][/* d */3] = value;
        return cpu;
    case /* E */4 :
        cpu[/* registers */3][/* e */4] = value;
        return cpu;
    case /* F */5 :
        cpu[/* registers */3][/* f */7] = value;
        return cpu;
    case /* H */6 :
        cpu[/* registers */3][/* h */5] = value;
        return cpu;
    case /* L */7 :
        cpu[/* registers */3][/* l */6] = value;
        return cpu;
    
  }
}

function wA(param, param$1) {
  return writeRegister8(/* A */0, param, param$1);
}

function wB(param, param$1) {
  return writeRegister8(/* B */1, param, param$1);
}

function wC(param, param$1) {
  return writeRegister8(/* C */2, param, param$1);
}

function wD(param, param$1) {
  return writeRegister8(/* D */3, param, param$1);
}

function wE(param, param$1) {
  return writeRegister8(/* E */4, param, param$1);
}

function wF(param, param$1) {
  return writeRegister8(/* F */5, param, param$1);
}

function wH(param, param$1) {
  return writeRegister8(/* H */6, param, param$1);
}

function wL(param, param$1) {
  return writeRegister8(/* L */7, param, param$1);
}

function writeRegister16(register, value, cpu) {
  if (value > 65535) {
    throw [
          AssertionException,
          Curry._1(Printf.sprintf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "writeRegister16 ",
                        /* Int */Block.__(4, [
                            /* Int_d */0,
                            /* No_padding */0,
                            /* No_precision */0,
                            /* End_of_format */0
                          ])
                      ]),
                    "writeRegister16 %d"
                  ]), value)
        ];
  }
  var r1 = (value >>> 8) & 255;
  var r2 = value & 255;
  switch (register) {
    case /* AF */0 :
        return writeRegister8(/* F */5, r2, writeRegister8(/* A */0, r1, cpu));
    case /* BC */1 :
        return writeRegister8(/* C */2, r2, writeRegister8(/* B */1, r1, cpu));
    case /* DE */2 :
        return writeRegister8(/* E */4, r2, writeRegister8(/* D */3, r1, cpu));
    case /* HL */3 :
        return writeRegister8(/* L */7, r2, writeRegister8(/* H */6, r1, cpu));
    
  }
}

function wHl(param, param$1) {
  return writeRegister16(/* HL */3, param, param$1);
}

function incrementPc(cycles, cpu) {
  cpu[/* registers */3][/* pc */9] = cpu[/* registers */3][/* pc */9] + cycles | 0;
  return cpu;
}

function setPc(pc, cpu) {
  cpu[/* registers */3][/* pc */9] = pc;
  return cpu;
}

function incrementSp($staropt$star, cpu) {
  var amount = $staropt$star !== undefined ? $staropt$star : 1;
  cpu[/* registers */3][/* sp */8] = cpu[/* registers */3][/* sp */8] + amount & 65535;
  return cpu;
}

function decrementSp($staropt$star, cpu) {
  var amount = $staropt$star !== undefined ? $staropt$star : 1;
  cpu[/* registers */3][/* sp */8] = cpu[/* registers */3][/* sp */8] - amount & 65535;
  return cpu;
}

function setSp(sp, cpu) {
  cpu[/* registers */3][/* sp */8] = sp & 65535;
  return cpu;
}

function getFlag$1(flag, cpu) {
  var bit = (1 << flagOffset(flag));
  return cpu[/* registers */3][/* f */7] & bit;
}

function setFlag$1(flag, value, initialValue, cpu) {
  cpu[/* registers */3][/* f */7] = setFlag(flag, value, Belt_Option.getWithDefault(initialValue, cpu[/* registers */3][/* f */7]));
  return cpu;
}

function toggleFlag(flag, cpu) {
  var flagValue = getFlag(flag, cpu[/* registers */3][/* f */7]) === 0 ? 1 : 0;
  var f = setFlag(flag, flagValue, cpu[/* registers */3][/* f */7]);
  return writeRegister8(/* F */5, f, cpu);
}

function machineCycles(cycles, cpu) {
  cpu[/* registers */3][/* mCycles */10] = cycles;
  return cpu;
}

function cycles(cycles$1, cpu) {
  return machineCycles(cycles$1 / 4 | 0, cpu);
}

function incrementHl(cpu) {
  var l = cpu[/* registers */3][/* l */6] + 1 & 255;
  var h = l === 0 ? cpu[/* registers */3][/* h */5] + 1 & 255 : cpu[/* registers */3][/* h */5];
  return writeRegister8(/* L */7, l, writeRegister8(/* H */6, h, cpu));
}

function decrementHl(cpu) {
  var l = cpu[/* registers */3][/* l */6] - 1 & 255;
  var h = l === 255 ? cpu[/* registers */3][/* h */5] - 1 & 255 : cpu[/* registers */3][/* h */5];
  return writeRegister8(/* L */7, l, writeRegister8(/* H */6, h, cpu));
}

function signed(value) {
  var match = value > 127;
  if (match) {
    return -(Pervasives.lnot(value) + 1 & 255) | 0;
  } else {
    return value;
  }
}

exports.UnhandledInstruction = UnhandledInstruction;
exports.AssertionException = AssertionException;
exports.Flags = Flags;
exports.make = make;
exports.b2i = b2i;
exports.programCount = programCount;
exports.readAndIncrementPc = readAndIncrementPc;
exports.readRegister16 = readRegister16;
exports.rAf = rAf;
exports.rBc = rBc;
exports.rDe = rDe;
exports.rHl = rHl;
exports.checkRegister = checkRegister;
exports.setRegisters = setRegisters;
exports.writeRegister8 = writeRegister8;
exports.wA = wA;
exports.wB = wB;
exports.wC = wC;
exports.wD = wD;
exports.wE = wE;
exports.wF = wF;
exports.wH = wH;
exports.wL = wL;
exports.writeRegister16 = writeRegister16;
exports.wHl = wHl;
exports.incrementPc = incrementPc;
exports.setPc = setPc;
exports.incrementSp = incrementSp;
exports.decrementSp = decrementSp;
exports.setSp = setSp;
exports.getFlag = getFlag$1;
exports.setFlag = setFlag$1;
exports.toggleFlag = toggleFlag;
exports.machineCycles = machineCycles;
exports.cycles = cycles;
exports.incrementHl = incrementHl;
exports.decrementHl = decrementHl;
exports.signed = signed;
/* No side effect */
