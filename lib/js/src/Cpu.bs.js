// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Mmu$GameboyEmulator = require("./Mmu.bs.js");

var UnhandledInstruction = Caml_exceptions.create("Cpu-GameboyEmulator.UnhandledInstruction");

var AssertionException = Caml_exceptions.create("Cpu-GameboyEmulator.AssertionException");

function flagOffset(flag) {
  switch (flag) {
    case 0 : 
        return 7;
    case 1 : 
        return 6;
    case 2 : 
        return 5;
    case 3 : 
        return 4;
    
  }
}

function setFlag(flag, value, flags) {
  var bit = (1 << flagOffset(flag));
  if (value !== 0) {
    return flags | bit;
  } else {
    return flags & Pervasives.lnot(bit);
  }
}

var Flags = /* module */[
  /* z */7,
  /* n */6,
  /* h */5,
  /* c */4,
  /* flagOffset */flagOffset,
  /* setFlag */setFlag
];

function make(param) {
  return /* record */[
          /* clock */0,
          /* registers : record */[
            /* a */0,
            /* b */0,
            /* c */0,
            /* d */0,
            /* e */0,
            /* h */0,
            /* l */0,
            /* f */0,
            /* sp */0,
            /* pc */0,
            /* mCycles */0
          ]
        ];
}

function b2i(bool) {
  if (bool) {
    return 1;
  } else {
    return 0;
  }
}

function programCount(cpu) {
  return cpu[/* registers */1][/* pc */9];
}

function readRegister16(register, param) {
  var match = param[/* registers */1];
  var a = match[/* a */0];
  var b = match[/* b */1];
  var c = match[/* c */2];
  var d = match[/* d */3];
  var e = match[/* e */4];
  var h = match[/* h */5];
  var l = match[/* l */6];
  var f = match[/* f */7];
  var match$1;
  switch (register) {
    case 0 : 
        match$1 = /* tuple */[
          a,
          f
        ];
        break;
    case 1 : 
        match$1 = /* tuple */[
          b,
          c
        ];
        break;
    case 2 : 
        match$1 = /* tuple */[
          d,
          e
        ];
        break;
    case 3 : 
        match$1 = /* tuple */[
          h,
          l
        ];
        break;
    
  }
  return match$1[1] + (match$1[0] << 8) | 0;
}

function rAf(param) {
  return readRegister16(/* AF */0, param);
}

function rBc(param) {
  return readRegister16(/* BC */1, param);
}

function rDe(param) {
  return readRegister16(/* DE */2, param);
}

function rHl(param) {
  return readRegister16(/* HL */3, param);
}

function incrementPc(cycles, cpu) {
  cpu[/* registers */1][/* pc */9] = cpu[/* registers */1][/* pc */9] + cycles | 0;
  return cpu;
}

function incrementSp(cpu) {
  cpu[/* registers */1][/* sp */8] = cpu[/* registers */1][/* sp */8] + 1 & 65535;
  return cpu;
}

function decrementSp(cpu) {
  cpu[/* registers */1][/* sp */8] = cpu[/* registers */1][/* sp */8] - 1 & 65535;
  return cpu;
}

function getFlag(flag, cpu) {
  var bit = (1 << flagOffset(flag));
  return cpu[/* registers */1][/* f */7] & bit;
}

function setFlag$1(flag, value, initialValue, cpu) {
  cpu[/* registers */1][/* f */7] = setFlag(flag, value, Belt_Option.getWithDefault(initialValue, cpu[/* registers */1][/* f */7]));
  return cpu;
}

function checkRegister(register) {
  if (register > 255) {
    throw [
          AssertionException,
          String(register)
        ];
  } else {
    return 0;
  }
}

function setRegisters(a, b, c, d, e, h, l, f, cpu) {
  var registers = cpu[/* registers */1];
  registers[/* a */0] = Belt_Option.getWithDefault(a, registers[/* a */0]);
  registers[/* b */1] = Belt_Option.getWithDefault(b, registers[/* b */1]);
  registers[/* c */2] = Belt_Option.getWithDefault(c, registers[/* c */2]);
  registers[/* d */3] = Belt_Option.getWithDefault(d, registers[/* d */3]);
  registers[/* e */4] = Belt_Option.getWithDefault(e, registers[/* e */4]);
  registers[/* h */5] = Belt_Option.getWithDefault(h, registers[/* h */5]);
  registers[/* l */6] = Belt_Option.getWithDefault(l, registers[/* l */6]);
  registers[/* f */7] = Belt_Option.getWithDefault(f, registers[/* f */7]);
  checkRegister(registers[/* a */0]);
  checkRegister(registers[/* b */1]);
  checkRegister(registers[/* c */2]);
  checkRegister(registers[/* d */3]);
  checkRegister(registers[/* e */4]);
  checkRegister(registers[/* h */5]);
  checkRegister(registers[/* l */6]);
  return cpu;
}

function machineCycles(cycles, cpu) {
  cpu[/* registers */1][/* mCycles */10] = cycles;
  return cpu;
}

function cycles(cycles$1, cpu) {
  return machineCycles(cycles$1 / 4 | 0, cpu);
}

function newState(cpu, mmu, gpu, old) {
  return /* record */[
          /* cpu */Belt_Option.getWithDefault(cpu, old[/* cpu */0]),
          /* mmu */Belt_Option.getWithDefault(mmu, old[/* mmu */1]),
          /* gpu */Belt_Option.getWithDefault(gpu, old[/* gpu */2])
        ];
}

function nop(s) {
  var partial_arg = machineCycles(1, s[/* cpu */0]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function ld_n_nn(param) {
  var gpu = param[/* gpu */2];
  var cpu = param[/* cpu */0];
  var pc = cpu[/* registers */1][/* pc */9];
  var match = Mmu$GameboyEmulator.read8(pc, /* record */[
        /* gpu */gpu,
        /* mmu */param[/* mmu */1]
      ]);
  var match$1 = Mmu$GameboyEmulator.read8(pc + 1 | 0, /* record */[
        /* gpu */gpu,
        /* mmu */match[1]
      ]);
  return /* tuple */[
          match$1[0],
          match[0],
          match$1[1],
          incrementPc(2, machineCycles(3, cpu))
        ];
}

function ld_bc_nn(s) {
  var match = ld_n_nn(s);
  var partial_arg = Caml_option.some(match[2]);
  var arg = match[0];
  var arg$1 = match[1];
  var partial_arg$1 = (function (param) {
          return (function (param$1, param$2, param$3, param$4, param$5, param$6) {
              return setRegisters(param, arg, arg$1, param$1, param$2, param$3, param$4, param$5, param$6);
            });
        })(undefined)(undefined, undefined, undefined, undefined, undefined, match[3]);
  return (function (eta) {
              var param = undefined;
              var param$1 = eta;
              return newState(partial_arg$1, partial_arg, param, param$1);
            })(s);
}

function ld_de_nn(s) {
  var match = ld_n_nn(s);
  var partial_arg = Caml_option.some(match[2]);
  var arg = match[0];
  var arg$1 = match[1];
  var partial_arg$1 = (function (param, param$1, param$2) {
          return (function (param$3, param$4, param$5, param$6) {
              return setRegisters(param, param$1, param$2, arg, arg$1, param$3, param$4, param$5, param$6);
            });
        })(undefined, undefined, undefined)(undefined, undefined, undefined, match[3]);
  return (function (eta) {
              var param = undefined;
              var param$1 = eta;
              return newState(partial_arg$1, partial_arg, param, param$1);
            })(s);
}

function ld_hl_nn(s) {
  var match = ld_n_nn(s);
  var partial_arg = Caml_option.some(match[2]);
  var arg = match[0];
  var arg$1 = match[1];
  var partial_arg$1 = (function (param, param$1, param$2, param$3, param$4) {
          return (function (param$5, param$6) {
              return setRegisters(param, param$1, param$2, param$3, param$4, arg, arg$1, param$5, param$6);
            });
        })(undefined, undefined, undefined, undefined, undefined)(undefined, match[3]);
  return (function (eta) {
              var param = undefined;
              var param$1 = eta;
              return newState(partial_arg$1, partial_arg, param, param$1);
            })(s);
}

var Load_16_8 = /* module */[
  /* ld_n_nn */ld_n_nn,
  /* ld_bc_nn */ld_bc_nn,
  /* ld_de_nn */ld_de_nn,
  /* ld_hl_nn */ld_hl_nn
];

function ld_m_bc_a(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */1];
  var a = match[/* a */0];
  var match$1 = Mmu$GameboyEmulator.write8(rBc(cpu), a, /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  return newState(machineCycles(2, cpu), Caml_option.some(match$1[0]), match$1[1], s);
}

function ld_m_de_a(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */1];
  var a = match[/* a */0];
  var match$1 = Mmu$GameboyEmulator.write8(rDe(cpu), a, /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  return newState(machineCycles(2, cpu), Caml_option.some(match$1[0]), match$1[1], s);
}

function ld_m_hl_a(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */1];
  var a = match[/* a */0];
  var match$1 = Mmu$GameboyEmulator.write8(rHl(cpu), a, /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  return newState(machineCycles(2, cpu), Caml_option.some(match$1[0]), match$1[1], s);
}

function ld_m_nn_a(s) {
  var gpu = s[/* gpu */2];
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */1];
  var a = match[/* a */0];
  var match$1 = Mmu$GameboyEmulator.read16(cpu[/* registers */1][/* pc */9], /* record */[
        /* gpu */gpu,
        /* mmu */s[/* mmu */1]
      ]);
  var match$2 = Mmu$GameboyEmulator.write8(match$1[0], a, /* record */[
        /* gpu */gpu,
        /* mmu */match$1[1]
      ]);
  return newState(incrementPc(2, machineCycles(4, cpu)), Caml_option.some(match$2[0]), match$2[1], s);
}

function ld_a_a(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */1];
  var a = match[/* a */0];
  var partial_arg = a;
  var partial_arg$1 = (function (eta) {
        var param = undefined;
        var param$1 = undefined;
        var param$2 = undefined;
        var param$3 = undefined;
        var param$4 = undefined;
        var param$5 = undefined;
        var param$6 = undefined;
        var param$7 = eta;
        return setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
      })(machineCycles(1, cpu));
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg$1, param, param$1, param$2);
            })(s);
}

function ld_b_a(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */1];
  var a = match[/* a */0];
  var eta = machineCycles(1, cpu);
  var arg = a;
  var partial_arg = (function (param) {
          return (function (param$1, param$2, param$3, param$4, param$5, param$6, param$7) {
              return setRegisters(param, arg, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
            });
        })(undefined)(undefined, undefined, undefined, undefined, undefined, undefined, eta);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function ld_c_a(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */1];
  var a = match[/* a */0];
  var eta = machineCycles(1, cpu);
  var arg = a;
  var partial_arg = (function (param, param$1) {
          return (function (param$2, param$3, param$4, param$5, param$6, param$7) {
              return setRegisters(param, param$1, arg, param$2, param$3, param$4, param$5, param$6, param$7);
            });
        })(undefined, undefined)(undefined, undefined, undefined, undefined, undefined, eta);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function ld_d_a(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */1];
  var a = match[/* a */0];
  var eta = machineCycles(1, cpu);
  var arg = a;
  var partial_arg = (function (param, param$1, param$2) {
          return (function (param$3, param$4, param$5, param$6, param$7) {
              return setRegisters(param, param$1, param$2, arg, param$3, param$4, param$5, param$6, param$7);
            });
        })(undefined, undefined, undefined)(undefined, undefined, undefined, undefined, eta);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function ld_e_a(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */1];
  var a = match[/* a */0];
  var eta = machineCycles(1, cpu);
  var arg = a;
  var partial_arg = (function (param, param$1, param$2, param$3) {
          return (function (param$4, param$5, param$6, param$7) {
              return setRegisters(param, param$1, param$2, param$3, arg, param$4, param$5, param$6, param$7);
            });
        })(undefined, undefined, undefined, undefined)(undefined, undefined, undefined, eta);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function ld_h_a(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */1];
  var a = match[/* a */0];
  var eta = machineCycles(1, cpu);
  var arg = a;
  var partial_arg = (function (param, param$1, param$2, param$3, param$4) {
          return (function (param$5, param$6, param$7) {
              return setRegisters(param, param$1, param$2, param$3, param$4, arg, param$5, param$6, param$7);
            });
        })(undefined, undefined, undefined, undefined, undefined)(undefined, undefined, eta);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function ld_l_a(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */1];
  var a = match[/* a */0];
  var eta = machineCycles(1, cpu);
  var arg = a;
  var partial_arg = (function (param, param$1, param$2, param$3, param$4, param$5) {
          return (function (param$6, param$7) {
              return setRegisters(param, param$1, param$2, param$3, param$4, param$5, arg, param$6, param$7);
            });
        })(undefined, undefined, undefined, undefined, undefined, undefined)(undefined, eta);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

var Load_8_A = /* module */[
  /* ld_m_bc_a */ld_m_bc_a,
  /* ld_m_de_a */ld_m_de_a,
  /* ld_m_hl_a */ld_m_hl_a,
  /* ld_m_nn_a */ld_m_nn_a,
  /* ld_a_a */ld_a_a,
  /* ld_b_a */ld_b_a,
  /* ld_c_a */ld_c_a,
  /* ld_d_a */ld_d_a,
  /* ld_e_a */ld_e_a,
  /* ld_h_a */ld_h_a,
  /* ld_l_a */ld_l_a
];

function ld_a_b(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */1];
  var b = match[/* b */1];
  var partial_arg = b;
  var partial_arg$1 = (function (eta) {
        var param = undefined;
        var param$1 = undefined;
        var param$2 = undefined;
        var param$3 = undefined;
        var param$4 = undefined;
        var param$5 = undefined;
        var param$6 = undefined;
        var param$7 = eta;
        return setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
      })(machineCycles(1, cpu));
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg$1, param, param$1, param$2);
            })(s);
}

function ld_a_c(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */1];
  var c = match[/* c */2];
  var partial_arg = c;
  var partial_arg$1 = (function (eta) {
        var param = undefined;
        var param$1 = undefined;
        var param$2 = undefined;
        var param$3 = undefined;
        var param$4 = undefined;
        var param$5 = undefined;
        var param$6 = undefined;
        var param$7 = eta;
        return setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
      })(machineCycles(1, cpu));
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg$1, param, param$1, param$2);
            })(s);
}

function ld_a_d(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */1];
  var d = match[/* d */3];
  var partial_arg = d;
  var partial_arg$1 = (function (eta) {
        var param = undefined;
        var param$1 = undefined;
        var param$2 = undefined;
        var param$3 = undefined;
        var param$4 = undefined;
        var param$5 = undefined;
        var param$6 = undefined;
        var param$7 = eta;
        return setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
      })(machineCycles(1, cpu));
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg$1, param, param$1, param$2);
            })(s);
}

function ld_a_e(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */1];
  var e = match[/* e */4];
  var partial_arg = e;
  var partial_arg$1 = (function (eta) {
        var param = undefined;
        var param$1 = undefined;
        var param$2 = undefined;
        var param$3 = undefined;
        var param$4 = undefined;
        var param$5 = undefined;
        var param$6 = undefined;
        var param$7 = eta;
        return setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
      })(machineCycles(1, cpu));
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg$1, param, param$1, param$2);
            })(s);
}

function ld_a_h(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */1];
  var h = match[/* h */5];
  var partial_arg = h;
  var partial_arg$1 = (function (eta) {
        var param = undefined;
        var param$1 = undefined;
        var param$2 = undefined;
        var param$3 = undefined;
        var param$4 = undefined;
        var param$5 = undefined;
        var param$6 = undefined;
        var param$7 = eta;
        return setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
      })(machineCycles(1, cpu));
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg$1, param, param$1, param$2);
            })(s);
}

function ld_a_l(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */1];
  var l = match[/* l */6];
  var partial_arg = l;
  var partial_arg$1 = (function (eta) {
        var param = undefined;
        var param$1 = undefined;
        var param$2 = undefined;
        var param$3 = undefined;
        var param$4 = undefined;
        var param$5 = undefined;
        var param$6 = undefined;
        var param$7 = eta;
        return setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
      })(machineCycles(1, cpu));
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg$1, param, param$1, param$2);
            })(s);
}

function ld_a_m_bc(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(rBc(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var partial_arg = Caml_option.some(match[1]);
  var partial_arg$1 = match[0];
  var partial_arg$2 = (function (eta) {
        var param = undefined;
        var param$1 = undefined;
        var param$2 = undefined;
        var param$3 = undefined;
        var param$4 = undefined;
        var param$5 = undefined;
        var param$6 = undefined;
        var param$7 = eta;
        return setRegisters(partial_arg$1, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
      })(machineCycles(2, cpu));
  return (function (eta) {
              var param = undefined;
              var param$1 = eta;
              return newState(partial_arg$2, partial_arg, param, param$1);
            })(s);
}

function ld_a_m_de(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(rDe(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var partial_arg = Caml_option.some(match[1]);
  var partial_arg$1 = match[0];
  var partial_arg$2 = (function (eta) {
        var param = undefined;
        var param$1 = undefined;
        var param$2 = undefined;
        var param$3 = undefined;
        var param$4 = undefined;
        var param$5 = undefined;
        var param$6 = undefined;
        var param$7 = eta;
        return setRegisters(partial_arg$1, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
      })(machineCycles(2, cpu));
  return (function (eta) {
              var param = undefined;
              var param$1 = eta;
              return newState(partial_arg$2, partial_arg, param, param$1);
            })(s);
}

function ld_a_m_hl(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(rHl(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var partial_arg = Caml_option.some(match[1]);
  var partial_arg$1 = match[0];
  var partial_arg$2 = (function (eta) {
        var param = undefined;
        var param$1 = undefined;
        var param$2 = undefined;
        var param$3 = undefined;
        var param$4 = undefined;
        var param$5 = undefined;
        var param$6 = undefined;
        var param$7 = eta;
        return setRegisters(partial_arg$1, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
      })(machineCycles(2, cpu));
  return (function (eta) {
              var param = undefined;
              var param$1 = eta;
              return newState(partial_arg$2, partial_arg, param, param$1);
            })(s);
}

function ld_a_m_nn(s) {
  var gpu = s[/* gpu */2];
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read16(cpu[/* registers */1][/* pc */9], /* record */[
        /* gpu */gpu,
        /* mmu */s[/* mmu */1]
      ]);
  var match$1 = Mmu$GameboyEmulator.read8(match[0], /* record */[
        /* gpu */gpu,
        /* mmu */match[1]
      ]);
  var partial_arg = Caml_option.some(match$1[1]);
  var partial_arg$1 = match$1[0];
  var partial_arg$2 = (function (eta) {
        var param = undefined;
        var param$1 = undefined;
        var param$2 = undefined;
        var param$3 = undefined;
        var param$4 = undefined;
        var param$5 = undefined;
        var param$6 = undefined;
        var param$7 = eta;
        return setRegisters(partial_arg$1, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
      })(incrementPc(2, machineCycles(4, cpu)));
  return (function (eta) {
              var param = undefined;
              var param$1 = eta;
              return newState(partial_arg$2, partial_arg, param, param$1);
            })(s);
}

var Load_A_8 = /* module */[
  /* ld_a_b */ld_a_b,
  /* ld_a_c */ld_a_c,
  /* ld_a_d */ld_a_d,
  /* ld_a_e */ld_a_e,
  /* ld_a_h */ld_a_h,
  /* ld_a_l */ld_a_l,
  /* ld_a_m_bc */ld_a_m_bc,
  /* ld_a_m_de */ld_a_m_de,
  /* ld_a_m_hl */ld_a_m_hl,
  /* ld_a_m_nn */ld_a_m_nn
];

function inc_bc(s) {
  var cpu = s[/* cpu */0];
  var c = cpu[/* registers */1][/* c */2] + 1 & 255;
  var b = c === 0 ? cpu[/* registers */1][/* b */1] + 1 & 255 : cpu[/* registers */1][/* b */1];
  var arg = b;
  var arg$1 = c;
  var partial_arg = machineCycles(2, (function (param) {
              return (function (param$1, param$2, param$3, param$4, param$5, param$6) {
                  return setRegisters(param, arg, arg$1, param$1, param$2, param$3, param$4, param$5, param$6);
                });
            })(undefined)(undefined, undefined, undefined, undefined, undefined, cpu));
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function inc_de(s) {
  var cpu = s[/* cpu */0];
  var e = cpu[/* registers */1][/* e */4] + 1 & 255;
  var d = e === 0 ? cpu[/* registers */1][/* d */3] + 1 & 255 : cpu[/* registers */1][/* d */3];
  var arg = d;
  var arg$1 = e;
  var partial_arg = machineCycles(2, (function (param, param$1, param$2) {
              return (function (param$3, param$4, param$5, param$6) {
                  return setRegisters(param, param$1, param$2, arg, arg$1, param$3, param$4, param$5, param$6);
                });
            })(undefined, undefined, undefined)(undefined, undefined, undefined, cpu));
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function inc_hl(s) {
  var cpu = s[/* cpu */0];
  var l = cpu[/* registers */1][/* l */6] + 1 & 255;
  var h = l === 0 ? cpu[/* registers */1][/* h */5] + 1 & 255 : cpu[/* registers */1][/* h */5];
  var arg = h;
  var arg$1 = l;
  var partial_arg = machineCycles(2, (function (param, param$1, param$2, param$3, param$4) {
              return (function (param$5, param$6) {
                  return setRegisters(param, param$1, param$2, param$3, param$4, arg, arg$1, param$5, param$6);
                });
            })(undefined, undefined, undefined, undefined, undefined)(undefined, cpu));
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function inc_sp(s) {
  var partial_arg = machineCycles(2, incrementSp(s[/* cpu */0]));
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

var Increment16 = /* module */[
  /* inc_bc */inc_bc,
  /* inc_de */inc_de,
  /* inc_hl */inc_hl,
  /* inc_sp */inc_sp
];

function inc(register, cpu) {
  var r = register + 1 & 255;
  var f = cpu[/* registers */1][/* f */7] & 16;
  return /* tuple */[
          r,
          machineCycles(1, (function (eta) {
                    var param = undefined;
                    var param$1 = eta;
                    return setFlag$1(/* N */1, 0, param, param$1);
                  })(setFlag$1(/* Z */0, r === 0 ? 1 : 0, f, cpu)))
        ];
}

function inc_a(s) {
  var cpu = s[/* cpu */0];
  var match = inc(cpu[/* registers */1][/* a */0], cpu);
  var partial_arg = match[0];
  var partial_arg$1 = (function (eta) {
        var param = undefined;
        var param$1 = undefined;
        var param$2 = undefined;
        var param$3 = undefined;
        var param$4 = undefined;
        var param$5 = undefined;
        var param$6 = undefined;
        var param$7 = eta;
        return setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
      })(match[1]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg$1, param, param$1, param$2);
            })(s);
}

function inc_b(s) {
  var cpu = s[/* cpu */0];
  var match = inc(cpu[/* registers */1][/* b */1], cpu);
  var arg = match[0];
  var partial_arg = (function (param) {
          return (function (param$1, param$2, param$3, param$4, param$5, param$6, param$7) {
              return setRegisters(param, arg, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
            });
        })(undefined)(undefined, undefined, undefined, undefined, undefined, undefined, match[1]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function inc_c(s) {
  var cpu = s[/* cpu */0];
  var match = inc(cpu[/* registers */1][/* c */2], cpu);
  var arg = match[0];
  var partial_arg = (function (param, param$1) {
          return (function (param$2, param$3, param$4, param$5, param$6, param$7) {
              return setRegisters(param, param$1, arg, param$2, param$3, param$4, param$5, param$6, param$7);
            });
        })(undefined, undefined)(undefined, undefined, undefined, undefined, undefined, match[1]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function inc_d(s) {
  var cpu = s[/* cpu */0];
  var match = inc(cpu[/* registers */1][/* d */3], cpu);
  var arg = match[0];
  var partial_arg = (function (param, param$1, param$2) {
          return (function (param$3, param$4, param$5, param$6, param$7) {
              return setRegisters(param, param$1, param$2, arg, param$3, param$4, param$5, param$6, param$7);
            });
        })(undefined, undefined, undefined)(undefined, undefined, undefined, undefined, match[1]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function inc_e(s) {
  var cpu = s[/* cpu */0];
  var match = inc(cpu[/* registers */1][/* e */4], cpu);
  var arg = match[0];
  var partial_arg = (function (param, param$1, param$2, param$3) {
          return (function (param$4, param$5, param$6, param$7) {
              return setRegisters(param, param$1, param$2, param$3, arg, param$4, param$5, param$6, param$7);
            });
        })(undefined, undefined, undefined, undefined)(undefined, undefined, undefined, match[1]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function inc_h(s) {
  var cpu = s[/* cpu */0];
  var match = inc(cpu[/* registers */1][/* h */5], cpu);
  var arg = match[0];
  var partial_arg = (function (param, param$1, param$2, param$3, param$4) {
          return (function (param$5, param$6, param$7) {
              return setRegisters(param, param$1, param$2, param$3, param$4, arg, param$5, param$6, param$7);
            });
        })(undefined, undefined, undefined, undefined, undefined)(undefined, undefined, match[1]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function inc_l(s) {
  var cpu = s[/* cpu */0];
  var match = inc(cpu[/* registers */1][/* l */6], cpu);
  var arg = match[0];
  var partial_arg = (function (param, param$1, param$2, param$3, param$4, param$5) {
          return (function (param$6, param$7) {
              return setRegisters(param, param$1, param$2, param$3, param$4, param$5, arg, param$6, param$7);
            });
        })(undefined, undefined, undefined, undefined, undefined, undefined)(undefined, match[1]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

var Increment8 = /* module */[
  /* inc */inc,
  /* inc_a */inc_a,
  /* inc_b */inc_b,
  /* inc_c */inc_c,
  /* inc_d */inc_d,
  /* inc_e */inc_e,
  /* inc_h */inc_h,
  /* inc_l */inc_l
];

function dec(register, $staropt$star, cpu) {
  var cycles = $staropt$star !== undefined ? $staropt$star : 1;
  var r = register - 1 & 255;
  var f = cpu[/* registers */1][/* f */7] & 16;
  return /* tuple */[
          r,
          machineCycles(cycles, (function (eta) {
                    var param = undefined;
                    var param$1 = eta;
                    return setFlag$1(/* N */1, 1, param, param$1);
                  })(setFlag$1(/* Z */0, r === 0 ? 1 : 0, f, cpu)))
        ];
}

function dec_a(s) {
  var cpu = s[/* cpu */0];
  var match = dec(cpu[/* registers */1][/* a */0], undefined, cpu);
  var partial_arg = match[0];
  var partial_arg$1 = (function (eta) {
        var param = undefined;
        var param$1 = undefined;
        var param$2 = undefined;
        var param$3 = undefined;
        var param$4 = undefined;
        var param$5 = undefined;
        var param$6 = undefined;
        var param$7 = eta;
        return setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
      })(match[1]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg$1, param, param$1, param$2);
            })(s);
}

function dec_b(s) {
  var cpu = s[/* cpu */0];
  var match = dec(cpu[/* registers */1][/* b */1], undefined, cpu);
  var arg = match[0];
  var partial_arg = (function (param) {
          return (function (param$1, param$2, param$3, param$4, param$5, param$6, param$7) {
              return setRegisters(param, arg, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
            });
        })(undefined)(undefined, undefined, undefined, undefined, undefined, undefined, match[1]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function dec_c(s) {
  var cpu = s[/* cpu */0];
  var match = dec(cpu[/* registers */1][/* c */2], undefined, cpu);
  var arg = match[0];
  var partial_arg = (function (param, param$1) {
          return (function (param$2, param$3, param$4, param$5, param$6, param$7) {
              return setRegisters(param, param$1, arg, param$2, param$3, param$4, param$5, param$6, param$7);
            });
        })(undefined, undefined)(undefined, undefined, undefined, undefined, undefined, match[1]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function dec_d(s) {
  var cpu = s[/* cpu */0];
  var match = dec(cpu[/* registers */1][/* d */3], undefined, cpu);
  var arg = match[0];
  var partial_arg = (function (param, param$1, param$2) {
          return (function (param$3, param$4, param$5, param$6, param$7) {
              return setRegisters(param, param$1, param$2, arg, param$3, param$4, param$5, param$6, param$7);
            });
        })(undefined, undefined, undefined)(undefined, undefined, undefined, undefined, match[1]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function dec_e(s) {
  var cpu = s[/* cpu */0];
  var match = dec(cpu[/* registers */1][/* e */4], undefined, cpu);
  var arg = match[0];
  var partial_arg = (function (param, param$1, param$2, param$3) {
          return (function (param$4, param$5, param$6, param$7) {
              return setRegisters(param, param$1, param$2, param$3, arg, param$4, param$5, param$6, param$7);
            });
        })(undefined, undefined, undefined, undefined)(undefined, undefined, undefined, match[1]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function dec_h(s) {
  var cpu = s[/* cpu */0];
  var match = dec(cpu[/* registers */1][/* h */5], undefined, cpu);
  var arg = match[0];
  var partial_arg = (function (param, param$1, param$2, param$3, param$4) {
          return (function (param$5, param$6, param$7) {
              return setRegisters(param, param$1, param$2, param$3, param$4, arg, param$5, param$6, param$7);
            });
        })(undefined, undefined, undefined, undefined, undefined)(undefined, undefined, match[1]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function dec_l(s) {
  var cpu = s[/* cpu */0];
  var match = dec(cpu[/* registers */1][/* l */6], undefined, cpu);
  var arg = match[0];
  var partial_arg = (function (param, param$1, param$2, param$3, param$4, param$5) {
          return (function (param$6, param$7) {
              return setRegisters(param, param$1, param$2, param$3, param$4, param$5, arg, param$6, param$7);
            });
        })(undefined, undefined, undefined, undefined, undefined, undefined)(undefined, match[1]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function dec_m_hl(s) {
  var gpu = s[/* gpu */2];
  var mmu = s[/* mmu */1];
  var cpu = s[/* cpu */0];
  var addr = rHl(cpu);
  var match = Mmu$GameboyEmulator.read8(addr, /* record */[
        /* gpu */gpu,
        /* mmu */mmu
      ]);
  var match$1 = dec(match[0], 3, cpu);
  var match$2 = Mmu$GameboyEmulator.write8(addr, match$1[0], /* record */[
        /* gpu */gpu,
        /* mmu */mmu
      ]);
  return newState(match$1[1], Caml_option.some(match$2[0]), match$2[1], s);
}

var Decrement8 = /* module */[
  /* dec */dec,
  /* dec_a */dec_a,
  /* dec_b */dec_b,
  /* dec_c */dec_c,
  /* dec_d */dec_d,
  /* dec_e */dec_e,
  /* dec_h */dec_h,
  /* dec_l */dec_l,
  /* dec_m_hl */dec_m_hl
];

function ld_b_n(s) {
  var cpu = s[/* cpu */0];
  var pc = cpu[/* registers */1][/* pc */9];
  var match = Mmu$GameboyEmulator.read8(pc, /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var partial_arg = Caml_option.some(match[1]);
  var arg = match[0];
  var partial_arg$1 = incrementPc(1, machineCycles(2, (function (param) {
                  return (function (param$1, param$2, param$3, param$4, param$5, param$6, param$7) {
                      return setRegisters(param, arg, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
                    });
                })(undefined)(undefined, undefined, undefined, undefined, undefined, undefined, cpu)));
  return (function (eta) {
              var param = undefined;
              var param$1 = eta;
              return newState(partial_arg$1, partial_arg, param, param$1);
            })(s);
}

function ld_c_n(s) {
  var cpu = s[/* cpu */0];
  var pc = cpu[/* registers */1][/* pc */9];
  var match = Mmu$GameboyEmulator.read8(pc, /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var partial_arg = Caml_option.some(match[1]);
  var arg = match[0];
  var partial_arg$1 = incrementPc(1, machineCycles(2, (function (param, param$1) {
                  return (function (param$2, param$3, param$4, param$5, param$6, param$7) {
                      return setRegisters(param, param$1, arg, param$2, param$3, param$4, param$5, param$6, param$7);
                    });
                })(undefined, undefined)(undefined, undefined, undefined, undefined, undefined, cpu)));
  return (function (eta) {
              var param = undefined;
              var param$1 = eta;
              return newState(partial_arg$1, partial_arg, param, param$1);
            })(s);
}

function ld_d_n(s) {
  var cpu = s[/* cpu */0];
  var pc = cpu[/* registers */1][/* pc */9];
  var match = Mmu$GameboyEmulator.read8(pc, /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var partial_arg = Caml_option.some(match[1]);
  var arg = match[0];
  var partial_arg$1 = incrementPc(1, machineCycles(2, (function (param, param$1, param$2) {
                  return (function (param$3, param$4, param$5, param$6, param$7) {
                      return setRegisters(param, param$1, param$2, arg, param$3, param$4, param$5, param$6, param$7);
                    });
                })(undefined, undefined, undefined)(undefined, undefined, undefined, undefined, cpu)));
  return (function (eta) {
              var param = undefined;
              var param$1 = eta;
              return newState(partial_arg$1, partial_arg, param, param$1);
            })(s);
}

function ld_e_n(s) {
  var cpu = s[/* cpu */0];
  var pc = cpu[/* registers */1][/* pc */9];
  var match = Mmu$GameboyEmulator.read8(pc, /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var partial_arg = Caml_option.some(match[1]);
  var arg = match[0];
  var partial_arg$1 = incrementPc(1, machineCycles(2, (function (param, param$1, param$2, param$3) {
                  return (function (param$4, param$5, param$6, param$7) {
                      return setRegisters(param, param$1, param$2, param$3, arg, param$4, param$5, param$6, param$7);
                    });
                })(undefined, undefined, undefined, undefined)(undefined, undefined, undefined, cpu)));
  return (function (eta) {
              var param = undefined;
              var param$1 = eta;
              return newState(partial_arg$1, partial_arg, param, param$1);
            })(s);
}

function ld_h_n(s) {
  var cpu = s[/* cpu */0];
  var pc = cpu[/* registers */1][/* pc */9];
  var match = Mmu$GameboyEmulator.read8(pc, /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var partial_arg = Caml_option.some(match[1]);
  var arg = match[0];
  var partial_arg$1 = incrementPc(1, machineCycles(2, (function (param, param$1, param$2, param$3, param$4) {
                  return (function (param$5, param$6, param$7) {
                      return setRegisters(param, param$1, param$2, param$3, param$4, arg, param$5, param$6, param$7);
                    });
                })(undefined, undefined, undefined, undefined, undefined)(undefined, undefined, cpu)));
  return (function (eta) {
              var param = undefined;
              var param$1 = eta;
              return newState(partial_arg$1, partial_arg, param, param$1);
            })(s);
}

function ld_l_n(s) {
  var cpu = s[/* cpu */0];
  var pc = cpu[/* registers */1][/* pc */9];
  var match = Mmu$GameboyEmulator.read8(pc, /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var partial_arg = Caml_option.some(match[1]);
  var arg = match[0];
  var partial_arg$1 = incrementPc(1, machineCycles(2, (function (param, param$1, param$2, param$3, param$4, param$5) {
                  return (function (param$6, param$7) {
                      return setRegisters(param, param$1, param$2, param$3, param$4, param$5, arg, param$6, param$7);
                    });
                })(undefined, undefined, undefined, undefined, undefined, undefined)(undefined, cpu)));
  return (function (eta) {
              var param = undefined;
              var param$1 = eta;
              return newState(partial_arg$1, partial_arg, param, param$1);
            })(s);
}

var Load_nn_8 = /* module */[
  /* ld_b_n */ld_b_n,
  /* ld_c_n */ld_c_n,
  /* ld_d_n */ld_d_n,
  /* ld_e_n */ld_e_n,
  /* ld_h_n */ld_h_n,
  /* ld_l_n */ld_l_n
];

function ld_m_nn_sp(s) {
  var gpu = s[/* gpu */2];
  var cpu = s[/* cpu */0];
  var pc = cpu[/* registers */1][/* pc */9];
  var match = Mmu$GameboyEmulator.read16(pc, /* record */[
        /* gpu */gpu,
        /* mmu */s[/* mmu */1]
      ]);
  var match$1 = Mmu$GameboyEmulator.write16(match[0], cpu[/* registers */1][/* sp */8], /* record */[
        /* gpu */gpu,
        /* mmu */match[1]
      ]);
  return newState(incrementPc(2, cycles(20, cpu)), Caml_option.some(match$1[0]), match$1[1], s);
}

function add_hl_bc(s) {
  var cpu = s[/* cpu */0];
  var hl = rHl(cpu) + rBc(cpu) | 0;
  var h = (hl >>> 8) & 255;
  var l = hl & 255;
  var carry = hl > 65535;
  var partial_arg = carry ? 1 : 0;
  var arg = h;
  var arg$1 = l;
  var partial_arg$1 = machineCycles(2, (function (eta) {
            var param = undefined;
            var param$1 = eta;
            return setFlag$1(/* C */3, partial_arg, param, param$1);
          })((function (param, param$1, param$2, param$3, param$4) {
                  return (function (param$5, param$6) {
                      return setRegisters(param, param$1, param$2, param$3, param$4, arg, arg$1, param$5, param$6);
                    });
                })(undefined, undefined, undefined, undefined, undefined)(undefined, cpu)));
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg$1, param, param$1, param$2);
            })(s);
}

function dec_bc(s) {
  var cpu = s[/* cpu */0];
  var c = cpu[/* registers */1][/* c */2] - 1 & 255;
  var b = c === 255 ? cpu[/* registers */1][/* b */1] - 1 & 255 : cpu[/* registers */1][/* b */1];
  var arg = b;
  var arg$1 = c;
  var partial_arg = machineCycles(2, (function (param) {
              return (function (param$1, param$2, param$3, param$4, param$5, param$6) {
                  return setRegisters(param, arg, arg$1, param$1, param$2, param$3, param$4, param$5, param$6);
                });
            })(undefined)(undefined, undefined, undefined, undefined, undefined, cpu));
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function dec_de(s) {
  var cpu = s[/* cpu */0];
  var e = cpu[/* registers */1][/* e */4] - 1 & 255;
  var d = e === 255 ? cpu[/* registers */1][/* d */3] - 1 & 255 : cpu[/* registers */1][/* d */3];
  var arg = d;
  var arg$1 = e;
  var partial_arg = machineCycles(2, (function (param, param$1, param$2) {
              return (function (param$3, param$4, param$5, param$6) {
                  return setRegisters(param, param$1, param$2, arg, arg$1, param$3, param$4, param$5, param$6);
                });
            })(undefined, undefined, undefined)(undefined, undefined, undefined, cpu));
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function dec_hl(s) {
  var cpu = s[/* cpu */0];
  var l = cpu[/* registers */1][/* l */6] - 1 & 255;
  var h = l === 255 ? cpu[/* registers */1][/* h */5] - 1 & 255 : cpu[/* registers */1][/* h */5];
  var arg = h;
  var arg$1 = l;
  var partial_arg = machineCycles(2, (function (param, param$1, param$2, param$3, param$4) {
              return (function (param$5, param$6) {
                  return setRegisters(param, param$1, param$2, param$3, param$4, arg, arg$1, param$5, param$6);
                });
            })(undefined, undefined, undefined, undefined, undefined)(undefined, cpu));
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function dec_sp(s) {
  var partial_arg = machineCycles(2, decrementSp(s[/* cpu */0]));
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

var Decrement16 = /* module */[
  /* dec_bc */dec_bc,
  /* dec_de */dec_de,
  /* dec_hl */dec_hl,
  /* dec_sp */dec_sp
];

function rlca(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */1];
  var a = match[/* a */0];
  var match$1 = (a & 128) > 0;
  var highBit = match$1 ? 1 : 0;
  var a$prime = (a << 1) + highBit & 255;
  var partial_arg = a$prime;
  var partial_arg$1 = (function (eta) {
        var param = undefined;
        var param$1 = eta;
        return setFlag$1(/* C */3, highBit, param, param$1);
      })((function (eta) {
            var param = undefined;
            var param$1 = undefined;
            var param$2 = undefined;
            var param$3 = undefined;
            var param$4 = undefined;
            var param$5 = undefined;
            var param$6 = undefined;
            var param$7 = eta;
            return setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
          })(machineCycles(1, cpu)));
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg$1, param, param$1, param$2);
            })(s);
}

function rrca(s) {
  var partial_arg = machineCycles(1, s[/* cpu */0]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function rla(s) {
  var partial_arg = machineCycles(1, s[/* cpu */0]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function rra(s) {
  var partial_arg = machineCycles(1, s[/* cpu */0]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

var Rotation = /* module */[
  /* rlca */rlca,
  /* rrca */rrca,
  /* rla */rla,
  /* rra */rra
];

function or_(register, $staropt$star, cpu) {
  var cycles = $staropt$star !== undefined ? $staropt$star : 1;
  var r = (cpu[/* registers */1][/* a */0] | register) & 255;
  return /* tuple */[
          r,
          machineCycles(cycles, setFlag$1(/* Z */0, r === 0 ? 1 : 0, 0, cpu))
        ];
}

function or_a(s) {
  var cpu = s[/* cpu */0];
  var match = or_(cpu[/* registers */1][/* a */0], undefined, cpu);
  var partial_arg = match[0];
  var partial_arg$1 = (function (eta) {
        var param = undefined;
        var param$1 = undefined;
        var param$2 = undefined;
        var param$3 = undefined;
        var param$4 = undefined;
        var param$5 = undefined;
        var param$6 = undefined;
        var param$7 = eta;
        return setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
      })(match[1]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg$1, param, param$1, param$2);
            })(s);
}

function or_b(s) {
  var cpu = s[/* cpu */0];
  var match = or_(cpu[/* registers */1][/* b */1], undefined, cpu);
  var arg = match[0];
  var partial_arg = (function (param) {
          return (function (param$1, param$2, param$3, param$4, param$5, param$6, param$7) {
              return setRegisters(param, arg, param$1, param$2, param$3, param$4, param$5, param$6, param$7);
            });
        })(undefined)(undefined, undefined, undefined, undefined, undefined, undefined, match[1]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function or_c(s) {
  var cpu = s[/* cpu */0];
  var match = or_(cpu[/* registers */1][/* c */2], undefined, cpu);
  var arg = match[0];
  var partial_arg = (function (param, param$1) {
          return (function (param$2, param$3, param$4, param$5, param$6, param$7) {
              return setRegisters(param, param$1, arg, param$2, param$3, param$4, param$5, param$6, param$7);
            });
        })(undefined, undefined)(undefined, undefined, undefined, undefined, undefined, match[1]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function or_d(s) {
  var cpu = s[/* cpu */0];
  var match = or_(cpu[/* registers */1][/* d */3], undefined, cpu);
  var arg = match[0];
  var partial_arg = (function (param, param$1, param$2) {
          return (function (param$3, param$4, param$5, param$6, param$7) {
              return setRegisters(param, param$1, param$2, arg, param$3, param$4, param$5, param$6, param$7);
            });
        })(undefined, undefined, undefined)(undefined, undefined, undefined, undefined, match[1]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function or_e(s) {
  var cpu = s[/* cpu */0];
  var match = or_(cpu[/* registers */1][/* e */4], undefined, cpu);
  var arg = match[0];
  var partial_arg = (function (param, param$1, param$2, param$3) {
          return (function (param$4, param$5, param$6, param$7) {
              return setRegisters(param, param$1, param$2, param$3, arg, param$4, param$5, param$6, param$7);
            });
        })(undefined, undefined, undefined, undefined)(undefined, undefined, undefined, match[1]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function or_h(s) {
  var cpu = s[/* cpu */0];
  var match = or_(cpu[/* registers */1][/* h */5], undefined, cpu);
  var arg = match[0];
  var partial_arg = (function (param, param$1, param$2, param$3, param$4) {
          return (function (param$5, param$6, param$7) {
              return setRegisters(param, param$1, param$2, param$3, param$4, arg, param$5, param$6, param$7);
            });
        })(undefined, undefined, undefined, undefined, undefined)(undefined, undefined, match[1]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function or_l(s) {
  var cpu = s[/* cpu */0];
  var match = or_(cpu[/* registers */1][/* l */6], undefined, cpu);
  var arg = match[0];
  var partial_arg = (function (param, param$1, param$2, param$3, param$4, param$5) {
          return (function (param$6, param$7) {
              return setRegisters(param, param$1, param$2, param$3, param$4, param$5, arg, param$6, param$7);
            });
        })(undefined, undefined, undefined, undefined, undefined, undefined)(undefined, match[1]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function or_m_hl(s) {
  var cpu = s[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(rHl(cpu), /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var match$1 = or_(match[0], 2, cpu);
  var arg = match$1[0];
  var partial_arg = (function (param, param$1, param$2, param$3, param$4, param$5) {
          return (function (param$6, param$7) {
              return setRegisters(param, param$1, param$2, param$3, param$4, param$5, arg, param$6, param$7);
            });
        })(undefined, undefined, undefined, undefined, undefined, undefined)(undefined, match$1[1]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

var Or = /* module */[
  /* or_ */or_,
  /* or_a */or_a,
  /* or_b */or_b,
  /* or_c */or_c,
  /* or_d */or_d,
  /* or_e */or_e,
  /* or_h */or_h,
  /* or_l */or_l,
  /* or_m_hl */or_m_hl
];

function push(param, register1, register2) {
  var cpu = decrementSp(param[/* cpu */0]);
  var match = Mmu$GameboyEmulator.write8(cpu[/* registers */1][/* sp */8], register1, /* record */[
        /* gpu */param[/* gpu */2],
        /* mmu */param[/* mmu */1]
      ]);
  var cpu$1 = decrementSp(cpu);
  var match$1 = Mmu$GameboyEmulator.write8(cpu$1[/* registers */1][/* sp */8], register2, /* record */[
        /* gpu */match[1],
        /* mmu */match[0]
      ]);
  return /* tuple */[
          machineCycles(4, cpu$1),
          match$1[0],
          match$1[1]
        ];
}

function push_af(s) {
  var cpu = s[/* cpu */0];
  var match = push(s, cpu[/* registers */1][/* a */0], cpu[/* registers */1][/* f */7]);
  return newState(match[0], Caml_option.some(match[1]), match[2], s);
}

function push_bc(s) {
  var cpu = s[/* cpu */0];
  var match = push(s, cpu[/* registers */1][/* b */1], cpu[/* registers */1][/* c */2]);
  return newState(match[0], Caml_option.some(match[1]), match[2], s);
}

function push_de(s) {
  var cpu = s[/* cpu */0];
  var match = push(s, cpu[/* registers */1][/* d */3], cpu[/* registers */1][/* e */4]);
  return newState(match[0], Caml_option.some(match[1]), match[2], s);
}

function push_hl(s) {
  var cpu = s[/* cpu */0];
  var match = push(s, cpu[/* registers */1][/* h */5], cpu[/* registers */1][/* l */6]);
  return newState(match[0], Caml_option.some(match[1]), match[2], s);
}

var Push = /* module */[
  /* push */push,
  /* push_af */push_af,
  /* push_bc */push_bc,
  /* push_de */push_de,
  /* push_hl */push_hl
];

function pop(param) {
  var gpu = param[/* gpu */2];
  var cpu = param[/* cpu */0];
  var match = Mmu$GameboyEmulator.read8(cpu[/* registers */1][/* sp */8], /* record */[
        /* gpu */gpu,
        /* mmu */param[/* mmu */1]
      ]);
  var cpu$1 = incrementSp(cpu);
  var match$1 = Mmu$GameboyEmulator.read8(cpu$1[/* registers */1][/* sp */8], /* record */[
        /* gpu */gpu,
        /* mmu */match[1]
      ]);
  var cpu$2 = incrementSp(cpu$1);
  return /* tuple */[
          machineCycles(3, cpu$2),
          match$1[1],
          match$1[0],
          match[0]
        ];
}

function pop_af(s) {
  var match = pop(s);
  var a = match[2];
  var partial_arg = Caml_option.some(match[1]);
  var arg = match[3];
  var arg$1 = function (param, param$1, param$2, param$3, param$4, param$5) {
    var partial_arg = a;
    return (function (param$6) {
        return setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, arg, param$6);
      });
  };
  var partial_arg$1 = (function (eta) {
        return arg$1(undefined, undefined, undefined, undefined, undefined, undefined)(eta);
      })(match[0]);
  return (function (eta) {
              var param = undefined;
              var param$1 = eta;
              return newState(partial_arg$1, partial_arg, param, param$1);
            })(s);
}

function pop_bc(s) {
  var match = pop(s);
  var partial_arg = Caml_option.some(match[1]);
  var arg = match[2];
  var arg$1 = match[3];
  var partial_arg$1 = (function (param) {
          return (function (param$1, param$2, param$3, param$4, param$5, param$6) {
              return setRegisters(param, arg, arg$1, param$1, param$2, param$3, param$4, param$5, param$6);
            });
        })(undefined)(undefined, undefined, undefined, undefined, undefined, match[0]);
  return (function (eta) {
              var param = undefined;
              var param$1 = eta;
              return newState(partial_arg$1, partial_arg, param, param$1);
            })(s);
}

function pop_de(s) {
  var match = pop(s);
  var partial_arg = Caml_option.some(match[1]);
  var arg = match[2];
  var arg$1 = match[3];
  var partial_arg$1 = (function (param, param$1, param$2) {
          return (function (param$3, param$4, param$5, param$6) {
              return setRegisters(param, param$1, param$2, arg, arg$1, param$3, param$4, param$5, param$6);
            });
        })(undefined, undefined, undefined)(undefined, undefined, undefined, match[0]);
  return (function (eta) {
              var param = undefined;
              var param$1 = eta;
              return newState(partial_arg$1, partial_arg, param, param$1);
            })(s);
}

function pop_hl(s) {
  var match = pop(s);
  var partial_arg = Caml_option.some(match[1]);
  var arg = match[2];
  var arg$1 = match[3];
  var partial_arg$1 = (function (param, param$1, param$2, param$3, param$4) {
          return (function (param$5, param$6) {
              return setRegisters(param, param$1, param$2, param$3, param$4, arg, arg$1, param$5, param$6);
            });
        })(undefined, undefined, undefined, undefined, undefined)(undefined, match[0]);
  return (function (eta) {
              var param = undefined;
              var param$1 = eta;
              return newState(partial_arg$1, partial_arg, param, param$1);
            })(s);
}

var Pop = /* module */[
  /* pop */pop,
  /* pop_af */pop_af,
  /* pop_bc */pop_bc,
  /* pop_de */pop_de,
  /* pop_hl */pop_hl
];

var Ops = /* module */[
  /* newState */newState,
  /* nop */nop,
  /* Load_16_8 */Load_16_8,
  /* Load_8_A */Load_8_A,
  /* Load_A_8 */Load_A_8,
  /* Increment16 */Increment16,
  /* Increment8 */Increment8,
  /* Decrement8 */Decrement8,
  /* Load_nn_8 */Load_nn_8,
  /* ld_m_nn_sp */ld_m_nn_sp,
  /* add_hl_bc */add_hl_bc,
  /* Decrement16 */Decrement16,
  /* Rotation */Rotation,
  /* Or */Or,
  /* Push */Push,
  /* Pop */Pop
];

function exec(instruction) {
  switch (instruction) {
    case 1 : 
        return ld_bc_nn;
    case 2 : 
        return ld_m_bc_a;
    case 3 : 
        return inc_bc;
    case 4 : 
        return inc_b;
    case 5 : 
        return dec_b;
    case 6 : 
        return ld_b_n;
    case 7 : 
        return rlca;
    case 8 : 
        return ld_m_nn_sp;
    case 9 : 
        return add_hl_bc;
    case 10 : 
        return ld_a_m_bc;
    case 11 : 
        return dec_bc;
    case 12 : 
        return inc_c;
    case 13 : 
        return dec_c;
    case 14 : 
        return ld_c_n;
    case 15 : 
        return rrca;
    case 17 : 
        return ld_de_nn;
    case 18 : 
        return ld_m_de_a;
    case 19 : 
        return inc_de;
    case 20 : 
        return inc_d;
    case 21 : 
        return dec_d;
    case 22 : 
        return ld_d_n;
    case 23 : 
        return rla;
    case 26 : 
        return ld_a_m_de;
    case 27 : 
        return dec_de;
    case 28 : 
        return inc_e;
    case 29 : 
        return dec_e;
    case 30 : 
        return ld_e_n;
    case 31 : 
        return rra;
    case 33 : 
        return ld_hl_nn;
    case 35 : 
        return inc_hl;
    case 36 : 
        return inc_h;
    case 37 : 
        return dec_h;
    case 38 : 
        return ld_h_n;
    case 43 : 
        return dec_hl;
    case 44 : 
        return inc_l;
    case 45 : 
        return dec_l;
    case 46 : 
        return ld_l_n;
    case 51 : 
        return inc_sp;
    case 53 : 
        return dec_m_hl;
    case 59 : 
        return dec_sp;
    case 60 : 
        return inc_a;
    case 61 : 
        return dec_a;
    case 71 : 
        return ld_b_a;
    case 79 : 
        return ld_c_a;
    case 87 : 
        return ld_d_a;
    case 95 : 
        return ld_e_a;
    case 103 : 
        return ld_h_a;
    case 111 : 
        return ld_l_a;
    case 119 : 
        return ld_m_hl_a;
    case 120 : 
        return ld_a_b;
    case 121 : 
        return ld_a_c;
    case 122 : 
        return ld_a_d;
    case 123 : 
        return ld_a_e;
    case 124 : 
        return ld_a_h;
    case 125 : 
        return ld_a_l;
    case 126 : 
        return ld_a_m_hl;
    case 127 : 
        return ld_a_a;
    case 176 : 
        return or_b;
    case 177 : 
        return or_c;
    case 178 : 
        return or_d;
    case 179 : 
        return or_e;
    case 180 : 
        return or_h;
    case 181 : 
        return or_l;
    case 183 : 
        return or_a;
    case 193 : 
        return pop_bc;
    case 197 : 
        return push_bc;
    case 209 : 
        return pop_de;
    case 213 : 
        return push_de;
    case 225 : 
        return pop_hl;
    case 229 : 
        return push_hl;
    case 234 : 
        return ld_m_nn_a;
    case 241 : 
        return pop_af;
    case 245 : 
        return push_af;
    case 0 : 
    case 16 : 
    case 24 : 
    case 25 : 
    case 32 : 
    case 34 : 
    case 39 : 
    case 40 : 
    case 41 : 
    case 42 : 
    case 47 : 
    case 48 : 
    case 49 : 
    case 50 : 
    case 52 : 
    case 54 : 
    case 55 : 
    case 56 : 
    case 57 : 
    case 58 : 
    case 62 : 
    case 63 : 
    case 64 : 
    case 65 : 
    case 66 : 
    case 67 : 
    case 68 : 
    case 69 : 
    case 70 : 
    case 72 : 
    case 73 : 
    case 74 : 
    case 75 : 
    case 76 : 
    case 77 : 
    case 78 : 
    case 80 : 
    case 81 : 
    case 82 : 
    case 83 : 
    case 84 : 
    case 85 : 
    case 86 : 
    case 88 : 
    case 89 : 
    case 90 : 
    case 91 : 
    case 92 : 
    case 93 : 
    case 94 : 
    case 96 : 
    case 97 : 
    case 98 : 
    case 99 : 
    case 100 : 
    case 101 : 
    case 102 : 
    case 104 : 
    case 105 : 
    case 106 : 
    case 107 : 
    case 108 : 
    case 109 : 
    case 110 : 
    case 112 : 
    case 113 : 
    case 114 : 
    case 115 : 
    case 116 : 
    case 117 : 
    case 118 : 
    case 128 : 
    case 129 : 
    case 130 : 
    case 131 : 
    case 132 : 
    case 133 : 
    case 134 : 
    case 135 : 
    case 136 : 
    case 137 : 
    case 138 : 
    case 139 : 
    case 140 : 
    case 141 : 
    case 142 : 
    case 143 : 
    case 144 : 
    case 145 : 
    case 146 : 
    case 147 : 
    case 148 : 
    case 149 : 
    case 150 : 
    case 151 : 
    case 152 : 
    case 153 : 
    case 154 : 
    case 155 : 
    case 156 : 
    case 157 : 
    case 158 : 
    case 159 : 
    case 160 : 
    case 161 : 
    case 162 : 
    case 163 : 
    case 164 : 
    case 165 : 
    case 166 : 
    case 167 : 
    case 168 : 
    case 169 : 
    case 170 : 
    case 171 : 
    case 172 : 
    case 173 : 
    case 174 : 
    case 175 : 
    case 182 : 
    case 184 : 
    case 185 : 
    case 186 : 
    case 187 : 
    case 188 : 
    case 189 : 
    case 190 : 
    case 191 : 
    case 192 : 
    case 194 : 
    case 195 : 
    case 196 : 
    case 198 : 
    case 199 : 
    case 200 : 
    case 201 : 
    case 202 : 
    case 203 : 
    case 204 : 
    case 205 : 
    case 206 : 
    case 207 : 
    case 208 : 
    case 210 : 
    case 211 : 
    case 212 : 
    case 214 : 
    case 215 : 
    case 216 : 
    case 217 : 
    case 218 : 
    case 219 : 
    case 220 : 
    case 221 : 
    case 222 : 
    case 223 : 
    case 224 : 
    case 226 : 
    case 227 : 
    case 228 : 
    case 230 : 
    case 231 : 
    case 232 : 
    case 233 : 
    case 235 : 
    case 236 : 
    case 237 : 
    case 238 : 
    case 239 : 
    case 240 : 
    case 242 : 
    case 243 : 
    case 244 : 
    case 246 : 
    case 247 : 
    case 248 : 
    case 249 : 
    case 250 : 
    case 251 : 
    case 252 : 
    case 253 : 
    case 254 : 
    case 255 : 
        return nop;
    default:
      throw [
            UnhandledInstruction,
            Curry._1(Printf.sprintf(/* Format */[
                      /* String_literal */Block.__(11, [
                          "Unhandled instruction, ",
                          /* Int */Block.__(4, [
                              /* Int_Cx */7,
                              /* Lit_padding */Block.__(0, [
                                  /* Right */1,
                                  2
                                ]),
                              /* No_precision */0,
                              /* End_of_format */0
                            ])
                        ]),
                      "Unhandled instruction, %#2x"
                    ]), instruction)
          ];
  }
}

exports.UnhandledInstruction = UnhandledInstruction;
exports.AssertionException = AssertionException;
exports.Flags = Flags;
exports.make = make;
exports.b2i = b2i;
exports.programCount = programCount;
exports.readRegister16 = readRegister16;
exports.rAf = rAf;
exports.rBc = rBc;
exports.rDe = rDe;
exports.rHl = rHl;
exports.incrementPc = incrementPc;
exports.incrementSp = incrementSp;
exports.decrementSp = decrementSp;
exports.getFlag = getFlag;
exports.setFlag = setFlag$1;
exports.checkRegister = checkRegister;
exports.setRegisters = setRegisters;
exports.machineCycles = machineCycles;
exports.cycles = cycles;
exports.Ops = Ops;
exports.exec = exec;
/* Mmu-GameboyEmulator Not a pure module */
