// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Mmu$GameboyEmulator = require("./Mmu.bs.js");

function flagOffset(flag) {
  switch (flag) {
    case 0 : 
        return 7;
    case 1 : 
        return 6;
    case 2 : 
        return 5;
    case 3 : 
        return 4;
    
  }
}

function setFlag(flag, value, flags) {
  var bit = (1 << flagOffset(flag));
  if (value !== 0) {
    return flags | bit;
  } else {
    return flags & Pervasives.lnot(bit);
  }
}

var Flags = /* module */[
  /* z */7,
  /* n */6,
  /* h */5,
  /* c */4,
  /* flagOffset */flagOffset,
  /* setFlag */setFlag
];

var UnhandledInstruction = Caml_exceptions.create("Cpu-GameboyEmulator.UnhandledInstruction");

function make(param) {
  return /* record */[
          /* clock */0,
          /* registers : record */[
            /* a */0,
            /* b */0,
            /* c */0,
            /* d */0,
            /* e */0,
            /* h */0,
            /* l */0,
            /* f */0,
            /* sp */0,
            /* pc */0,
            /* mCycles */0
          ]
        ];
}

function b2i(bool) {
  if (bool) {
    return 1;
  } else {
    return 0;
  }
}

function programCount(cpu) {
  return cpu[/* registers */1][/* pc */9];
}

function readRegister16(register, param) {
  var match = param[/* registers */1];
  var a = match[/* a */0];
  var b = match[/* b */1];
  var c = match[/* c */2];
  var d = match[/* d */3];
  var e = match[/* e */4];
  var h = match[/* h */5];
  var l = match[/* l */6];
  var f = match[/* f */7];
  var match$1;
  switch (register) {
    case 0 : 
        match$1 = /* tuple */[
          a,
          f
        ];
        break;
    case 1 : 
        match$1 = /* tuple */[
          b,
          c
        ];
        break;
    case 2 : 
        match$1 = /* tuple */[
          d,
          e
        ];
        break;
    case 3 : 
        match$1 = /* tuple */[
          h,
          l
        ];
        break;
    
  }
  return match$1[1] + (match$1[0] << 8) | 0;
}

function rAf(param) {
  return readRegister16(/* AF */0, param);
}

function rBc(param) {
  return readRegister16(/* BC */1, param);
}

function rDe(param) {
  return readRegister16(/* DE */2, param);
}

function rHl(param) {
  return readRegister16(/* HL */3, param);
}

function incrementPc(cycles, cpu) {
  cpu[/* registers */1][/* pc */9] = cpu[/* registers */1][/* pc */9] + cycles | 0;
  return cpu;
}

function incrementSp(t) {
  t[/* sp */8] = t[/* sp */8] + 1 | 0;
  return t;
}

function decrementSp(t) {
  t[/* sp */8] = t[/* sp */8] - 1 | 0;
  return t;
}

function getFlag(flag, cpu) {
  var bit = (1 << flagOffset(flag));
  return cpu[/* registers */1][/* f */7] & bit;
}

function setFlag$1(flag, value, initialValue, cpu) {
  cpu[/* registers */1][/* f */7] = setFlag(flag, value, Belt_Option.getWithDefault(initialValue, cpu[/* registers */1][/* f */7]));
  return cpu;
}

function setRegisters(a, b, c, d, e, h, l, cpu) {
  var registers = cpu[/* registers */1];
  registers[/* a */0] = Belt_Option.getWithDefault(a, registers[/* a */0]);
  registers[/* b */1] = Belt_Option.getWithDefault(b, registers[/* b */1]);
  registers[/* c */2] = Belt_Option.getWithDefault(c, registers[/* c */2]);
  registers[/* d */3] = Belt_Option.getWithDefault(d, registers[/* d */3]);
  registers[/* e */4] = Belt_Option.getWithDefault(e, registers[/* e */4]);
  registers[/* h */5] = Belt_Option.getWithDefault(h, registers[/* h */5]);
  registers[/* l */6] = Belt_Option.getWithDefault(l, registers[/* l */6]);
  return cpu;
}

function machineCycles(cycles, cpu) {
  cpu[/* registers */1][/* mCycles */10] = cycles;
  return cpu;
}

function cycles(cycles$1, cpu) {
  return machineCycles(cycles$1 / 4 | 0, cpu);
}

function newState(cpu, mmu, gpu, old) {
  return /* record */[
          /* cpu */Belt_Option.getWithDefault(cpu, old[/* cpu */0]),
          /* mmu */Belt_Option.getWithDefault(mmu, old[/* mmu */1]),
          /* gpu */Belt_Option.getWithDefault(gpu, old[/* gpu */2])
        ];
}

function nop(s) {
  var partial_arg = machineCycles(1, s[/* cpu */0]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function ld_bc_nn(s) {
  var gpu = s[/* gpu */2];
  var cpu = s[/* cpu */0];
  var pc = cpu[/* registers */1][/* pc */9];
  var match = Mmu$GameboyEmulator.read8(pc, /* record */[
        /* gpu */gpu,
        /* mmu */s[/* mmu */1]
      ]);
  var match$1 = Mmu$GameboyEmulator.read8(pc + 1 | 0, /* record */[
        /* gpu */gpu,
        /* mmu */match[1]
      ]);
  var partial_arg = Caml_option.some(match$1[1]);
  var arg = match$1[0];
  var arg$1 = match[0];
  var partial_arg$1 = incrementPc(2, machineCycles(3, (function (param) {
                  return (function (param$1, param$2, param$3, param$4, param$5) {
                      return setRegisters(param, arg, arg$1, param$1, param$2, param$3, param$4, param$5);
                    });
                })(undefined)(undefined, undefined, undefined, undefined, cpu)));
  return (function (eta) {
              var param = undefined;
              var param$1 = eta;
              return newState(partial_arg$1, partial_arg, param, param$1);
            })(s);
}

function ld_m_bc_a(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */1];
  var a = match[/* a */0];
  var match$1 = Mmu$GameboyEmulator.write8(rBc(cpu), a, /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var partial_arg = Caml_option.some(match$1[0]);
  var partial_arg$1 = machineCycles(2, cpu);
  return (function (eta) {
              var param = undefined;
              var param$1 = eta;
              return newState(partial_arg$1, partial_arg, param, param$1);
            })(s);
}

function inc_bc(s) {
  var cpu = s[/* cpu */0];
  var c = cpu[/* registers */1][/* c */2] + 1 & 255;
  var b = c === 0 ? cpu[/* registers */1][/* b */1] + 1 | 0 : cpu[/* registers */1][/* b */1];
  var arg = b;
  var arg$1 = c;
  var partial_arg = machineCycles(2, (function (param) {
              return (function (param$1, param$2, param$3, param$4, param$5) {
                  return setRegisters(param, arg, arg$1, param$1, param$2, param$3, param$4, param$5);
                });
            })(undefined)(undefined, undefined, undefined, undefined, cpu));
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function inc_b(s) {
  var cpu = s[/* cpu */0];
  var b = cpu[/* registers */1][/* b */1] + 1 & 255;
  var f = cpu[/* registers */1][/* f */7] & 16;
  var arg = b;
  var partial_arg = machineCycles(1, setFlag$1(/* Z */0, b === 0 ? 1 : 0, f, (function (param) {
                  return (function (param$1, param$2, param$3, param$4, param$5, param$6) {
                      return setRegisters(param, arg, param$1, param$2, param$3, param$4, param$5, param$6);
                    });
                })(undefined)(undefined, undefined, undefined, undefined, undefined, cpu)));
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function dec_b(s) {
  var cpu = s[/* cpu */0];
  var b = cpu[/* registers */1][/* b */1] - 1 & 255;
  var f = cpu[/* registers */1][/* f */7] & 16;
  var arg = b;
  var partial_arg = machineCycles(2, (function (eta) {
            var param = undefined;
            var param$1 = eta;
            return setFlag$1(/* N */1, 1, param, param$1);
          })(setFlag$1(/* Z */0, b === 0 ? 1 : 0, f, (function (param) {
                      return (function (param$1, param$2, param$3, param$4, param$5, param$6) {
                          return setRegisters(param, arg, param$1, param$2, param$3, param$4, param$5, param$6);
                        });
                    })(undefined)(undefined, undefined, undefined, undefined, undefined, cpu))));
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function ld_b_n(s) {
  var cpu = s[/* cpu */0];
  var pc = cpu[/* registers */1][/* pc */9];
  var match = Mmu$GameboyEmulator.read8(pc, /* record */[
        /* gpu */s[/* gpu */2],
        /* mmu */s[/* mmu */1]
      ]);
  var partial_arg = Caml_option.some(match[1]);
  var arg = match[0];
  var partial_arg$1 = incrementPc(1, machineCycles(2, (function (param) {
                  return (function (param$1, param$2, param$3, param$4, param$5, param$6) {
                      return setRegisters(param, arg, param$1, param$2, param$3, param$4, param$5, param$6);
                    });
                })(undefined)(undefined, undefined, undefined, undefined, undefined, cpu)));
  return (function (eta) {
              var param = undefined;
              var param$1 = eta;
              return newState(partial_arg$1, partial_arg, param, param$1);
            })(s);
}

function rlca(s) {
  var cpu = s[/* cpu */0];
  var match = cpu[/* registers */1];
  var a = match[/* a */0];
  var match$1 = (a & 128) > 0;
  var highBit = match$1 ? 1 : 0;
  var a$prime = (a << 1) + highBit & 255;
  var partial_arg = a$prime;
  var partial_arg$1 = (function (eta) {
        var param = undefined;
        var param$1 = eta;
        return setFlag$1(/* C */3, highBit, param, param$1);
      })((function (eta) {
            var param = undefined;
            var param$1 = undefined;
            var param$2 = undefined;
            var param$3 = undefined;
            var param$4 = undefined;
            var param$5 = undefined;
            var param$6 = eta;
            return setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6);
          })(machineCycles(1, cpu)));
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg$1, param, param$1, param$2);
            })(s);
}

function ld_m_nn_sp(s) {
  var gpu = s[/* gpu */2];
  var cpu = s[/* cpu */0];
  var pc = cpu[/* registers */1][/* pc */9];
  var match = Mmu$GameboyEmulator.read16(pc, /* record */[
        /* gpu */gpu,
        /* mmu */s[/* mmu */1]
      ]);
  var match$1 = Mmu$GameboyEmulator.write8(match[0], cpu[/* registers */1][/* sp */8], /* record */[
        /* gpu */gpu,
        /* mmu */match[1]
      ]);
  return newState(incrementPc(2, cycles(20, cpu)), Caml_option.some(match$1[0]), match$1[1], s);
}

function add_hl_bc(s) {
  var cpu = s[/* cpu */0];
  var hl = rHl(cpu) + rBc(cpu) | 0;
  var h = (hl >>> 8) & 255;
  var l = hl & 255;
  var carry = hl > 65535;
  var partial_arg = carry ? 1 : 0;
  var arg = h;
  var arg$1 = l;
  var partial_arg$1 = machineCycles(2, (function (eta) {
            var param = undefined;
            var param$1 = eta;
            return setFlag$1(/* C */3, partial_arg, param, param$1);
          })((function (param, param$1, param$2, param$3, param$4) {
                  return (function (param$5) {
                      return setRegisters(param, param$1, param$2, param$3, param$4, arg, arg$1, param$5);
                    });
                })(undefined, undefined, undefined, undefined, undefined)(cpu)));
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg$1, param, param$1, param$2);
            })(s);
}

function ld_a_m_bc(s) {
  var cpu = s[/* cpu */0];
  var a = rBc(cpu);
  var partial_arg = a;
  var partial_arg$1 = machineCycles(2, (function (eta) {
            var param = undefined;
            var param$1 = undefined;
            var param$2 = undefined;
            var param$3 = undefined;
            var param$4 = undefined;
            var param$5 = undefined;
            var param$6 = eta;
            return setRegisters(partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6);
          })(cpu));
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg$1, param, param$1, param$2);
            })(s);
}

function rrca(s) {
  console.log("RRCA");
  var partial_arg = machineCycles(1, s[/* cpu */0]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function rla(s) {
  console.log("RLA");
  var partial_arg = machineCycles(1, s[/* cpu */0]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

function rra(s) {
  console.log("RRA");
  var partial_arg = machineCycles(1, s[/* cpu */0]);
  return (function (eta) {
              var param = undefined;
              var param$1 = undefined;
              var param$2 = eta;
              return newState(partial_arg, param, param$1, param$2);
            })(s);
}

var Ops = /* module */[
  /* newState */newState,
  /* nop */nop,
  /* ld_bc_nn */ld_bc_nn,
  /* ld_m_bc_a */ld_m_bc_a,
  /* inc_bc */inc_bc,
  /* inc_b */inc_b,
  /* dec_b */dec_b,
  /* ld_b_n */ld_b_n,
  /* rlca */rlca,
  /* ld_m_nn_sp */ld_m_nn_sp,
  /* add_hl_bc */add_hl_bc,
  /* ld_a_m_bc */ld_a_m_bc,
  /* rrca */rrca,
  /* rla */rla,
  /* rra */rra
];

function exec(instruction) {
  var exit = 0;
  if (instruction >= 32) {
    if (instruction >= 256) {
      exit = 1;
    } else {
      return nop;
    }
  } else if (instruction >= 0) {
    switch (instruction) {
      case 1 : 
          return ld_bc_nn;
      case 2 : 
          return ld_m_bc_a;
      case 3 : 
          return inc_bc;
      case 4 : 
          return inc_b;
      case 5 : 
          return dec_b;
      case 6 : 
          return ld_b_n;
      case 7 : 
          return rlca;
      case 8 : 
          return ld_m_nn_sp;
      case 15 : 
          return rrca;
      case 23 : 
          return rla;
      case 0 : 
      case 9 : 
      case 10 : 
      case 11 : 
      case 12 : 
      case 13 : 
      case 14 : 
      case 16 : 
      case 17 : 
      case 18 : 
      case 19 : 
      case 20 : 
      case 21 : 
      case 22 : 
      case 24 : 
      case 25 : 
      case 26 : 
      case 27 : 
      case 28 : 
      case 29 : 
      case 30 : 
          return nop;
      case 31 : 
          return rra;
      
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    throw [
          UnhandledInstruction,
          Curry._1(Printf.sprintf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "Unhandled instruction, ",
                        /* Int */Block.__(4, [
                            /* Int_Cx */7,
                            /* Lit_padding */Block.__(0, [
                                /* Right */1,
                                2
                              ]),
                            /* No_precision */0,
                            /* End_of_format */0
                          ])
                      ]),
                    "Unhandled instruction, %#2x"
                  ]), instruction)
        ];
  }
  
}

exports.Flags = Flags;
exports.UnhandledInstruction = UnhandledInstruction;
exports.make = make;
exports.b2i = b2i;
exports.programCount = programCount;
exports.readRegister16 = readRegister16;
exports.rAf = rAf;
exports.rBc = rBc;
exports.rDe = rDe;
exports.rHl = rHl;
exports.incrementPc = incrementPc;
exports.incrementSp = incrementSp;
exports.decrementSp = decrementSp;
exports.getFlag = getFlag;
exports.setFlag = setFlag$1;
exports.setRegisters = setRegisters;
exports.machineCycles = machineCycles;
exports.cycles = cycles;
exports.Ops = Ops;
exports.exec = exec;
/* Mmu-GameboyEmulator Not a pure module */
