// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Gpu$GameboyEmulator = require("./Gpu.bs.js");

var AssertionException = Caml_exceptions.create("Mmu-GameboyEmulator.AssertionException");

var bios = $$Array.map(Caml_format.caml_int_of_string, $$Array.map((function (prim) {
            return prim.trim();
          }), "\n    0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,\n    0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,\n    0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,\n    0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,\n    0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,\n    0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,\n    0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,\n    0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,\n    0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xF2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,\n    0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,\n    0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,\n    0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,\n    0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,\n    0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3c, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x4C,\n    0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20,\n    0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50\n  ".split(",")));

function reset(mmu) {
  return /* record */[
          /* finishedBios */false,
          /* cartType */mmu[/* cartType */1],
          /* rom */mmu[/* rom */2],
          /* externalRam */Caml_array.caml_make_vect(8192, 0),
          /* workRam */Caml_array.caml_make_vect(8192, 0),
          /* zeroPageRam */Caml_array.caml_make_vect(128, 0)
        ];
}

function load(bytes) {
  return reset(/* record */[
              /* finishedBios */false,
              /* cartType */Caml_array.caml_array_get(bytes, 327),
              /* rom */bytes,
              /* externalRam : array */[],
              /* workRam : array */[],
              /* zeroPageRam : array */[]
            ]);
}

function read8(addr, param) {
  var mmu = param[/* mmu */1];
  var gpu = param[/* gpu */0];
  var match = addr & 61440;
  var exit = 0;
  if (match >= 28673) {
    if (match >= 45057) {
      if (match >= 53249) {
        if (match !== 57344) {
          if (match !== 61440) {
            return /* tuple */[
                    0,
                    mmu
                  ];
          } else {
            var match$1 = addr & 3840;
            if (match$1 !== 3584) {
              if (match$1 !== 3840) {
                return /* tuple */[
                        Caml_array.caml_array_get(mmu[/* workRam */4], addr & 8191),
                        mmu
                      ];
              } else if (addr >= 65408) {
                return /* tuple */[
                        Caml_array.caml_array_get(mmu[/* zeroPageRam */5], addr & 127),
                        mmu
                      ];
              } else {
                var match$2 = addr & 240;
                if (match$2 >= 81) {
                  if (match$2 !== 96 && match$2 !== 112) {
                    return /* tuple */[
                            0,
                            mmu
                          ];
                  } else {
                    return /* tuple */[
                            Gpu$GameboyEmulator.read8(gpu),
                            mmu
                          ];
                  }
                } else if (match$2 !== 64 && match$2 < 80) {
                  return /* tuple */[
                          0,
                          mmu
                        ];
                } else {
                  return /* tuple */[
                          Gpu$GameboyEmulator.read8(gpu),
                          mmu
                        ];
                }
              }
            } else {
              return /* tuple */[
                      0,
                      mmu
                    ];
            }
          }
        } else {
          exit = 4;
        }
      } else if (match !== 49152 && match < 53248) {
        return /* tuple */[
                0,
                mmu
              ];
      } else {
        exit = 4;
      }
    } else if (match >= 36865 || match !== 32768 && match < 36864) {
      return /* tuple */[
              0,
              mmu
            ];
    } else {
      exit = 3;
    }
  } else if (match >= 12289) {
    if (match >= 20481) {
      if (match !== 24576 && match < 28672) {
        return /* tuple */[
                0,
                mmu
              ];
      } else {
        exit = 2;
      }
    } else if (match !== 16384 && match < 20480) {
      return /* tuple */[
              0,
              mmu
            ];
    } else {
      exit = 2;
    }
  } else if (match >= 4097) {
    if (match !== 8192 && match < 12288) {
      return /* tuple */[
              0,
              mmu
            ];
    } else {
      exit = 1;
    }
  } else if (match !== 0) {
    if (match >= 4096) {
      exit = 1;
    } else {
      return /* tuple */[
              0,
              mmu
            ];
    }
  } else {
    var match$3 = mmu[/* finishedBios */0];
    var match$4 = addr <= 255;
    var match$5 = addr === 256;
    if (match$3) {
      return /* tuple */[
              Caml_array.caml_array_get(mmu[/* rom */2], addr),
              mmu
            ];
    } else if (match$4) {
      return /* tuple */[
              Caml_array.caml_array_get(bios, addr),
              mmu
            ];
    } else if (match$5) {
      console.log("Loaded BIOS");
      return /* tuple */[
              Caml_array.caml_array_get(mmu[/* rom */2], addr),
              /* record */[
                /* finishedBios */true,
                /* cartType */mmu[/* cartType */1],
                /* rom */mmu[/* rom */2],
                /* externalRam */mmu[/* externalRam */3],
                /* workRam */mmu[/* workRam */4],
                /* zeroPageRam */mmu[/* zeroPageRam */5]
              ]
            ];
    } else {
      return /* tuple */[
              Caml_array.caml_array_get(mmu[/* rom */2], addr),
              mmu
            ];
    }
  }
  switch (exit) {
    case 1 : 
    case 2 : 
        return /* tuple */[
                Caml_array.caml_array_get(mmu[/* rom */2], addr),
                mmu
              ];
    case 3 : 
        return /* tuple */[
                Caml_array.caml_array_get(gpu[/* vram */7], addr & 8191),
                mmu
              ];
    case 4 : 
        return /* tuple */[
                Caml_array.caml_array_get(mmu[/* workRam */4], addr & 8191),
                mmu
              ];
    
  }
}

function read16(addr, state) {
  var match = read8(addr, state);
  var match$1 = read8(addr + 1 | 0, /* record */[
        /* gpu */state[/* gpu */0],
        /* mmu */match[1]
      ]);
  var c = (match$1[0] << 8);
  return /* tuple */[
          match[0] + c | 0,
          match$1[1]
        ];
}

function write8(addr, v, param) {
  var mmu = param[/* mmu */1];
  var gpu = param[/* gpu */0];
  if (v > 255) {
    throw [
          AssertionException,
          Curry._2(Printf.sprintf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "Write8: ",
                        /* Int */Block.__(4, [
                            /* Int_x */6,
                            /* No_padding */0,
                            /* No_precision */0,
                            /* Char_literal */Block.__(12, [
                                /* " " */32,
                                /* Int */Block.__(4, [
                                    /* Int_x */6,
                                    /* No_padding */0,
                                    /* No_precision */0,
                                    /* End_of_format */0
                                  ])
                              ])
                          ])
                      ]),
                    "Write8: %x %x"
                  ]), addr, v)
        ];
  }
  var match = addr & 61440;
  var exit = 0;
  if (match >= 28673 && !(match !== 32768 && match !== 36864)) {
    exit = 1;
  } else {
    return /* tuple */[
            mmu,
            gpu
          ];
  }
  if (exit === 1) {
    Caml_array.caml_array_set(gpu[/* vram */7], addr & 8191, v);
    Gpu$GameboyEmulator.updateTile(addr, gpu);
    return /* tuple */[
            mmu,
            gpu
          ];
  }
  
}

function write16(addr, v, s) {
  if (v > 65535) {
    throw [
          AssertionException,
          Curry._2(Printf.sprintf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "Write16: ",
                        /* Int */Block.__(4, [
                            /* Int_x */6,
                            /* No_padding */0,
                            /* No_precision */0,
                            /* Char_literal */Block.__(12, [
                                /* " " */32,
                                /* Int */Block.__(4, [
                                    /* Int_x */6,
                                    /* No_padding */0,
                                    /* No_precision */0,
                                    /* End_of_format */0
                                  ])
                              ])
                          ])
                      ]),
                    "Write16: %x %x"
                  ]), addr, v)
        ];
  }
  var match = write8(addr, v & 255, s);
  var match$1 = write8(addr + 1 | 0, (v >>> 8), /* record */[
        /* gpu */match[1],
        /* mmu */match[0]
      ]);
  return /* tuple */[
          match$1[0],
          match$1[1]
        ];
}

exports.reset = reset;
exports.load = load;
exports.read8 = read8;
exports.read16 = read16;
exports.write8 = write8;
exports.write16 = write16;
/* bios Not a pure module */
