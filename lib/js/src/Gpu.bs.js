// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Range = require("bs-platform/lib/js/belt_Range.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Renderer$GameboyEmulator = require("./Renderer.bs.js");

function initTileset(param) {
  return $$Array.init(512, (function (param) {
                return $$Array.init(8, (function (param) {
                              return Caml_array.caml_make_vect(8, 0);
                            }));
              }));
}

function make(param) {
  return /* record */[
          /* bgmap */0,
          /* bgtile */0,
          /* clock */0,
          /* line */0,
          /* mode : OamRead */2,
          /* oam */Caml_array.caml_make_vect(160, 0),
          /* tileset */initTileset(/* () */0),
          /* vram */Caml_array.caml_make_vect(8192, 0)
        ];
}

function reset(param) {
  return /* record */[
          /* bgmap */0,
          /* bgtile */0,
          /* clock */0,
          /* line */0,
          /* mode : OamRead */2,
          /* oam */Caml_array.caml_make_vect(160, 0),
          /* tileset */initTileset(/* () */0),
          /* vram */Caml_array.caml_make_vect(8192, 0)
        ];
}

function updateTile(addr, gpu) {
  var addr$1 = addr & 8190;
  var tile = (addr$1 >>> 4) & 511;
  var y = (addr$1 >>> 1) & 7;
  Belt_Range.forEach(0, 7, (function (x) {
          var sx = (1 << (7 - x | 0));
          var match = (Caml_array.caml_array_get(gpu[/* vram */7], addr$1) & sx) > 0;
          var b1 = match ? 1 : 0;
          var match$1 = (Caml_array.caml_array_get(gpu[/* vram */7], addr$1 + 1 | 0) & sx) > 0;
          var b2 = match$1 ? 2 : 0;
          Caml_array.caml_array_set(Caml_array.caml_array_get(Caml_array.caml_array_get(gpu[/* tileset */6], tile), y), x, b1 + b2 | 0);
          return /* () */0;
        }));
  return /* () */0;
}

function getTile(index, gpu) {
  var tile = Belt_Option.getWithDefault(Belt_Array.get(gpu[/* vram */7], index), 0);
  var match = gpu[/* bgtile */1] === 1 && tile < 128;
  if (match) {
    return tile + 256 | 0;
  } else {
    return tile;
  }
}

function step(mCycles, renderer, gpu) {
  var modeclock = gpu[/* clock */2] + mCycles | 0;
  var gpu_000 = /* bgmap */gpu[/* bgmap */0];
  var gpu_001 = /* bgtile */gpu[/* bgtile */1];
  var gpu_003 = /* line */gpu[/* line */3];
  var gpu_004 = /* mode */gpu[/* mode */4];
  var gpu_005 = /* oam */gpu[/* oam */5];
  var gpu_006 = /* tileset */gpu[/* tileset */6];
  var gpu_007 = /* vram */gpu[/* vram */7];
  var gpu$1 = /* record */[
    gpu_000,
    gpu_001,
    /* clock */modeclock,
    gpu_003,
    gpu_004,
    gpu_005,
    gpu_006,
    gpu_007
  ];
  var match = gpu_004;
  switch (match) {
    case /* Hblank */0 :
        if (modeclock >= 51) {
          var line = gpu_003 + 1 | 0;
          if (line === 144) {
            Renderer$GameboyEmulator.renderToScreen(renderer);
            return /* record */[
                    gpu_000,
                    gpu_001,
                    /* clock */0,
                    /* line */line,
                    /* mode : Vblank */1,
                    gpu_005,
                    gpu_006,
                    gpu_007
                  ];
          } else {
            return /* record */[
                    gpu_000,
                    gpu_001,
                    /* clock */0,
                    /* line */line,
                    /* mode : OamRead */2,
                    gpu_005,
                    gpu_006,
                    gpu_007
                  ];
          }
        } else {
          return gpu$1;
        }
    case /* Vblank */1 :
        if (modeclock >= 114) {
          var line$1 = gpu_003 + 1 | 0;
          if (line$1 > 153) {
            return /* record */[
                    gpu_000,
                    gpu_001,
                    /* clock */0,
                    /* line */0,
                    /* mode : OamRead */2,
                    gpu_005,
                    gpu_006,
                    gpu_007
                  ];
          } else {
            return /* record */[
                    gpu_000,
                    gpu_001,
                    /* clock */0,
                    /* line */line$1,
                    gpu_004,
                    gpu_005,
                    gpu_006,
                    gpu_007
                  ];
          }
        } else {
          return gpu$1;
        }
    case /* OamRead */2 :
        if (modeclock >= 20) {
          return /* record */[
                  gpu_000,
                  gpu_001,
                  /* clock */0,
                  gpu_003,
                  /* mode : VramRead */3,
                  gpu_005,
                  gpu_006,
                  gpu_007
                ];
        } else {
          return gpu$1;
        }
    case /* VramRead */3 :
        if (modeclock >= 43) {
          var renderer$1 = renderer;
          var gpu$2 = /* record */[
            gpu_000,
            gpu_001,
            /* clock */0,
            gpu_003,
            /* mode : Hblank */0,
            gpu_005,
            gpu_006,
            gpu_007
          ];
          var palette = /* array */[
            250,
            192,
            96,
            0
          ];
          var match$1 = gpu$2[/* bgmap */0] === 1;
          var mapoffs = match$1 ? 7168 : 6144;
          var mapoffs$1 = mapoffs + ((gpu$2[/* line */3] + 0 | 0) >>> 3) | 0;
          var lineoffs = 0;
          var y = gpu$2[/* line */3] + 0 & 7;
          var x = 0;
          var tile = getTile(mapoffs$1 + lineoffs | 0, gpu$2);
          var canvasoffs = (Caml_int32.imul(gpu$2[/* line */3], 160) << 2);
          var setPixels = function (_scrX, _tile, _xc, _cOff, _lOff) {
            while(true) {
              var lOff = _lOff;
              var cOff = _cOff;
              var xc = _xc;
              var tile = _tile;
              var scrX = _scrX;
              if (scrX !== 160) {
                var tile$prime = Belt_Array.get(gpu$2[/* tileset */6], tile);
                if (tile$prime !== undefined) {
                  var match = Belt_Array.get(tile$prime, y);
                  if (match !== undefined) {
                    var match$1 = Belt_Array.get(match, xc);
                    if (match$1 !== undefined) {
                      var match$2 = Belt_Array.get(palette, match$1);
                      if (match$2 !== undefined) {
                        var color = match$2;
                        Renderer$GameboyEmulator.setPixel(renderer$1, cOff + 0 | 0, color);
                        Renderer$GameboyEmulator.setPixel(renderer$1, cOff + 1 | 0, color);
                        Renderer$GameboyEmulator.setPixel(renderer$1, cOff + 2 | 0, color);
                        Renderer$GameboyEmulator.setPixel(renderer$1, cOff + 3 | 0, 255);
                      }
                      
                    }
                    
                  }
                  
                }
                var xc$prime = xc + 1 | 0;
                var match$3;
                if (xc$prime === 8) {
                  var lOff$prime = lOff + 1 & 31;
                  var tile$prime$1 = getTile(mapoffs$1 + lOff$prime | 0, gpu$2);
                  match$3 = /* tuple */[
                    0,
                    lOff$prime,
                    tile$prime$1
                  ];
                } else {
                  match$3 = /* tuple */[
                    xc$prime,
                    lOff,
                    tile
                  ];
                }
                _lOff = match$3[1];
                _cOff = cOff + 4 | 0;
                _xc = match$3[0];
                _tile = match$3[2];
                _scrX = scrX + 1 | 0;
                continue ;
              } else {
                return /* () */0;
              }
            };
          };
          setPixels(0, tile, x, canvasoffs, lineoffs);
          return gpu$2;
        } else {
          return gpu$1;
        }
    
  }
}

function read8(_gpu) {
  return 0;
}

function write8(gpu) {
  return gpu;
}

exports.make = make;
exports.reset = reset;
exports.updateTile = updateTile;
exports.step = step;
exports.read8 = read8;
exports.write8 = write8;
/* Renderer-GameboyEmulator Not a pure module */
