// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Utils$GameboyEmulator = require("./Utils.bs.js");

function make(param) {
  var canvas = Curry._1(Utils$GameboyEmulator.Canvas[/* getContextFromId */0], "screen");
  var screen = canvas.createImageData(160, 144);
  var screenData = screen.data;
  $$Array.iteri((function (idx, _i) {
          return Caml_array.caml_array_set(screenData, idx, 196);
        }), screenData);
  canvas.putImageData(screen, 0, 0);
  console.log(Curry._1(Printf.sprintf(/* Format */[
                /* String_literal */Block.__(11, [
                    "Initialized screen data: ",
                    /* Int */Block.__(4, [
                        /* Int_d */0,
                        /* No_padding */0,
                        /* No_precision */0,
                        /* End_of_format */0
                      ])
                  ]),
                "Initialized screen data: %d"
              ]), screenData.length));
  return /* record */[
          /* canvas */canvas,
          /* screen */screen
        ];
}

function renderToScreen(renderer) {
  renderer[/* canvas */0].putImageData(renderer[/* screen */1], 0, 0);
  return /* () */0;
}

function setPixel(renderer, pixel, color) {
  var screenData = renderer[/* screen */1].data;
  return Caml_array.caml_array_set(screenData, pixel, color);
}

exports.make = make;
exports.renderToScreen = renderToScreen;
exports.setPixel = setPixel;
/* Utils-GameboyEmulator Not a pure module */
